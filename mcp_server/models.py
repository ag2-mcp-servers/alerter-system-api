# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:24:34+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional, Union
from uuid import UUID

from pydantic import (
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Field,
    PositiveInt,
    RootModel,
    conint,
    constr,
)


class AlertLogGet(BaseModel):
    alertLogErrorMessage: Optional[str] = Field(
        None, description='The reason why the dispatch of the alert failed.'
    )
    alertLogMessageId: Optional[str] = Field(
        None,
        description='The id of the successfully dispatched message as received from the transport that was used.',
    )
    alertLogStatusCode: Optional[str] = Field(
        None, description='The status of the alert log.'
    )
    alertService: Optional[str] = Field(
        None, description='The alert service that is related to this resource.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[str] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    monitor: Optional[str] = Field(
        None, description='The monitor that is related to this resource instance.'
    )
    partition: Optional[str] = Field(
        None,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    ping: Optional[str] = Field(
        None, description='The ping that triggered this resource instance.'
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    webhookResponseBody: Optional[str] = Field(
        None,
        description='The response body returned by a successful request to a webhook URL. Length limited to 1,000 characters.',
    )
    webhookResponseHeaders: Optional[List[str]] = Field(
        None,
        description='The response headers returned by a successful request to a webhook URL.',
    )


class Hydra(Enum):
    http___www_w3_org_ns_hydra_core_ = 'http://www.w3.org/ns/hydra/core#'


class FieldContext(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class AlertLogJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    alertLogErrorMessage: Optional[str] = Field(
        None, description='The reason why the dispatch of the alert failed.'
    )
    alertLogMessageId: Optional[str] = Field(
        None,
        description='The id of the successfully dispatched message as received from the transport that was used.',
    )
    alertLogStatusCode: Optional[str] = Field(
        None, description='The status of the alert log.'
    )
    alertService: Optional[str] = Field(
        None, description='The alert service that is related to this resource.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[str] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    monitor: Optional[str] = Field(
        None, description='The monitor that is related to this resource instance.'
    )
    partition: Optional[str] = Field(
        None,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    ping: Optional[str] = Field(
        None, description='The ping that triggered this resource instance.'
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    webhookResponseBody: Optional[str] = Field(
        None,
        description='The response body returned by a successful request to a webhook URL. Length limited to 1,000 characters.',
    )
    webhookResponseHeaders: Optional[List[str]] = Field(
        None,
        description='The response headers returned by a successful request to a webhook URL.',
    )


class AlertLogStatusCodeGet(BaseModel):
    id: Optional[str] = None


class FieldContext1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class AlertLogStatusCodeJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext1]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    id: Optional[str] = None


class AlertServiceGet(BaseModel):
    alertServiceName: constr(max_length=255) = Field(
        ..., description='The name of the alert service. Max 255 characters.'
    )
    alertServiceNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    alertServiceTransportCode: str = Field(
        ..., description='The transport of the alert service.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    creditsPerTransportAlert: Optional[int] = Field(
        1,
        description='The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.',
        examples=[1],
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mediaObjects: Optional[List[str]] = Field(
        None,
        description='Media objects that must be sent with each alert. Only applicable when you use your own email alert services.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    recipientEmailAddress: EmailStr = Field(
        ..., description='The email address where alerts will be sent.'
    )
    recipientPhoneNumber: constr(max_length=255) = Field(
        ...,
        description='The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportAlerta: Optional[str] = None
    transportAllMySms: Optional[str] = None
    transportAmazonSns: Optional[str] = None
    transportBandwidth: Optional[str] = None
    transportChatwork: Optional[str] = None
    transportClickSend: Optional[str] = None
    transportClickatell: Optional[str] = None
    transportContactEveryone: Optional[str] = None
    transportDiscord: Optional[str] = None
    transportEmail: Optional[str] = None
    transportEngagespot: Optional[str] = None
    transportEsendex: Optional[str] = None
    transportExpo: Optional[str] = None
    transportFirebase: Optional[str] = None
    transportFortySixElks: Optional[str] = None
    transportFreeMobile: Optional[str] = None
    transportFreshdesk: Optional[str] = None
    transportGatewayApi: Optional[str] = None
    transportGitter: Optional[str] = None
    transportGoogleChat: Optional[str] = None
    transportGotify: Optional[str] = None
    transportHelpScout: Optional[str] = None
    transportInfobip: Optional[str] = None
    transportIqsms: Optional[str] = None
    transportKazInfoTeh: Optional[str] = None
    transportLightSms: Optional[str] = None
    transportLineNotify: Optional[str] = None
    transportLinkedIn: Optional[str] = None
    transportMailjet: Optional[str] = None
    transportMastodon: Optional[str] = None
    transportMattermost: Optional[str] = None
    transportMercure: Optional[str] = None
    transportMessageBird: Optional[str] = None
    transportMessageMedia: Optional[str] = None
    transportMicrosoftTeams: Optional[str] = None
    transportMobyt: Optional[str] = None
    transportOctopush: Optional[str] = None
    transportOneSignal: Optional[str] = None
    transportOpsgenie: Optional[str] = None
    transportOrangeSms: Optional[str] = None
    transportOvhCloud: Optional[str] = None
    transportPagerDuty: Optional[str] = None
    transportPagerTree: Optional[str] = None
    transportPlivo: Optional[str] = None
    transportPushbullet: Optional[str] = None
    transportPushover: Optional[str] = None
    transportPushy: Optional[str] = None
    transportRingCentral: Optional[str] = None
    transportRocketChat: Optional[str] = None
    transportSendberry: Optional[str] = None
    transportSendinblue: Optional[str] = None
    transportSimpleTextin: Optional[str] = None
    transportSinch: Optional[str] = None
    transportSlack: Optional[str] = None
    transportSms77: Optional[str] = None
    transportSmsBiuras: Optional[str] = None
    transportSmsFactor: Optional[str] = None
    transportSmsapi: Optional[str] = None
    transportSmsc: Optional[str] = None
    transportSmsmode: Optional[str] = None
    transportSpotHit: Optional[str] = None
    transportTelegram: Optional[str] = None
    transportTelnyx: Optional[str] = None
    transportTermii: Optional[str] = None
    transportTrello: Optional[str] = None
    transportTurboSms: Optional[str] = None
    transportTwilio: Optional[str] = None
    transportTwitter: Optional[str] = None
    transportVonage: Optional[str] = None
    transportWebhook: Optional[str] = None
    transportYunpian: Optional[str] = None
    transportZendesk: Optional[str] = None
    transportZulip: Optional[str] = None


class AlertServicePost(BaseModel):
    alertServiceName: constr(max_length=255) = Field(
        ..., description='The name of the alert service. Max 255 characters.'
    )
    alertServiceNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    alertServiceTransportCode: str = Field(
        ..., description='The transport of the alert service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mediaObjects: Optional[List[str]] = Field(
        None,
        description='Media objects that must be sent with each alert. Only applicable when you use your own email alert services.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    recipientEmailAddress: EmailStr = Field(
        ..., description='The email address where alerts will be sent.'
    )
    recipientPhoneNumber: constr(max_length=255) = Field(
        ...,
        description='The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.',
    )
    transportAlerta: Optional[str] = None
    transportAllMySms: Optional[str] = None
    transportAmazonSns: Optional[str] = None
    transportBandwidth: Optional[str] = None
    transportChatwork: Optional[str] = None
    transportClickSend: Optional[str] = None
    transportClickatell: Optional[str] = None
    transportContactEveryone: Optional[str] = None
    transportDiscord: Optional[str] = None
    transportEmail: Optional[str] = None
    transportEngagespot: Optional[str] = None
    transportEsendex: Optional[str] = None
    transportExpo: Optional[str] = None
    transportFirebase: Optional[str] = None
    transportFortySixElks: Optional[str] = None
    transportFreeMobile: Optional[str] = None
    transportFreshdesk: Optional[str] = None
    transportGatewayApi: Optional[str] = None
    transportGitter: Optional[str] = None
    transportGoogleChat: Optional[str] = None
    transportGotify: Optional[str] = None
    transportHelpScout: Optional[str] = None
    transportInfobip: Optional[str] = None
    transportIqsms: Optional[str] = None
    transportKazInfoTeh: Optional[str] = None
    transportLightSms: Optional[str] = None
    transportLineNotify: Optional[str] = None
    transportLinkedIn: Optional[str] = None
    transportMailjet: Optional[str] = None
    transportMastodon: Optional[str] = None
    transportMattermost: Optional[str] = None
    transportMercure: Optional[str] = None
    transportMessageBird: Optional[str] = None
    transportMessageMedia: Optional[str] = None
    transportMicrosoftTeams: Optional[str] = None
    transportMobyt: Optional[str] = None
    transportOctopush: Optional[str] = None
    transportOneSignal: Optional[str] = None
    transportOpsgenie: Optional[str] = None
    transportOrangeSms: Optional[str] = None
    transportOvhCloud: Optional[str] = None
    transportPagerDuty: Optional[str] = None
    transportPagerTree: Optional[str] = None
    transportPlivo: Optional[str] = None
    transportPushbullet: Optional[str] = None
    transportPushover: Optional[str] = None
    transportPushy: Optional[str] = None
    transportRingCentral: Optional[str] = None
    transportRocketChat: Optional[str] = None
    transportSendberry: Optional[str] = None
    transportSendinblue: Optional[str] = None
    transportSimpleTextin: Optional[str] = None
    transportSinch: Optional[str] = None
    transportSlack: Optional[str] = None
    transportSms77: Optional[str] = None
    transportSmsBiuras: Optional[str] = None
    transportSmsFactor: Optional[str] = None
    transportSmsapi: Optional[str] = None
    transportSmsc: Optional[str] = None
    transportSmsmode: Optional[str] = None
    transportSpotHit: Optional[str] = None
    transportTelegram: Optional[str] = None
    transportTelnyx: Optional[str] = None
    transportTermii: Optional[str] = None
    transportTrello: Optional[str] = None
    transportTurboSms: Optional[str] = None
    transportTwilio: Optional[str] = None
    transportTwitter: Optional[str] = None
    transportVonage: Optional[str] = None
    transportWebhook: Optional[str] = None
    transportYunpian: Optional[str] = None
    transportZendesk: Optional[str] = None
    transportZulip: Optional[str] = None


class AlertServicePut(BaseModel):
    alertServiceName: constr(max_length=255) = Field(
        ..., description='The name of the alert service. Max 255 characters.'
    )
    alertServiceNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mediaObjects: Optional[List[str]] = Field(
        None,
        description='Media objects that must be sent with each alert. Only applicable when you use your own email alert services.',
    )
    recipientEmailAddress: EmailStr = Field(
        ..., description='The email address where alerts will be sent.'
    )
    recipientPhoneNumber: constr(max_length=255) = Field(
        ...,
        description='The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.',
    )
    transportAlerta: Optional[str] = None
    transportAllMySms: Optional[str] = None
    transportAmazonSns: Optional[str] = None
    transportBandwidth: Optional[str] = None
    transportChatwork: Optional[str] = None
    transportClickSend: Optional[str] = None
    transportClickatell: Optional[str] = None
    transportContactEveryone: Optional[str] = None
    transportDiscord: Optional[str] = None
    transportEmail: Optional[str] = None
    transportEngagespot: Optional[str] = None
    transportEsendex: Optional[str] = None
    transportExpo: Optional[str] = None
    transportFirebase: Optional[str] = None
    transportFortySixElks: Optional[str] = None
    transportFreeMobile: Optional[str] = None
    transportFreshdesk: Optional[str] = None
    transportGatewayApi: Optional[str] = None
    transportGitter: Optional[str] = None
    transportGoogleChat: Optional[str] = None
    transportGotify: Optional[str] = None
    transportHelpScout: Optional[str] = None
    transportInfobip: Optional[str] = None
    transportIqsms: Optional[str] = None
    transportKazInfoTeh: Optional[str] = None
    transportLightSms: Optional[str] = None
    transportLineNotify: Optional[str] = None
    transportLinkedIn: Optional[str] = None
    transportMailjet: Optional[str] = None
    transportMastodon: Optional[str] = None
    transportMattermost: Optional[str] = None
    transportMercure: Optional[str] = None
    transportMessageBird: Optional[str] = None
    transportMessageMedia: Optional[str] = None
    transportMicrosoftTeams: Optional[str] = None
    transportMobyt: Optional[str] = None
    transportOctopush: Optional[str] = None
    transportOneSignal: Optional[str] = None
    transportOpsgenie: Optional[str] = None
    transportOrangeSms: Optional[str] = None
    transportOvhCloud: Optional[str] = None
    transportPagerDuty: Optional[str] = None
    transportPagerTree: Optional[str] = None
    transportPlivo: Optional[str] = None
    transportPushbullet: Optional[str] = None
    transportPushover: Optional[str] = None
    transportPushy: Optional[str] = None
    transportRingCentral: Optional[str] = None
    transportRocketChat: Optional[str] = None
    transportSendberry: Optional[str] = None
    transportSendinblue: Optional[str] = None
    transportSimpleTextin: Optional[str] = None
    transportSinch: Optional[str] = None
    transportSlack: Optional[str] = None
    transportSms77: Optional[str] = None
    transportSmsBiuras: Optional[str] = None
    transportSmsFactor: Optional[str] = None
    transportSmsapi: Optional[str] = None
    transportSmsc: Optional[str] = None
    transportSmsmode: Optional[str] = None
    transportSpotHit: Optional[str] = None
    transportTelegram: Optional[str] = None
    transportTelnyx: Optional[str] = None
    transportTermii: Optional[str] = None
    transportTrello: Optional[str] = None
    transportTurboSms: Optional[str] = None
    transportTwilio: Optional[str] = None
    transportTwitter: Optional[str] = None
    transportVonage: Optional[str] = None
    transportWebhook: Optional[str] = None
    transportYunpian: Optional[str] = None
    transportZendesk: Optional[str] = None
    transportZulip: Optional[str] = None


class FieldContext2(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class AlertServiceJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext2]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    alertServiceName: constr(max_length=255) = Field(
        ..., description='The name of the alert service. Max 255 characters.'
    )
    alertServiceNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    alertServiceTransportCode: str = Field(
        ..., description='The transport of the alert service.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    creditsPerTransportAlert: Optional[int] = Field(
        1,
        description='The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.',
        examples=[1],
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mediaObjects: Optional[List[str]] = Field(
        None,
        description='Media objects that must be sent with each alert. Only applicable when you use your own email alert services.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    recipientEmailAddress: EmailStr = Field(
        ..., description='The email address where alerts will be sent.'
    )
    recipientPhoneNumber: constr(max_length=255) = Field(
        ...,
        description='The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportAlerta: Optional[str] = None
    transportAllMySms: Optional[str] = None
    transportAmazonSns: Optional[str] = None
    transportBandwidth: Optional[str] = None
    transportChatwork: Optional[str] = None
    transportClickSend: Optional[str] = None
    transportClickatell: Optional[str] = None
    transportContactEveryone: Optional[str] = None
    transportDiscord: Optional[str] = None
    transportEmail: Optional[str] = None
    transportEngagespot: Optional[str] = None
    transportEsendex: Optional[str] = None
    transportExpo: Optional[str] = None
    transportFirebase: Optional[str] = None
    transportFortySixElks: Optional[str] = None
    transportFreeMobile: Optional[str] = None
    transportFreshdesk: Optional[str] = None
    transportGatewayApi: Optional[str] = None
    transportGitter: Optional[str] = None
    transportGoogleChat: Optional[str] = None
    transportGotify: Optional[str] = None
    transportHelpScout: Optional[str] = None
    transportInfobip: Optional[str] = None
    transportIqsms: Optional[str] = None
    transportKazInfoTeh: Optional[str] = None
    transportLightSms: Optional[str] = None
    transportLineNotify: Optional[str] = None
    transportLinkedIn: Optional[str] = None
    transportMailjet: Optional[str] = None
    transportMastodon: Optional[str] = None
    transportMattermost: Optional[str] = None
    transportMercure: Optional[str] = None
    transportMessageBird: Optional[str] = None
    transportMessageMedia: Optional[str] = None
    transportMicrosoftTeams: Optional[str] = None
    transportMobyt: Optional[str] = None
    transportOctopush: Optional[str] = None
    transportOneSignal: Optional[str] = None
    transportOpsgenie: Optional[str] = None
    transportOrangeSms: Optional[str] = None
    transportOvhCloud: Optional[str] = None
    transportPagerDuty: Optional[str] = None
    transportPagerTree: Optional[str] = None
    transportPlivo: Optional[str] = None
    transportPushbullet: Optional[str] = None
    transportPushover: Optional[str] = None
    transportPushy: Optional[str] = None
    transportRingCentral: Optional[str] = None
    transportRocketChat: Optional[str] = None
    transportSendberry: Optional[str] = None
    transportSendinblue: Optional[str] = None
    transportSimpleTextin: Optional[str] = None
    transportSinch: Optional[str] = None
    transportSlack: Optional[str] = None
    transportSms77: Optional[str] = None
    transportSmsBiuras: Optional[str] = None
    transportSmsFactor: Optional[str] = None
    transportSmsapi: Optional[str] = None
    transportSmsc: Optional[str] = None
    transportSmsmode: Optional[str] = None
    transportSpotHit: Optional[str] = None
    transportTelegram: Optional[str] = None
    transportTelnyx: Optional[str] = None
    transportTermii: Optional[str] = None
    transportTrello: Optional[str] = None
    transportTurboSms: Optional[str] = None
    transportTwilio: Optional[str] = None
    transportTwitter: Optional[str] = None
    transportVonage: Optional[str] = None
    transportWebhook: Optional[str] = None
    transportYunpian: Optional[str] = None
    transportZendesk: Optional[str] = None
    transportZulip: Optional[str] = None


class AlertServiceJsonldPost(BaseModel):
    alertServiceName: constr(max_length=255) = Field(
        ..., description='The name of the alert service. Max 255 characters.'
    )
    alertServiceNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    alertServiceTransportCode: str = Field(
        ..., description='The transport of the alert service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mediaObjects: Optional[List[str]] = Field(
        None,
        description='Media objects that must be sent with each alert. Only applicable when you use your own email alert services.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    recipientEmailAddress: EmailStr = Field(
        ..., description='The email address where alerts will be sent.'
    )
    recipientPhoneNumber: constr(max_length=255) = Field(
        ...,
        description='The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.',
    )
    transportAlerta: Optional[str] = None
    transportAllMySms: Optional[str] = None
    transportAmazonSns: Optional[str] = None
    transportBandwidth: Optional[str] = None
    transportChatwork: Optional[str] = None
    transportClickSend: Optional[str] = None
    transportClickatell: Optional[str] = None
    transportContactEveryone: Optional[str] = None
    transportDiscord: Optional[str] = None
    transportEmail: Optional[str] = None
    transportEngagespot: Optional[str] = None
    transportEsendex: Optional[str] = None
    transportExpo: Optional[str] = None
    transportFirebase: Optional[str] = None
    transportFortySixElks: Optional[str] = None
    transportFreeMobile: Optional[str] = None
    transportFreshdesk: Optional[str] = None
    transportGatewayApi: Optional[str] = None
    transportGitter: Optional[str] = None
    transportGoogleChat: Optional[str] = None
    transportGotify: Optional[str] = None
    transportHelpScout: Optional[str] = None
    transportInfobip: Optional[str] = None
    transportIqsms: Optional[str] = None
    transportKazInfoTeh: Optional[str] = None
    transportLightSms: Optional[str] = None
    transportLineNotify: Optional[str] = None
    transportLinkedIn: Optional[str] = None
    transportMailjet: Optional[str] = None
    transportMastodon: Optional[str] = None
    transportMattermost: Optional[str] = None
    transportMercure: Optional[str] = None
    transportMessageBird: Optional[str] = None
    transportMessageMedia: Optional[str] = None
    transportMicrosoftTeams: Optional[str] = None
    transportMobyt: Optional[str] = None
    transportOctopush: Optional[str] = None
    transportOneSignal: Optional[str] = None
    transportOpsgenie: Optional[str] = None
    transportOrangeSms: Optional[str] = None
    transportOvhCloud: Optional[str] = None
    transportPagerDuty: Optional[str] = None
    transportPagerTree: Optional[str] = None
    transportPlivo: Optional[str] = None
    transportPushbullet: Optional[str] = None
    transportPushover: Optional[str] = None
    transportPushy: Optional[str] = None
    transportRingCentral: Optional[str] = None
    transportRocketChat: Optional[str] = None
    transportSendberry: Optional[str] = None
    transportSendinblue: Optional[str] = None
    transportSimpleTextin: Optional[str] = None
    transportSinch: Optional[str] = None
    transportSlack: Optional[str] = None
    transportSms77: Optional[str] = None
    transportSmsBiuras: Optional[str] = None
    transportSmsFactor: Optional[str] = None
    transportSmsapi: Optional[str] = None
    transportSmsc: Optional[str] = None
    transportSmsmode: Optional[str] = None
    transportSpotHit: Optional[str] = None
    transportTelegram: Optional[str] = None
    transportTelnyx: Optional[str] = None
    transportTermii: Optional[str] = None
    transportTrello: Optional[str] = None
    transportTurboSms: Optional[str] = None
    transportTwilio: Optional[str] = None
    transportTwitter: Optional[str] = None
    transportVonage: Optional[str] = None
    transportWebhook: Optional[str] = None
    transportYunpian: Optional[str] = None
    transportZendesk: Optional[str] = None
    transportZulip: Optional[str] = None


class AlertServiceJsonldPut(BaseModel):
    alertServiceName: constr(max_length=255) = Field(
        ..., description='The name of the alert service. Max 255 characters.'
    )
    alertServiceNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the alert service. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mediaObjects: Optional[List[str]] = Field(
        None,
        description='Media objects that must be sent with each alert. Only applicable when you use your own email alert services.',
    )
    recipientEmailAddress: EmailStr = Field(
        ..., description='The email address where alerts will be sent.'
    )
    recipientPhoneNumber: constr(max_length=255) = Field(
        ...,
        description='The phone number where alerts will be sent. Ensure that the number format complies with the external transport service that will send the alert.',
    )
    transportAlerta: Optional[str] = None
    transportAllMySms: Optional[str] = None
    transportAmazonSns: Optional[str] = None
    transportBandwidth: Optional[str] = None
    transportChatwork: Optional[str] = None
    transportClickSend: Optional[str] = None
    transportClickatell: Optional[str] = None
    transportContactEveryone: Optional[str] = None
    transportDiscord: Optional[str] = None
    transportEmail: Optional[str] = None
    transportEngagespot: Optional[str] = None
    transportEsendex: Optional[str] = None
    transportExpo: Optional[str] = None
    transportFirebase: Optional[str] = None
    transportFortySixElks: Optional[str] = None
    transportFreeMobile: Optional[str] = None
    transportFreshdesk: Optional[str] = None
    transportGatewayApi: Optional[str] = None
    transportGitter: Optional[str] = None
    transportGoogleChat: Optional[str] = None
    transportGotify: Optional[str] = None
    transportHelpScout: Optional[str] = None
    transportInfobip: Optional[str] = None
    transportIqsms: Optional[str] = None
    transportKazInfoTeh: Optional[str] = None
    transportLightSms: Optional[str] = None
    transportLineNotify: Optional[str] = None
    transportLinkedIn: Optional[str] = None
    transportMailjet: Optional[str] = None
    transportMastodon: Optional[str] = None
    transportMattermost: Optional[str] = None
    transportMercure: Optional[str] = None
    transportMessageBird: Optional[str] = None
    transportMessageMedia: Optional[str] = None
    transportMicrosoftTeams: Optional[str] = None
    transportMobyt: Optional[str] = None
    transportOctopush: Optional[str] = None
    transportOneSignal: Optional[str] = None
    transportOpsgenie: Optional[str] = None
    transportOrangeSms: Optional[str] = None
    transportOvhCloud: Optional[str] = None
    transportPagerDuty: Optional[str] = None
    transportPagerTree: Optional[str] = None
    transportPlivo: Optional[str] = None
    transportPushbullet: Optional[str] = None
    transportPushover: Optional[str] = None
    transportPushy: Optional[str] = None
    transportRingCentral: Optional[str] = None
    transportRocketChat: Optional[str] = None
    transportSendberry: Optional[str] = None
    transportSendinblue: Optional[str] = None
    transportSimpleTextin: Optional[str] = None
    transportSinch: Optional[str] = None
    transportSlack: Optional[str] = None
    transportSms77: Optional[str] = None
    transportSmsBiuras: Optional[str] = None
    transportSmsFactor: Optional[str] = None
    transportSmsapi: Optional[str] = None
    transportSmsc: Optional[str] = None
    transportSmsmode: Optional[str] = None
    transportSpotHit: Optional[str] = None
    transportTelegram: Optional[str] = None
    transportTelnyx: Optional[str] = None
    transportTermii: Optional[str] = None
    transportTrello: Optional[str] = None
    transportTurboSms: Optional[str] = None
    transportTwilio: Optional[str] = None
    transportTwitter: Optional[str] = None
    transportVonage: Optional[str] = None
    transportWebhook: Optional[str] = None
    transportYunpian: Optional[str] = None
    transportZendesk: Optional[str] = None
    transportZulip: Optional[str] = None


class AlertServiceTransportCodeGet(BaseModel):
    codeName: Optional[str] = None
    id: Optional[str] = None


class FieldContext3(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class AlertServiceTransportCodeJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext3]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    codeName: Optional[str] = None
    id: Optional[str] = None


class CreditsConsumptionGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    creditsConsumptionEventCode: Optional[str] = Field(
        None, description='The type of event that consumed the credits.'
    )
    creditsConsumptionNotes: Optional[str] = Field(
        None, description='Notes that add additional information to the resource.'
    )
    creditsEventId: Optional[UUID] = Field(
        None,
        description='The ID of the event (Ping resource or AlertLog resource) that consumed the credits.',
    )
    creditsEventIri: Optional[str] = Field(
        None, description='The IRI of the event that is related to this resource.'
    )
    creditsUsed: Optional[str] = Field(
        None, description='The number of credits that were consumed.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )


class FieldContext4(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class CreditsConsumptionJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext4]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    creditsConsumptionEventCode: Optional[str] = Field(
        None, description='The type of event that consumed the credits.'
    )
    creditsConsumptionNotes: Optional[str] = Field(
        None, description='Notes that add additional information to the resource.'
    )
    creditsEventId: Optional[UUID] = Field(
        None,
        description='The ID of the event (Ping resource or AlertLog resource) that consumed the credits.',
    )
    creditsEventIri: Optional[str] = Field(
        None, description='The IRI of the event that is related to this resource.'
    )
    creditsUsed: Optional[str] = Field(
        None, description='The number of credits that were consumed.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )


class HttpMethodCodeGet(BaseModel):
    codeName: Optional[str] = Field(None, description='The name of the code.')
    id: Optional[str] = Field(
        None, description='The unique identifier of the resource instance.'
    )


class FieldContext5(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class HttpMethodCodeJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext5]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    codeName: Optional[str] = Field(None, description='The name of the code.')
    id: Optional[str] = Field(
        None, description='The unique identifier of the resource instance.'
    )


class MediaObjectGet(BaseModel):
    contentUrl: Optional[str] = Field(
        None, description='Where the media file can be accessed.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    fileSize: Optional[int] = Field(None, description='The size of the media file.')
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    keywords: Optional[constr(max_length=100)] = Field(
        None,
        description='A string of keywords that can be used to search for a resource. Max 100 characters.',
    )
    mimeType: Optional[str] = Field(
        None, description='The mime type of the media file.'
    )
    originalName: Optional[str] = Field(
        None, description='The original name of the media file.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )


class FieldContext6(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class MediaObjectJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext6]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    contentUrl: Optional[str] = Field(
        None, description='Where the media file can be accessed.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    fileSize: Optional[int] = Field(None, description='The size of the media file.')
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    keywords: Optional[constr(max_length=100)] = Field(
        None,
        description='A string of keywords that can be used to search for a resource. Max 100 characters.',
    )
    mimeType: Optional[str] = Field(
        None, description='The mime type of the media file.'
    )
    originalName: Optional[str] = Field(
        None, description='The original name of the media file.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )


class MonitorGet(BaseModel):
    alertPayloadExtended: Optional[constr(max_length=2100000)] = Field(
        None,
        description='Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.',
    )
    alertPayloadShort: Optional[constr(max_length=100)] = Field(
        None,
        description='Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.',
    )
    alertServices: Optional[List[str]] = Field(
        None, description='The alert services that are related to this resource.'
    )
    allowUnauthenticatedPings: Optional[bool] = Field(
        None,
        description='Indicates that the monitor will accept pings that are not OAuth authenticated.',
    )
    contentCheckMustNotExist: Optional[bool] = Field(
        None,
        description='Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.',
    )
    contentCheckText: Optional[str] = Field(
        None,
        description='The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.',
    )
    contentCheckUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that the Web Content monitor type must evaluate for the specified conditions.',
    )
    contentCheckXpathFilter: Optional[str] = Field(
        None,
        description='The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.',
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    graceSeconds: Optional[int] = Field(
        None,
        description='The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.',
    )
    humanizedInterval: Optional[str] = Field(
        None,
        description='The expected ping / run interval of this monitor in human readable form.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    internalMonitorName: Optional[str] = Field(
        None,
        description='The internal name of the monitor. This name is used in alerts when you use the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. The monitorName field is used when you use your own alert services.',
    )
    intervalDays: Optional[conint(ge=0)] = Field(
        None,
        description='The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalHours: Optional[conint(ge=0)] = Field(
        None,
        description='The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalMinutes: Optional[conint(ge=0)] = Field(
        None,
        description='The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalMonths: Optional[conint(ge=0)] = Field(
        None,
        description='The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalSeconds: Optional[conint(ge=0)] = Field(
        None,
        description='The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalYears: Optional[conint(ge=0)] = Field(
        None,
        description='The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    isMonitorPaused: Optional[bool] = Field(
        None,
        description='Indicates that the monitor is paused and will not send alerts.',
    )
    lastPingAt: Optional[datetime] = Field(
        None,
        description='When the last ping was received. This date-time is in the UTC timezone.',
    )
    monitorName: constr(max_length=255) = Field(
        ..., description='The name of the monitor. Max 255 characters.'
    )
    monitorNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    monitorStatusCode: Optional[str] = Field(
        None, description='The status of the monitor.'
    )
    monitorTypeCode: str = Field(..., description='The type of the monitor.')
    nextPingAt: Optional[datetime] = Field(
        None,
        description='When the next ping is expected. This date-time is in the UTC timezone.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pingSecret: Optional[str] = Field(
        None,
        description='A secret key that can be sent in the X_PING_SECRET HTTP request header of a ping for additional security. Sending the secret is recommended for unauthenticated ping requests. It is redundant for OAuth authenticated ping requests that have the "Authorization: Bearer" header.',
    )
    publicDescription: Optional[constr(max_length=10000)] = Field(
        None,
        description='A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    startMonitorAt: Optional[datetime] = Field(
        None,
        description='When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.',
    )
    startMonitorAtUtc: Optional[datetime] = Field(
        None, description='The startMonitorAt date-time in the UTC timezone.'
    )
    systemMessages: Optional[List[str]] = Field(
        None, description='Service notes regarding the resource.'
    )
    timezoneCode: str = Field(
        ...,
        description='The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.',
    )
    webResponseSecondsLimit: Optional[conint(ge=0)] = Field(
        None,
        description='The time in seconds that the Web Response monitor type must allow for the web page to respond.',
    )
    webResponseUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that the Web Response monitor type must evaluate for the specified conditions.',
    )


class MonitorPost(BaseModel):
    alertPayloadExtended: Optional[constr(max_length=2100000)] = Field(
        None,
        description='Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.',
    )
    alertPayloadShort: Optional[constr(max_length=100)] = Field(
        None,
        description='Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.',
    )
    alertServices: Optional[List[str]] = Field(
        None, description='The alert services that are related to this resource.'
    )
    allowUnauthenticatedPings: Optional[bool] = Field(
        None,
        description='Indicates that the monitor will accept pings that are not OAuth authenticated.',
    )
    contentCheckMustNotExist: Optional[bool] = Field(
        None,
        description='Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.',
    )
    contentCheckText: Optional[str] = Field(
        None,
        description='The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.',
    )
    contentCheckUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that the Web Content monitor type must evaluate for the specified conditions.',
    )
    contentCheckXpathFilter: Optional[str] = Field(
        None,
        description='The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    graceSeconds: Optional[int] = Field(
        None,
        description='The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.',
    )
    intervalDays: Optional[conint(ge=0)] = Field(
        None,
        description='The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalHours: Optional[conint(ge=0)] = Field(
        None,
        description='The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalMinutes: Optional[conint(ge=0)] = Field(
        None,
        description='The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalMonths: Optional[conint(ge=0)] = Field(
        None,
        description='The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalSeconds: Optional[conint(ge=0)] = Field(
        None,
        description='The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalYears: Optional[conint(ge=0)] = Field(
        None,
        description='The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    isMonitorPaused: Optional[bool] = Field(
        None,
        description='Indicates that the monitor is paused and will not send alerts.',
    )
    monitorName: constr(max_length=255) = Field(
        ..., description='The name of the monitor. Max 255 characters.'
    )
    monitorNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    monitorTypeCode: str = Field(..., description='The type of the monitor.')
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    publicDescription: Optional[constr(max_length=10000)] = Field(
        None,
        description='A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.',
    )
    startMonitorAt: Optional[datetime] = Field(
        None,
        description='When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.',
    )
    timezoneCode: str = Field(
        ...,
        description='The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.',
    )
    webResponseSecondsLimit: Optional[conint(ge=0)] = Field(
        None,
        description='The time in seconds that the Web Response monitor type must allow for the web page to respond.',
    )
    webResponseUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that the Web Response monitor type must evaluate for the specified conditions.',
    )


class MonitorPut(BaseModel):
    alertPayloadExtended: Optional[constr(max_length=2100000)] = Field(
        None,
        description='Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.',
    )
    alertPayloadShort: Optional[constr(max_length=100)] = Field(
        None,
        description='Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.',
    )
    alertServices: Optional[List[str]] = Field(
        None, description='The alert services that are related to this resource.'
    )
    allowUnauthenticatedPings: Optional[bool] = Field(
        None,
        description='Indicates that the monitor will accept pings that are not OAuth authenticated.',
    )
    contentCheckMustNotExist: Optional[bool] = Field(
        None,
        description='Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.',
    )
    contentCheckText: Optional[str] = Field(
        None,
        description='The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.',
    )
    contentCheckUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that the Web Content monitor type must evaluate for the specified conditions.',
    )
    contentCheckXpathFilter: Optional[str] = Field(
        None,
        description='The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    graceSeconds: Optional[int] = Field(
        None,
        description='The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.',
    )
    intervalDays: Optional[conint(ge=0)] = Field(
        None,
        description='The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalHours: Optional[conint(ge=0)] = Field(
        None,
        description='The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalMinutes: Optional[conint(ge=0)] = Field(
        None,
        description='The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalMonths: Optional[conint(ge=0)] = Field(
        None,
        description='The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalSeconds: Optional[conint(ge=0)] = Field(
        None,
        description='The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalYears: Optional[conint(ge=0)] = Field(
        None,
        description='The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    isMonitorPaused: Optional[bool] = Field(
        None,
        description='Indicates that the monitor is paused and will not send alerts.',
    )
    monitorName: constr(max_length=255) = Field(
        ..., description='The name of the monitor. Max 255 characters.'
    )
    monitorNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    publicDescription: Optional[constr(max_length=10000)] = Field(
        None,
        description='A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.',
    )
    startMonitorAt: Optional[datetime] = Field(
        None,
        description='When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.',
    )
    timezoneCode: str = Field(
        ...,
        description='The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.',
    )
    webResponseSecondsLimit: Optional[conint(ge=0)] = Field(
        None,
        description='The time in seconds that the Web Response monitor type must allow for the web page to respond.',
    )
    webResponseUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that the Web Response monitor type must evaluate for the specified conditions.',
    )


class FieldContext7(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class MonitorJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext7]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    alertPayloadExtended: Optional[constr(max_length=2100000)] = Field(
        None,
        description='Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.',
    )
    alertPayloadShort: Optional[constr(max_length=100)] = Field(
        None,
        description='Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.',
    )
    alertServices: Optional[List[str]] = Field(
        None, description='The alert services that are related to this resource.'
    )
    allowUnauthenticatedPings: Optional[bool] = Field(
        None,
        description='Indicates that the monitor will accept pings that are not OAuth authenticated.',
    )
    contentCheckMustNotExist: Optional[bool] = Field(
        None,
        description='Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.',
    )
    contentCheckText: Optional[str] = Field(
        None,
        description='The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.',
    )
    contentCheckUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that the Web Content monitor type must evaluate for the specified conditions.',
    )
    contentCheckXpathFilter: Optional[str] = Field(
        None,
        description='The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.',
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    graceSeconds: Optional[int] = Field(
        None,
        description='The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.',
    )
    humanizedInterval: Optional[str] = Field(
        None,
        description='The expected ping / run interval of this monitor in human readable form.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    internalMonitorName: Optional[str] = Field(
        None,
        description='The internal name of the monitor. This name is used in alerts when you use the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. The monitorName field is used when you use your own alert services.',
    )
    intervalDays: Optional[conint(ge=0)] = Field(
        None,
        description='The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalHours: Optional[conint(ge=0)] = Field(
        None,
        description='The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalMinutes: Optional[conint(ge=0)] = Field(
        None,
        description='The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalMonths: Optional[conint(ge=0)] = Field(
        None,
        description='The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalSeconds: Optional[conint(ge=0)] = Field(
        None,
        description='The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalYears: Optional[conint(ge=0)] = Field(
        None,
        description='The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    isMonitorPaused: Optional[bool] = Field(
        None,
        description='Indicates that the monitor is paused and will not send alerts.',
    )
    lastPingAt: Optional[datetime] = Field(
        None,
        description='When the last ping was received. This date-time is in the UTC timezone.',
    )
    monitorName: constr(max_length=255) = Field(
        ..., description='The name of the monitor. Max 255 characters.'
    )
    monitorNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    monitorStatusCode: Optional[str] = Field(
        None, description='The status of the monitor.'
    )
    monitorTypeCode: str = Field(..., description='The type of the monitor.')
    nextPingAt: Optional[datetime] = Field(
        None,
        description='When the next ping is expected. This date-time is in the UTC timezone.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pingSecret: Optional[str] = Field(
        None,
        description='A secret key that can be sent in the X_PING_SECRET HTTP request header of a ping for additional security. Sending the secret is recommended for unauthenticated ping requests. It is redundant for OAuth authenticated ping requests that have the "Authorization: Bearer" header.',
    )
    publicDescription: Optional[constr(max_length=10000)] = Field(
        None,
        description='A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    startMonitorAt: Optional[datetime] = Field(
        None,
        description='When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.',
    )
    startMonitorAtUtc: Optional[datetime] = Field(
        None, description='The startMonitorAt date-time in the UTC timezone.'
    )
    systemMessages: Optional[List[str]] = Field(
        None, description='Service notes regarding the resource.'
    )
    timezoneCode: str = Field(
        ...,
        description='The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.',
    )
    webResponseSecondsLimit: Optional[conint(ge=0)] = Field(
        None,
        description='The time in seconds that the Web Response monitor type must allow for the web page to respond.',
    )
    webResponseUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that the Web Response monitor type must evaluate for the specified conditions.',
    )


class MonitorJsonldPost(BaseModel):
    alertPayloadExtended: Optional[constr(max_length=2100000)] = Field(
        None,
        description='Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.',
    )
    alertPayloadShort: Optional[constr(max_length=100)] = Field(
        None,
        description='Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.',
    )
    alertServices: Optional[List[str]] = Field(
        None, description='The alert services that are related to this resource.'
    )
    allowUnauthenticatedPings: Optional[bool] = Field(
        None,
        description='Indicates that the monitor will accept pings that are not OAuth authenticated.',
    )
    contentCheckMustNotExist: Optional[bool] = Field(
        None,
        description='Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.',
    )
    contentCheckText: Optional[str] = Field(
        None,
        description='The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.',
    )
    contentCheckUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that the Web Content monitor type must evaluate for the specified conditions.',
    )
    contentCheckXpathFilter: Optional[str] = Field(
        None,
        description='The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    graceSeconds: Optional[int] = Field(
        None,
        description='The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.',
    )
    intervalDays: Optional[conint(ge=0)] = Field(
        None,
        description='The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalHours: Optional[conint(ge=0)] = Field(
        None,
        description='The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalMinutes: Optional[conint(ge=0)] = Field(
        None,
        description='The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalMonths: Optional[conint(ge=0)] = Field(
        None,
        description='The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalSeconds: Optional[conint(ge=0)] = Field(
        None,
        description='The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalYears: Optional[conint(ge=0)] = Field(
        None,
        description='The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    isMonitorPaused: Optional[bool] = Field(
        None,
        description='Indicates that the monitor is paused and will not send alerts.',
    )
    monitorName: constr(max_length=255) = Field(
        ..., description='The name of the monitor. Max 255 characters.'
    )
    monitorNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    monitorTypeCode: str = Field(..., description='The type of the monitor.')
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    publicDescription: Optional[constr(max_length=10000)] = Field(
        None,
        description='A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.',
    )
    startMonitorAt: Optional[datetime] = Field(
        None,
        description='When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.',
    )
    timezoneCode: str = Field(
        ...,
        description='The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.',
    )
    webResponseSecondsLimit: Optional[conint(ge=0)] = Field(
        None,
        description='The time in seconds that the Web Response monitor type must allow for the web page to respond.',
    )
    webResponseUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that the Web Response monitor type must evaluate for the specified conditions.',
    )


class MonitorJsonldPut(BaseModel):
    alertPayloadExtended: Optional[constr(max_length=2100000)] = Field(
        None,
        description='Payload that must be sent in the body of each alert when you use your own email or webhook alert services. This is the body for email alerts and the request body for webhook alerts. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 2 MB characters.',
    )
    alertPayloadShort: Optional[constr(max_length=100)] = Field(
        None,
        description='Payload that must be sent in the body of each alert when you use your own short message alert services. This also serves as the subject for email alerts. Not used for webhooks. This text is not sent when using the built-in alert services. Sending user-supplied text via our own email server is too big a risk to our email reputation. Max 100 characters.',
    )
    alertServices: Optional[List[str]] = Field(
        None, description='The alert services that are related to this resource.'
    )
    allowUnauthenticatedPings: Optional[bool] = Field(
        None,
        description='Indicates that the monitor will accept pings that are not OAuth authenticated.',
    )
    contentCheckMustNotExist: Optional[bool] = Field(
        None,
        description='Indicates that the Web Content monitor must verify the absence of the text or the Xpath node, and dispatch an alert if it is present. The default behavior is to verify the presence of the text or the Xpath node, and dispatch an alert if it is absent.',
    )
    contentCheckText: Optional[str] = Field(
        None,
        description='The text (case-insensitive) that must or must not be present at the contentCheckUrl. If contentCheckXpathFilter is supplied, then the only the text within that nodes is evaluated, otherwise text on the entire web page is evaluated.',
    )
    contentCheckUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that the Web Content monitor type must evaluate for the specified conditions.',
    )
    contentCheckXpathFilter: Optional[str] = Field(
        None,
        description='The Xpath filter (<a href="https://en.wikipedia.org/wiki/XPath">Xpath</a>, <a href="https://devhints.io/xpath">Xpath Cheatsheet</a>) that selects a specific node in the HTML of the target web page. If contentCheckText is supplied, then only the text within the selected node is evaluated. If contentCheckText is left empty, then the presence or the absence of the selected node is evaluated.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    graceSeconds: Optional[int] = Field(
        None,
        description='The number of grace seconds after expiry of the time when the next ping was expected, before raising an alert. The number of grace seconds to allow before classifying a Measured Monitor task duration as an anomaly.',
    )
    intervalDays: Optional[conint(ge=0)] = Field(
        None,
        description='The number of days in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalHours: Optional[conint(ge=0)] = Field(
        None,
        description='The number of hours in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalMinutes: Optional[conint(ge=0)] = Field(
        None,
        description='The number of minutes in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalMonths: Optional[conint(ge=0)] = Field(
        None,
        description='The number of months in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalSeconds: Optional[conint(ge=0)] = Field(
        None,
        description='The number of seconds in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    intervalYears: Optional[conint(ge=0)] = Field(
        None,
        description='The number of years in the expected ping / run / measured / scheduled interval. Can be left blank. Can be specified together with any combination of the other interval fields.',
    )
    isMonitorPaused: Optional[bool] = Field(
        None,
        description='Indicates that the monitor is paused and will not send alerts.',
    )
    monitorName: constr(max_length=255) = Field(
        ..., description='The name of the monitor. Max 255 characters.'
    )
    monitorNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the monitor. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    publicDescription: Optional[constr(max_length=10000)] = Field(
        None,
        description='A text description of the monitor that is accessible to unauthenticated users that receive an alert from the monitor. Formatting using Markdown is allowed. HTML will be removed.',
    )
    startMonitorAt: Optional[datetime] = Field(
        None,
        description='When to start the Regular Interval type monitor or Heartbeat type monitor, or when to send the first alert of the Scheduled Repeatable Alert monitor. Cannot be blank for a Regular Interval, Heartbeat, or Scheduled Repeatable Alert type monitor, must be blank for other monitors types. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored.',
    )
    timezoneCode: str = Field(
        ...,
        description='The timezone of the monitor. Dates and times in alerts and reports will be in this time zone.',
    )
    webResponseSecondsLimit: Optional[conint(ge=0)] = Field(
        None,
        description='The time in seconds that the Web Response monitor type must allow for the web page to respond.',
    )
    webResponseUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL that the Web Response monitor type must evaluate for the specified conditions.',
    )


class MonitorStatusCodeGet(BaseModel):
    codeDescription: Optional[str] = None
    id: Optional[str] = None


class FieldContext8(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class MonitorStatusCodeJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext8]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    codeDescription: Optional[str] = None
    id: Optional[str] = None


class MonitorStatusLogGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[str] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    monitor: Optional[str] = Field(
        None, description='The monitor that is related to this resource instance.'
    )
    monitorStatusCode: Optional[str] = Field(
        None, description='The status of the monitor.'
    )
    partition: Optional[str] = Field(
        None,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    ping: Optional[str] = Field(
        None, description='The ping that triggered this resource instance.'
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )


class FieldContext9(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class MonitorStatusLogJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext9]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[str] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    monitor: Optional[str] = Field(
        None, description='The monitor that is related to this resource instance.'
    )
    monitorStatusCode: Optional[str] = Field(
        None, description='The status of the monitor.'
    )
    partition: Optional[str] = Field(
        None,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    ping: Optional[str] = Field(
        None, description='The ping that triggered this resource instance.'
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )


class MonitorTypeCodeGet(BaseModel):
    codeDescription: Optional[str] = None
    codeDescriptionExpanded: Optional[str] = None
    id: Optional[str] = None


class FieldContext10(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class MonitorTypeCodeJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext10]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    codeDescription: Optional[str] = None
    codeDescriptionExpanded: Optional[str] = None
    id: Optional[str] = None


class PartitionGet(BaseModel):
    alertServices: Optional[List[str]] = Field(
        None, description='The alert services that are related to this resource.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    monitors: Optional[List[str]] = Field(
        None, description='The monitors that are associated with this partition.'
    )
    partitionName: constr(max_length=255) = Field(
        ..., description='The name of the partition. Max 255 characters.'
    )
    partitionNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    teamInvitations: Optional[List[str]] = Field(
        None, description='The team invitations that are related to this resource.'
    )
    teamMembers: Optional[List[str]] = Field(
        None, description='The team members of this resource.'
    )


class PartitionPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partitionName: constr(max_length=255) = Field(
        ..., description='The name of the partition. Max 255 characters.'
    )
    partitionNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )


class PartitionPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partitionName: constr(max_length=255) = Field(
        ..., description='The name of the partition. Max 255 characters.'
    )
    partitionNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )


class FieldContext11(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class PartitionJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext11]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    alertServices: Optional[List[str]] = Field(
        None, description='The alert services that are related to this resource.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    monitors: Optional[List[str]] = Field(
        None, description='The monitors that are associated with this partition.'
    )
    partitionName: constr(max_length=255) = Field(
        ..., description='The name of the partition. Max 255 characters.'
    )
    partitionNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    teamInvitations: Optional[List[str]] = Field(
        None, description='The team invitations that are related to this resource.'
    )
    teamMembers: Optional[List[str]] = Field(
        None, description='The team members of this resource.'
    )


class PartitionJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partitionName: constr(max_length=255) = Field(
        ..., description='The name of the partition. Max 255 characters.'
    )
    partitionNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )


class PartitionJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partitionName: constr(max_length=255) = Field(
        ..., description='The name of the partition. Max 255 characters.'
    )
    partitionNotes: Optional[constr(max_length=10000)] = Field(
        None,
        description='Notes about the partition. Max 10,000 characters. Formatting using Markdown is allowed. HTML will be removed.',
    )


class PingGet(BaseModel):
    alertLogs: Optional[List[str]] = Field(
        None, description='The alert logs that are related to this resource instance.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[str] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    expectNextPingAt: Optional[datetime] = Field(
        None,
        description='When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.',
    )
    expectNextPingAtEpoch: Optional[int] = Field(
        None,
        description='When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    ipAddress: Optional[str] = Field(
        None, description='The IP address where this resource originated.'
    )
    monitor: str = Field(
        ..., description='The monitor that is related to this resource instance.'
    )
    monitorStatusLog: Optional[str] = Field(
        None, description='The monitor status that resulted from the ping.'
    )
    partition: Optional[str] = Field(
        None,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pingCustomCode: Optional[str] = Field(
        None,
        description='The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.',
    )
    pingCustomPayload: Optional[str] = Field(
        None,
        description="The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.",
    )
    pingMethodCode: Optional[str] = Field(None, description='The method of the ping.')
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )


class PingPost(BaseModel):
    expectNextPingAt: Optional[datetime] = Field(
        None,
        description='When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.',
    )
    expectNextPingAtEpoch: Optional[int] = Field(
        None,
        description='When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.',
    )
    monitor: str = Field(
        ..., description='The monitor that is related to this resource instance.'
    )
    pingCustomCode: Optional[str] = Field(
        None,
        description='The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.',
    )
    pingCustomPayload: Optional[str] = Field(
        None,
        description="The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.",
    )


class FieldContext12(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class PingJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext12]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    alertLogs: Optional[List[str]] = Field(
        None, description='The alert logs that are related to this resource instance.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[str] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    expectNextPingAt: Optional[datetime] = Field(
        None,
        description='When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.',
    )
    expectNextPingAtEpoch: Optional[int] = Field(
        None,
        description='When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    ipAddress: Optional[str] = Field(
        None, description='The IP address where this resource originated.'
    )
    monitor: str = Field(
        ..., description='The monitor that is related to this resource instance.'
    )
    monitorStatusLog: Optional[str] = Field(
        None, description='The monitor status that resulted from the ping.'
    )
    partition: Optional[str] = Field(
        None,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pingCustomCode: Optional[str] = Field(
        None,
        description='The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.',
    )
    pingCustomPayload: Optional[str] = Field(
        None,
        description="The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.",
    )
    pingMethodCode: Optional[str] = Field(None, description='The method of the ping.')
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )


class PingJsonldPost(BaseModel):
    expectNextPingAt: Optional[datetime] = Field(
        None,
        description='When to expect the next ping for a Last Ping monitor type. This date-time is always interpreted to be in the timezone of the monitor. Any UTC offset is ignored. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.',
    )
    expectNextPingAtEpoch: Optional[int] = Field(
        None,
        description='When to expect the next ping for a Last Ping monitor type, expressed in epoch timestamp format. Supply either "expectNextPingAt", or "expectNextPingAtEpoch", or a X_NEXT_PING request header, not more than one of those options. Must be blank for other monitor types.',
    )
    monitor: str = Field(
        ..., description='The monitor that is related to this resource instance.'
    )
    pingCustomCode: Optional[str] = Field(
        None,
        description='The client-supplied custom code that is appended to the ping. Only the first 10 characters are used and saved.',
    )
    pingCustomPayload: Optional[str] = Field(
        None,
        description="The client-supplied custom payload that is saved with the ping. Only the first 100 characters are saved. This value overrides the value of an monitor's alert payload, if the ping results in an alert.",
    )


class PingMethodCodeGet(BaseModel):
    codeName: Optional[str] = None
    id: Optional[str] = None


class FieldContext13(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class PingMethodCodeJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext13]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    codeName: Optional[str] = None
    id: Optional[str] = None


class TeamInvitationGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    inviteeEmail: EmailStr = Field(
        ..., description='The email address of the person that is being invited.'
    )
    inviteeFirstName: str = Field(
        ..., description='The first name of the person that is being invited.'
    )
    inviteeLastName: str = Field(
        ..., description='The last name of the person that is being invited.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    statusAt: Optional[datetime] = Field(
        None,
        description='When the current status too effect. This date-time is in the UTC timezone. ',
    )
    teamInvitationStatus: Optional[str] = Field(
        None, description='The current status of the invitation.'
    )
    teamMemberRoleCode: Optional[str] = Field(
        None, description='The role of the team member on the team.'
    )


class TeamInvitationPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    inviteeEmail: EmailStr = Field(
        ..., description='The email address of the person that is being invited.'
    )
    inviteeFirstName: str = Field(
        ..., description='The first name of the person that is being invited.'
    )
    inviteeLastName: str = Field(
        ..., description='The last name of the person that is being invited.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    teamMemberRoleCode: Optional[str] = Field(
        None, description='The role of the team member on the team.'
    )


class FieldContext14(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TeamInvitationJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext14]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    inviteeEmail: EmailStr = Field(
        ..., description='The email address of the person that is being invited.'
    )
    inviteeFirstName: str = Field(
        ..., description='The first name of the person that is being invited.'
    )
    inviteeLastName: str = Field(
        ..., description='The last name of the person that is being invited.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    statusAt: Optional[datetime] = Field(
        None,
        description='When the current status too effect. This date-time is in the UTC timezone. ',
    )
    teamInvitationStatus: Optional[str] = Field(
        None, description='The current status of the invitation.'
    )
    teamMemberRoleCode: Optional[str] = Field(
        None, description='The role of the team member on the team.'
    )


class TeamInvitationJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    inviteeEmail: EmailStr = Field(
        ..., description='The email address of the person that is being invited.'
    )
    inviteeFirstName: str = Field(
        ..., description='The first name of the person that is being invited.'
    )
    inviteeLastName: str = Field(
        ..., description='The last name of the person that is being invited.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    teamMemberRoleCode: Optional[str] = Field(
        None, description='The role of the team member on the team.'
    )


class TeamMemberGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: Optional[str] = Field(
        None,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    teamMemberRoleCode: str = Field(
        ..., description='The role of the team member on the team.'
    )
    userAccount: Optional[str] = Field(
        None, description='The user account that is related to this resource.'
    )


class TeamMemberPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    teamMemberRoleCode: str = Field(
        ..., description='The role of the team member on the team.'
    )


class FieldContext15(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TeamMemberJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext15]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: Optional[str] = Field(
        None,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    teamMemberRoleCode: str = Field(
        ..., description='The role of the team member on the team.'
    )
    userAccount: Optional[str] = Field(
        None, description='The user account that is related to this resource.'
    )


class TeamMemberJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    teamMemberRoleCode: str = Field(
        ..., description='The role of the team member on the team.'
    )


class TeamMemberRoleCodeGet(BaseModel):
    codeDescription: Optional[str] = None
    id: Optional[str] = None


class FieldContext16(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TeamMemberRoleCodeJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext16]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    codeDescription: Optional[str] = None
    id: Optional[str] = None


class TimezoneCodeGet(BaseModel):
    codeName: Optional[str] = Field(None, description='The name of the code.')
    id: Optional[str] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    offsetFromUtc: Optional[float] = Field(
        None, description='The numeric offset from the UTC timezone.'
    )
    timezoneDateString: Optional[str] = Field(
        None,
        description='The text offset from the UTC timezone that forms part of the ISO 8601 date time format.',
    )


class FieldContext17(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TimezoneCodeJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext17]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    codeName: Optional[str] = Field(None, description='The name of the code.')
    id: Optional[str] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    offsetFromUtc: Optional[float] = Field(
        None, description='The numeric offset from the UTC timezone.'
    )
    timezoneDateString: Optional[str] = Field(
        None,
        description='The text offset from the UTC timezone that forms part of the ISO 8601 date time format.',
    )


class TransportAlertaGet(BaseModel):
    alertaApiKey: constr(max_length=1000) = Field(
        ..., description='The API key for the Alerta service.'
    )
    alertaCorrelate: Optional[constr(max_length=255)] = Field(
        None,
        description='The comma-separated list of related event names for the Alerta service.',
    )
    alertaEnvironment: Optional[constr(max_length=255)] = Field(
        None, description='The environment value for the Alerta service.'
    )
    alertaEvent: constr(max_length=255) = Field(
        ..., description='The event value for the Alerta service.'
    )
    alertaGroup: Optional[constr(max_length=255)] = Field(
        None, description='The group value for the Alerta service.'
    )
    alertaHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Alerta service (omit the "https://" part).',
    )
    alertaOrigin: Optional[constr(max_length=255)] = Field(
        None, description='The origin value for the Alerta service.'
    )
    alertaResource: constr(max_length=255) = Field(
        ..., description='The resource value for the Alerta service.'
    )
    alertaService: Optional[constr(max_length=255)] = Field(
        None,
        description='The comma-separated list of affected services for the Alerta service.',
    )
    alertaSeverity: Optional[constr(max_length=255)] = Field(
        None, description='The severity value for the Alerta service.'
    )
    alertaStatus: Optional[constr(max_length=255)] = Field(
        None, description='The status value for the Alerta service.'
    )
    alertaTags: Optional[constr(max_length=255)] = Field(
        None, description='The comma-separated list of tags for the Alerta service.'
    )
    alertaType: Optional[constr(max_length=255)] = Field(
        None, description='The type value for the Alerta service.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAlertaPost(BaseModel):
    alertaApiKey: constr(max_length=1000) = Field(
        ..., description='The API key for the Alerta service.'
    )
    alertaCorrelate: Optional[constr(max_length=255)] = Field(
        None,
        description='The comma-separated list of related event names for the Alerta service.',
    )
    alertaEnvironment: Optional[constr(max_length=255)] = Field(
        None, description='The environment value for the Alerta service.'
    )
    alertaEvent: constr(max_length=255) = Field(
        ..., description='The event value for the Alerta service.'
    )
    alertaGroup: Optional[constr(max_length=255)] = Field(
        None, description='The group value for the Alerta service.'
    )
    alertaHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Alerta service (omit the "https://" part).',
    )
    alertaOrigin: Optional[constr(max_length=255)] = Field(
        None, description='The origin value for the Alerta service.'
    )
    alertaResource: constr(max_length=255) = Field(
        ..., description='The resource value for the Alerta service.'
    )
    alertaService: Optional[constr(max_length=255)] = Field(
        None,
        description='The comma-separated list of affected services for the Alerta service.',
    )
    alertaSeverity: Optional[constr(max_length=255)] = Field(
        None, description='The severity value for the Alerta service.'
    )
    alertaStatus: Optional[constr(max_length=255)] = Field(
        None, description='The status value for the Alerta service.'
    )
    alertaTags: Optional[constr(max_length=255)] = Field(
        None, description='The comma-separated list of tags for the Alerta service.'
    )
    alertaType: Optional[constr(max_length=255)] = Field(
        None, description='The type value for the Alerta service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAlertaPut(BaseModel):
    alertaApiKey: constr(max_length=1000) = Field(
        ..., description='The API key for the Alerta service.'
    )
    alertaCorrelate: Optional[constr(max_length=255)] = Field(
        None,
        description='The comma-separated list of related event names for the Alerta service.',
    )
    alertaEnvironment: Optional[constr(max_length=255)] = Field(
        None, description='The environment value for the Alerta service.'
    )
    alertaEvent: constr(max_length=255) = Field(
        ..., description='The event value for the Alerta service.'
    )
    alertaGroup: Optional[constr(max_length=255)] = Field(
        None, description='The group value for the Alerta service.'
    )
    alertaHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Alerta service (omit the "https://" part).',
    )
    alertaOrigin: Optional[constr(max_length=255)] = Field(
        None, description='The origin value for the Alerta service.'
    )
    alertaResource: constr(max_length=255) = Field(
        ..., description='The resource value for the Alerta service.'
    )
    alertaService: Optional[constr(max_length=255)] = Field(
        None,
        description='The comma-separated list of affected services for the Alerta service.',
    )
    alertaSeverity: Optional[constr(max_length=255)] = Field(
        None, description='The severity value for the Alerta service.'
    )
    alertaStatus: Optional[constr(max_length=255)] = Field(
        None, description='The status value for the Alerta service.'
    )
    alertaTags: Optional[constr(max_length=255)] = Field(
        None, description='The comma-separated list of tags for the Alerta service.'
    )
    alertaType: Optional[constr(max_length=255)] = Field(
        None, description='The type value for the Alerta service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext18(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportAlertaJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext18]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    alertaApiKey: constr(max_length=1000) = Field(
        ..., description='The API key for the Alerta service.'
    )
    alertaCorrelate: Optional[constr(max_length=255)] = Field(
        None,
        description='The comma-separated list of related event names for the Alerta service.',
    )
    alertaEnvironment: Optional[constr(max_length=255)] = Field(
        None, description='The environment value for the Alerta service.'
    )
    alertaEvent: constr(max_length=255) = Field(
        ..., description='The event value for the Alerta service.'
    )
    alertaGroup: Optional[constr(max_length=255)] = Field(
        None, description='The group value for the Alerta service.'
    )
    alertaHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Alerta service (omit the "https://" part).',
    )
    alertaOrigin: Optional[constr(max_length=255)] = Field(
        None, description='The origin value for the Alerta service.'
    )
    alertaResource: constr(max_length=255) = Field(
        ..., description='The resource value for the Alerta service.'
    )
    alertaService: Optional[constr(max_length=255)] = Field(
        None,
        description='The comma-separated list of affected services for the Alerta service.',
    )
    alertaSeverity: Optional[constr(max_length=255)] = Field(
        None, description='The severity value for the Alerta service.'
    )
    alertaStatus: Optional[constr(max_length=255)] = Field(
        None, description='The status value for the Alerta service.'
    )
    alertaTags: Optional[constr(max_length=255)] = Field(
        None, description='The comma-separated list of tags for the Alerta service.'
    )
    alertaType: Optional[constr(max_length=255)] = Field(
        None, description='The type value for the Alerta service.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAlertaJsonldPost(BaseModel):
    alertaApiKey: constr(max_length=1000) = Field(
        ..., description='The API key for the Alerta service.'
    )
    alertaCorrelate: Optional[constr(max_length=255)] = Field(
        None,
        description='The comma-separated list of related event names for the Alerta service.',
    )
    alertaEnvironment: Optional[constr(max_length=255)] = Field(
        None, description='The environment value for the Alerta service.'
    )
    alertaEvent: constr(max_length=255) = Field(
        ..., description='The event value for the Alerta service.'
    )
    alertaGroup: Optional[constr(max_length=255)] = Field(
        None, description='The group value for the Alerta service.'
    )
    alertaHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Alerta service (omit the "https://" part).',
    )
    alertaOrigin: Optional[constr(max_length=255)] = Field(
        None, description='The origin value for the Alerta service.'
    )
    alertaResource: constr(max_length=255) = Field(
        ..., description='The resource value for the Alerta service.'
    )
    alertaService: Optional[constr(max_length=255)] = Field(
        None,
        description='The comma-separated list of affected services for the Alerta service.',
    )
    alertaSeverity: Optional[constr(max_length=255)] = Field(
        None, description='The severity value for the Alerta service.'
    )
    alertaStatus: Optional[constr(max_length=255)] = Field(
        None, description='The status value for the Alerta service.'
    )
    alertaTags: Optional[constr(max_length=255)] = Field(
        None, description='The comma-separated list of tags for the Alerta service.'
    )
    alertaType: Optional[constr(max_length=255)] = Field(
        None, description='The type value for the Alerta service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAlertaJsonldPut(BaseModel):
    alertaApiKey: constr(max_length=1000) = Field(
        ..., description='The API key for the Alerta service.'
    )
    alertaCorrelate: Optional[constr(max_length=255)] = Field(
        None,
        description='The comma-separated list of related event names for the Alerta service.',
    )
    alertaEnvironment: Optional[constr(max_length=255)] = Field(
        None, description='The environment value for the Alerta service.'
    )
    alertaEvent: constr(max_length=255) = Field(
        ..., description='The event value for the Alerta service.'
    )
    alertaGroup: Optional[constr(max_length=255)] = Field(
        None, description='The group value for the Alerta service.'
    )
    alertaHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Alerta service (omit the "https://" part).',
    )
    alertaOrigin: Optional[constr(max_length=255)] = Field(
        None, description='The origin value for the Alerta service.'
    )
    alertaResource: constr(max_length=255) = Field(
        ..., description='The resource value for the Alerta service.'
    )
    alertaService: Optional[constr(max_length=255)] = Field(
        None,
        description='The comma-separated list of affected services for the Alerta service.',
    )
    alertaSeverity: Optional[constr(max_length=255)] = Field(
        None, description='The severity value for the Alerta service.'
    )
    alertaStatus: Optional[constr(max_length=255)] = Field(
        None, description='The status value for the Alerta service.'
    )
    alertaTags: Optional[constr(max_length=255)] = Field(
        None, description='The comma-separated list of tags for the Alerta service.'
    )
    alertaType: Optional[constr(max_length=255)] = Field(
        None, description='The type value for the Alerta service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAllMySmsGet(BaseModel):
    allMySmsApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Allmysms service. Stored in encrypted format.',
    )
    allMySmsFrom: Optional[constr(max_length=255)] = Field(
        None, description='The sender value (default 36180) for the Allmysms service.'
    )
    allMySmsLogin: constr(max_length=255) = Field(
        ..., description='The login credential for the Allmysms service.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAllMySmsPost(BaseModel):
    allMySmsApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Allmysms service. Stored in encrypted format.',
    )
    allMySmsFrom: Optional[constr(max_length=255)] = Field(
        None, description='The sender value (default 36180) for the Allmysms service.'
    )
    allMySmsLogin: constr(max_length=255) = Field(
        ..., description='The login credential for the Allmysms service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAllMySmsPut(BaseModel):
    allMySmsApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Allmysms service. Stored in encrypted format.',
    )
    allMySmsFrom: Optional[constr(max_length=255)] = Field(
        None, description='The sender value (default 36180) for the Allmysms service.'
    )
    allMySmsLogin: constr(max_length=255) = Field(
        ..., description='The login credential for the Allmysms service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext19(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportAllMySmsJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext19]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    allMySmsApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Allmysms service. Stored in encrypted format.',
    )
    allMySmsFrom: Optional[constr(max_length=255)] = Field(
        None, description='The sender value (default 36180) for the Allmysms service.'
    )
    allMySmsLogin: constr(max_length=255) = Field(
        ..., description='The login credential for the Allmysms service.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAllMySmsJsonldPost(BaseModel):
    allMySmsApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Allmysms service. Stored in encrypted format.',
    )
    allMySmsFrom: Optional[constr(max_length=255)] = Field(
        None, description='The sender value (default 36180) for the Allmysms service.'
    )
    allMySmsLogin: constr(max_length=255) = Field(
        ..., description='The login credential for the Allmysms service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAllMySmsJsonldPut(BaseModel):
    allMySmsApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Allmysms service. Stored in encrypted format.',
    )
    allMySmsFrom: Optional[constr(max_length=255)] = Field(
        None, description='The sender value (default 36180) for the Allmysms service.'
    )
    allMySmsLogin: constr(max_length=255) = Field(
        ..., description='The login credential for the Allmysms service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAmazonSnsGet(BaseModel):
    amazonSnsAccessKey: constr(max_length=255) = Field(
        ..., description='The access key for the Amazon SNS service.'
    )
    amazonSnsRegion: constr(max_length=255) = Field(
        ..., description='The region for the Amazon SNS service.'
    )
    amazonSnsSecretKey: constr(max_length=1000) = Field(
        ...,
        description='The secret key for the Amazon SNS service. Stored in encrypted format.',
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAmazonSnsPost(BaseModel):
    amazonSnsAccessKey: constr(max_length=255) = Field(
        ..., description='The access key for the Amazon SNS service.'
    )
    amazonSnsRegion: constr(max_length=255) = Field(
        ..., description='The region for the Amazon SNS service.'
    )
    amazonSnsSecretKey: constr(max_length=1000) = Field(
        ...,
        description='The secret key for the Amazon SNS service. Stored in encrypted format.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAmazonSnsPut(BaseModel):
    amazonSnsAccessKey: constr(max_length=255) = Field(
        ..., description='The access key for the Amazon SNS service.'
    )
    amazonSnsRegion: constr(max_length=255) = Field(
        ..., description='The region for the Amazon SNS service.'
    )
    amazonSnsSecretKey: constr(max_length=1000) = Field(
        ...,
        description='The secret key for the Amazon SNS service. Stored in encrypted format.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext20(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportAmazonSnsJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext20]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    amazonSnsAccessKey: constr(max_length=255) = Field(
        ..., description='The access key for the Amazon SNS service.'
    )
    amazonSnsRegion: constr(max_length=255) = Field(
        ..., description='The region for the Amazon SNS service.'
    )
    amazonSnsSecretKey: constr(max_length=1000) = Field(
        ...,
        description='The secret key for the Amazon SNS service. Stored in encrypted format.',
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAmazonSnsJsonldPost(BaseModel):
    amazonSnsAccessKey: constr(max_length=255) = Field(
        ..., description='The access key for the Amazon SNS service.'
    )
    amazonSnsRegion: constr(max_length=255) = Field(
        ..., description='The region for the Amazon SNS service.'
    )
    amazonSnsSecretKey: constr(max_length=1000) = Field(
        ...,
        description='The secret key for the Amazon SNS service. Stored in encrypted format.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportAmazonSnsJsonldPut(BaseModel):
    amazonSnsAccessKey: constr(max_length=255) = Field(
        ..., description='The access key for the Amazon SNS service.'
    )
    amazonSnsRegion: constr(max_length=255) = Field(
        ..., description='The region for the Amazon SNS service.'
    )
    amazonSnsSecretKey: constr(max_length=1000) = Field(
        ...,
        description='The secret key for the Amazon SNS service. Stored in encrypted format.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportBandwidthGet(BaseModel):
    bandwidthAccountId: constr(max_length=255) = Field(
        ..., description='The account ID value for the Bandwidth service.'
    )
    bandwidthApplicationId: constr(max_length=255) = Field(
        ..., description='The application ID value for the Bandwidth service.'
    )
    bandwidthFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Bandwidth service.'
    )
    bandwidthPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Bandwidth service. Stored in encrypted format.',
    )
    bandwidthUsername: constr(max_length=255) = Field(
        ..., description='The username for the Bandwidth service.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportBandwidthPost(BaseModel):
    bandwidthAccountId: constr(max_length=255) = Field(
        ..., description='The account ID value for the Bandwidth service.'
    )
    bandwidthApplicationId: constr(max_length=255) = Field(
        ..., description='The application ID value for the Bandwidth service.'
    )
    bandwidthFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Bandwidth service.'
    )
    bandwidthPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Bandwidth service. Stored in encrypted format.',
    )
    bandwidthUsername: constr(max_length=255) = Field(
        ..., description='The username for the Bandwidth service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportBandwidthPut(BaseModel):
    bandwidthAccountId: constr(max_length=255) = Field(
        ..., description='The account ID value for the Bandwidth service.'
    )
    bandwidthApplicationId: constr(max_length=255) = Field(
        ..., description='The application ID value for the Bandwidth service.'
    )
    bandwidthFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Bandwidth service.'
    )
    bandwidthPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Bandwidth service. Stored in encrypted format.',
    )
    bandwidthUsername: constr(max_length=255) = Field(
        ..., description='The username for the Bandwidth service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext21(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportBandwidthJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext21]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    bandwidthAccountId: constr(max_length=255) = Field(
        ..., description='The account ID value for the Bandwidth service.'
    )
    bandwidthApplicationId: constr(max_length=255) = Field(
        ..., description='The application ID value for the Bandwidth service.'
    )
    bandwidthFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Bandwidth service.'
    )
    bandwidthPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Bandwidth service. Stored in encrypted format.',
    )
    bandwidthUsername: constr(max_length=255) = Field(
        ..., description='The username for the Bandwidth service.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportBandwidthJsonldPost(BaseModel):
    bandwidthAccountId: constr(max_length=255) = Field(
        ..., description='The account ID value for the Bandwidth service.'
    )
    bandwidthApplicationId: constr(max_length=255) = Field(
        ..., description='The application ID value for the Bandwidth service.'
    )
    bandwidthFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Bandwidth service.'
    )
    bandwidthPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Bandwidth service. Stored in encrypted format.',
    )
    bandwidthUsername: constr(max_length=255) = Field(
        ..., description='The username for the Bandwidth service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportBandwidthJsonldPut(BaseModel):
    bandwidthAccountId: constr(max_length=255) = Field(
        ..., description='The account ID value for the Bandwidth service.'
    )
    bandwidthApplicationId: constr(max_length=255) = Field(
        ..., description='The application ID value for the Bandwidth service.'
    )
    bandwidthFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Bandwidth service.'
    )
    bandwidthPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Bandwidth service. Stored in encrypted format.',
    )
    bandwidthUsername: constr(max_length=255) = Field(
        ..., description='The username for the Bandwidth service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportChatworkGet(BaseModel):
    chatworkApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Chatwork service. Stored in encrypted format.',
    )
    chatworkRoomId: constr(max_length=255) = Field(
        ..., description='The room ID for the Chatwork service.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportChatworkPost(BaseModel):
    chatworkApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Chatwork service. Stored in encrypted format.',
    )
    chatworkRoomId: constr(max_length=255) = Field(
        ..., description='The room ID for the Chatwork service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportChatworkPut(BaseModel):
    chatworkApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Chatwork service. Stored in encrypted format.',
    )
    chatworkRoomId: constr(max_length=255) = Field(
        ..., description='The room ID for the Chatwork service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext22(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportChatworkJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext22]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    chatworkApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Chatwork service. Stored in encrypted format.',
    )
    chatworkRoomId: constr(max_length=255) = Field(
        ..., description='The room ID for the Chatwork service.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportChatworkJsonldPost(BaseModel):
    chatworkApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Chatwork service. Stored in encrypted format.',
    )
    chatworkRoomId: constr(max_length=255) = Field(
        ..., description='The room ID for the Chatwork service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportChatworkJsonldPut(BaseModel):
    chatworkApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Chatwork service. Stored in encrypted format.',
    )
    chatworkRoomId: constr(max_length=255) = Field(
        ..., description='The room ID for the Chatwork service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportClickSendGet(BaseModel):
    clickSendApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the ClickSend service. Stored in encrypted format.',
    )
    clickSendApiUsername: constr(max_length=255) = Field(
        ..., description='The API username for the ClickSend service.'
    )
    clickSendFrom: Optional[constr(max_length=255)] = Field(
        None, description='The from value for the ClickSend service.'
    )
    clickSendFromEmail: Optional[EmailStr] = Field(
        None,
        description='The from email value where replies must be emailed for the ClickSend service.',
    )
    clickSendListId: Optional[constr(max_length=255)] = Field(
        None, description='The recipient list ID value for the ClickSend service.'
    )
    clickSendSource: Optional[constr(max_length=255)] = Field(
        None,
        description='The source method of sending value for the ClickSend service.',
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportClickSendPost(BaseModel):
    clickSendApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the ClickSend service. Stored in encrypted format.',
    )
    clickSendApiUsername: constr(max_length=255) = Field(
        ..., description='The API username for the ClickSend service.'
    )
    clickSendFrom: Optional[constr(max_length=255)] = Field(
        None, description='The from value for the ClickSend service.'
    )
    clickSendFromEmail: Optional[EmailStr] = Field(
        None,
        description='The from email value where replies must be emailed for the ClickSend service.',
    )
    clickSendListId: Optional[constr(max_length=255)] = Field(
        None, description='The recipient list ID value for the ClickSend service.'
    )
    clickSendSource: Optional[constr(max_length=255)] = Field(
        None,
        description='The source method of sending value for the ClickSend service.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportClickSendPut(BaseModel):
    clickSendApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the ClickSend service. Stored in encrypted format.',
    )
    clickSendApiUsername: constr(max_length=255) = Field(
        ..., description='The API username for the ClickSend service.'
    )
    clickSendFrom: Optional[constr(max_length=255)] = Field(
        None, description='The from value for the ClickSend service.'
    )
    clickSendFromEmail: Optional[EmailStr] = Field(
        None,
        description='The from email value where replies must be emailed for the ClickSend service.',
    )
    clickSendListId: Optional[constr(max_length=255)] = Field(
        None, description='The recipient list ID value for the ClickSend service.'
    )
    clickSendSource: Optional[constr(max_length=255)] = Field(
        None,
        description='The source method of sending value for the ClickSend service.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext23(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportClickSendJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext23]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    clickSendApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the ClickSend service. Stored in encrypted format.',
    )
    clickSendApiUsername: constr(max_length=255) = Field(
        ..., description='The API username for the ClickSend service.'
    )
    clickSendFrom: Optional[constr(max_length=255)] = Field(
        None, description='The from value for the ClickSend service.'
    )
    clickSendFromEmail: Optional[EmailStr] = Field(
        None,
        description='The from email value where replies must be emailed for the ClickSend service.',
    )
    clickSendListId: Optional[constr(max_length=255)] = Field(
        None, description='The recipient list ID value for the ClickSend service.'
    )
    clickSendSource: Optional[constr(max_length=255)] = Field(
        None,
        description='The source method of sending value for the ClickSend service.',
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportClickSendJsonldPost(BaseModel):
    clickSendApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the ClickSend service. Stored in encrypted format.',
    )
    clickSendApiUsername: constr(max_length=255) = Field(
        ..., description='The API username for the ClickSend service.'
    )
    clickSendFrom: Optional[constr(max_length=255)] = Field(
        None, description='The from value for the ClickSend service.'
    )
    clickSendFromEmail: Optional[EmailStr] = Field(
        None,
        description='The from email value where replies must be emailed for the ClickSend service.',
    )
    clickSendListId: Optional[constr(max_length=255)] = Field(
        None, description='The recipient list ID value for the ClickSend service.'
    )
    clickSendSource: Optional[constr(max_length=255)] = Field(
        None,
        description='The source method of sending value for the ClickSend service.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportClickSendJsonldPut(BaseModel):
    clickSendApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the ClickSend service. Stored in encrypted format.',
    )
    clickSendApiUsername: constr(max_length=255) = Field(
        ..., description='The API username for the ClickSend service.'
    )
    clickSendFrom: Optional[constr(max_length=255)] = Field(
        None, description='The from value for the ClickSend service.'
    )
    clickSendFromEmail: Optional[EmailStr] = Field(
        None,
        description='The from email value where replies must be emailed for the ClickSend service.',
    )
    clickSendListId: Optional[constr(max_length=255)] = Field(
        None, description='The recipient list ID value for the ClickSend service.'
    )
    clickSendSource: Optional[constr(max_length=255)] = Field(
        None,
        description='The source method of sending value for the ClickSend service.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportClickatellGet(BaseModel):
    clickatellAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Clickatell service. Stored in encrypted format.',
    )
    clickatellFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Clickatell service.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportClickatellPost(BaseModel):
    clickatellAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Clickatell service. Stored in encrypted format.',
    )
    clickatellFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Clickatell service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportClickatellPut(BaseModel):
    clickatellAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Clickatell service. Stored in encrypted format.',
    )
    clickatellFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Clickatell service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext24(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportClickatellJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext24]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    clickatellAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Clickatell service. Stored in encrypted format.',
    )
    clickatellFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Clickatell service.'
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportClickatellJsonldPost(BaseModel):
    clickatellAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Clickatell service. Stored in encrypted format.',
    )
    clickatellFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Clickatell service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportClickatellJsonldPut(BaseModel):
    clickatellAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Clickatell service. Stored in encrypted format.',
    )
    clickatellFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Clickatell service.'
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportContactEveryoneGet(BaseModel):
    contactEveryoneCategory: Optional[constr(max_length=255)] = Field(
        None,
        description='The label of the category that will be displayed in the external service event logs of the ContactEveryone service.',
    )
    contactEveryoneDiffusionName: Optional[constr(max_length=255)] = Field(
        None,
        description='The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.',
    )
    contactEveryoneToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Contact Everyone service. Stored in encrypted format.',
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportContactEveryonePost(BaseModel):
    contactEveryoneCategory: Optional[constr(max_length=255)] = Field(
        None,
        description='The label of the category that will be displayed in the external service event logs of the ContactEveryone service.',
    )
    contactEveryoneDiffusionName: Optional[constr(max_length=255)] = Field(
        None,
        description='The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.',
    )
    contactEveryoneToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Contact Everyone service. Stored in encrypted format.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportContactEveryonePut(BaseModel):
    contactEveryoneCategory: Optional[constr(max_length=255)] = Field(
        None,
        description='The label of the category that will be displayed in the external service event logs of the ContactEveryone service.',
    )
    contactEveryoneDiffusionName: Optional[constr(max_length=255)] = Field(
        None,
        description='The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.',
    )
    contactEveryoneToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Contact Everyone service. Stored in encrypted format.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext25(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportContactEveryoneJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext25]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    contactEveryoneCategory: Optional[constr(max_length=255)] = Field(
        None,
        description='The label of the category that will be displayed in the external service event logs of the ContactEveryone service.',
    )
    contactEveryoneDiffusionName: Optional[constr(max_length=255)] = Field(
        None,
        description='The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.',
    )
    contactEveryoneToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Contact Everyone service. Stored in encrypted format.',
    )
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportContactEveryoneJsonldPost(BaseModel):
    contactEveryoneCategory: Optional[constr(max_length=255)] = Field(
        None,
        description='The label of the category that will be displayed in the external service event logs of the ContactEveryone service.',
    )
    contactEveryoneDiffusionName: Optional[constr(max_length=255)] = Field(
        None,
        description='The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.',
    )
    contactEveryoneToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Contact Everyone service. Stored in encrypted format.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportContactEveryoneJsonldPut(BaseModel):
    contactEveryoneCategory: Optional[constr(max_length=255)] = Field(
        None,
        description='The label of the category that will be displayed in the external service event logs of the ContactEveryone service.',
    )
    contactEveryoneDiffusionName: Optional[constr(max_length=255)] = Field(
        None,
        description='The label of the diffusion that will be displayed in the external service event logs of the ContactEveryone service.',
    )
    contactEveryoneToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Contact Everyone service. Stored in encrypted format.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportDiscordGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    discordToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Discord service. Stored in encrypted format.',
    )
    discordWebhookId: constr(max_length=255) = Field(
        ..., description='The webhook ID for the Discord service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportDiscordPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    discordToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Discord service. Stored in encrypted format.',
    )
    discordWebhookId: constr(max_length=255) = Field(
        ..., description='The webhook ID for the Discord service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportDiscordPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    discordToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Discord service. Stored in encrypted format.',
    )
    discordWebhookId: constr(max_length=255) = Field(
        ..., description='The webhook ID for the Discord service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext26(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportDiscordJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext26]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    discordToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Discord service. Stored in encrypted format.',
    )
    discordWebhookId: constr(max_length=255) = Field(
        ..., description='The webhook ID for the Discord service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportDiscordJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    discordToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Discord service. Stored in encrypted format.',
    )
    discordWebhookId: constr(max_length=255) = Field(
        ..., description='The webhook ID for the Discord service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportDiscordJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    discordToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Discord service. Stored in encrypted format.',
    )
    discordWebhookId: constr(max_length=255) = Field(
        ..., description='The webhook ID for the Discord service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEmailGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    emailFromAddress: EmailStr = Field(
        ..., description='The sender email address for the SMTP Email service.'
    )
    emailFromName: constr(max_length=255) = Field(
        ..., description='The sender name for the SMTP Email service.'
    )
    emailPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the SMTP Email service. Stored in encrypted format.',
    )
    emailPort: PositiveInt = Field(
        ..., description='The port for the SMTP Email service.'
    )
    emailServer: constr(max_length=255) = Field(
        ..., description='The server for the SMTP Email service.'
    )
    emailUsername: constr(max_length=255) = Field(
        ..., description='The username for the SMTP Email service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEmailPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    emailFromAddress: EmailStr = Field(
        ..., description='The sender email address for the SMTP Email service.'
    )
    emailFromName: constr(max_length=255) = Field(
        ..., description='The sender name for the SMTP Email service.'
    )
    emailPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the SMTP Email service. Stored in encrypted format.',
    )
    emailPort: PositiveInt = Field(
        ..., description='The port for the SMTP Email service.'
    )
    emailServer: constr(max_length=255) = Field(
        ..., description='The server for the SMTP Email service.'
    )
    emailUsername: constr(max_length=255) = Field(
        ..., description='The username for the SMTP Email service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEmailPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    emailFromAddress: EmailStr = Field(
        ..., description='The sender email address for the SMTP Email service.'
    )
    emailFromName: constr(max_length=255) = Field(
        ..., description='The sender name for the SMTP Email service.'
    )
    emailPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the SMTP Email service. Stored in encrypted format.',
    )
    emailPort: PositiveInt = Field(
        ..., description='The port for the SMTP Email service.'
    )
    emailServer: constr(max_length=255) = Field(
        ..., description='The server for the SMTP Email service.'
    )
    emailUsername: constr(max_length=255) = Field(
        ..., description='The username for the SMTP Email service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext27(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportEmailJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext27]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    emailFromAddress: EmailStr = Field(
        ..., description='The sender email address for the SMTP Email service.'
    )
    emailFromName: constr(max_length=255) = Field(
        ..., description='The sender name for the SMTP Email service.'
    )
    emailPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the SMTP Email service. Stored in encrypted format.',
    )
    emailPort: PositiveInt = Field(
        ..., description='The port for the SMTP Email service.'
    )
    emailServer: constr(max_length=255) = Field(
        ..., description='The server for the SMTP Email service.'
    )
    emailUsername: constr(max_length=255) = Field(
        ..., description='The username for the SMTP Email service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEmailJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    emailFromAddress: EmailStr = Field(
        ..., description='The sender email address for the SMTP Email service.'
    )
    emailFromName: constr(max_length=255) = Field(
        ..., description='The sender name for the SMTP Email service.'
    )
    emailPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the SMTP Email service. Stored in encrypted format.',
    )
    emailPort: PositiveInt = Field(
        ..., description='The port for the SMTP Email service.'
    )
    emailServer: constr(max_length=255) = Field(
        ..., description='The server for the SMTP Email service.'
    )
    emailUsername: constr(max_length=255) = Field(
        ..., description='The username for the SMTP Email service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEmailJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    emailFromAddress: EmailStr = Field(
        ..., description='The sender email address for the SMTP Email service.'
    )
    emailFromName: constr(max_length=255) = Field(
        ..., description='The sender name for the SMTP Email service.'
    )
    emailPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the SMTP Email service. Stored in encrypted format.',
    )
    emailPort: PositiveInt = Field(
        ..., description='The port for the SMTP Email service.'
    )
    emailServer: constr(max_length=255) = Field(
        ..., description='The server for the SMTP Email service.'
    )
    emailUsername: constr(max_length=255) = Field(
        ..., description='The username for the SMTP Email service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEngagespotGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    engagespotApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the EngageSpot service. Stored in encrypted format.',
    )
    engagespotCampaignName: constr(max_length=255) = Field(
        ..., description='The campaign name for the EngageSpot service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEngagespotPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    engagespotApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the EngageSpot service. Stored in encrypted format.',
    )
    engagespotCampaignName: constr(max_length=255) = Field(
        ..., description='The campaign name for the EngageSpot service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEngagespotPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    engagespotApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the EngageSpot service. Stored in encrypted format.',
    )
    engagespotCampaignName: constr(max_length=255) = Field(
        ..., description='The campaign name for the EngageSpot service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext28(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportEngagespotJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext28]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    engagespotApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the EngageSpot service. Stored in encrypted format.',
    )
    engagespotCampaignName: constr(max_length=255) = Field(
        ..., description='The campaign name for the EngageSpot service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEngagespotJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    engagespotApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the EngageSpot service. Stored in encrypted format.',
    )
    engagespotCampaignName: constr(max_length=255) = Field(
        ..., description='The campaign name for the EngageSpot service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEngagespotJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    engagespotApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the EngageSpot service. Stored in encrypted format.',
    )
    engagespotCampaignName: constr(max_length=255) = Field(
        ..., description='The campaign name for the EngageSpot service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEsendexGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    esendexAccountReference: constr(max_length=255) = Field(
        ...,
        description='The account reference that the message should be sent from for the Esendex service.',
    )
    esendexFrom: constr(max_length=255) = Field(
        ...,
        description='The alphanumeric originator for the message to appear to originate from for the Esendex service.',
    )
    esendexPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the Esendex service. Stored in encrypted format.',
    )
    esendexUsername: constr(max_length=255) = Field(
        ..., description='The account email for the Esendex service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEsendexPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    esendexAccountReference: constr(max_length=255) = Field(
        ...,
        description='The account reference that the message should be sent from for the Esendex service.',
    )
    esendexFrom: constr(max_length=255) = Field(
        ...,
        description='The alphanumeric originator for the message to appear to originate from for the Esendex service.',
    )
    esendexPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the Esendex service. Stored in encrypted format.',
    )
    esendexUsername: constr(max_length=255) = Field(
        ..., description='The account email for the Esendex service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEsendexPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    esendexAccountReference: constr(max_length=255) = Field(
        ...,
        description='The account reference that the message should be sent from for the Esendex service.',
    )
    esendexFrom: constr(max_length=255) = Field(
        ...,
        description='The alphanumeric originator for the message to appear to originate from for the Esendex service.',
    )
    esendexPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the Esendex service. Stored in encrypted format.',
    )
    esendexUsername: constr(max_length=255) = Field(
        ..., description='The account email for the Esendex service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext29(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportEsendexJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext29]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    esendexAccountReference: constr(max_length=255) = Field(
        ...,
        description='The account reference that the message should be sent from for the Esendex service.',
    )
    esendexFrom: constr(max_length=255) = Field(
        ...,
        description='The alphanumeric originator for the message to appear to originate from for the Esendex service.',
    )
    esendexPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the Esendex service. Stored in encrypted format.',
    )
    esendexUsername: constr(max_length=255) = Field(
        ..., description='The account email for the Esendex service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEsendexJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    esendexAccountReference: constr(max_length=255) = Field(
        ...,
        description='The account reference that the message should be sent from for the Esendex service.',
    )
    esendexFrom: constr(max_length=255) = Field(
        ...,
        description='The alphanumeric originator for the message to appear to originate from for the Esendex service.',
    )
    esendexPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the Esendex service. Stored in encrypted format.',
    )
    esendexUsername: constr(max_length=255) = Field(
        ..., description='The account email for the Esendex service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportEsendexJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    esendexAccountReference: constr(max_length=255) = Field(
        ...,
        description='The account reference that the message should be sent from for the Esendex service.',
    )
    esendexFrom: constr(max_length=255) = Field(
        ...,
        description='The alphanumeric originator for the message to appear to originate from for the Esendex service.',
    )
    esendexPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the Esendex service. Stored in encrypted format.',
    )
    esendexUsername: constr(max_length=255) = Field(
        ..., description='The account email for the Esendex service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportExpoGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    expoToken: constr(max_length=1000) = Field(
        ..., description='The token for the Expo service. Stored in encrypted format.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportExpoPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    expoToken: constr(max_length=1000) = Field(
        ..., description='The token for the Expo service. Stored in encrypted format.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportExpoPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    expoToken: constr(max_length=1000) = Field(
        ..., description='The token for the Expo service. Stored in encrypted format.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext30(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportExpoJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext30]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    expoToken: constr(max_length=1000) = Field(
        ..., description='The token for the Expo service. Stored in encrypted format.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportExpoJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    expoToken: constr(max_length=1000) = Field(
        ..., description='The token for the Expo service. Stored in encrypted format.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportExpoJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    expoToken: constr(max_length=1000) = Field(
        ..., description='The token for the Expo service. Stored in encrypted format.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFirebaseGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    firebasePassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Firebase service. Stored in encrypted format.',
    )
    firebaseUsername: constr(max_length=255) = Field(
        ..., description='The username for the Firebase service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFirebasePost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    firebasePassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Firebase service. Stored in encrypted format.',
    )
    firebaseUsername: constr(max_length=255) = Field(
        ..., description='The username for the Firebase service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFirebasePut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    firebasePassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Firebase service. Stored in encrypted format.',
    )
    firebaseUsername: constr(max_length=255) = Field(
        ..., description='The username for the Firebase service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext31(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportFirebaseJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext31]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    firebasePassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Firebase service. Stored in encrypted format.',
    )
    firebaseUsername: constr(max_length=255) = Field(
        ..., description='The username for the Firebase service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFirebaseJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    firebasePassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Firebase service. Stored in encrypted format.',
    )
    firebaseUsername: constr(max_length=255) = Field(
        ..., description='The username for the Firebase service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFirebaseJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    firebasePassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Firebase service. Stored in encrypted format.',
    )
    firebaseUsername: constr(max_length=255) = Field(
        ..., description='The username for the Firebase service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFortySixElksGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    fortySixElksApiPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the 46elks service. Stored in encrypted format.',
    )
    fortySixElksApiUsername: constr(max_length=255) = Field(
        ..., description='The API username for the 46elks service.'
    )
    fortySixElksFrom: constr(max_length=255) = Field(
        ...,
        description='The alphanumeric originator for the message to appear to originate from for the 46elks service.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFortySixElksPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    fortySixElksApiPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the 46elks service. Stored in encrypted format.',
    )
    fortySixElksApiUsername: constr(max_length=255) = Field(
        ..., description='The API username for the 46elks service.'
    )
    fortySixElksFrom: constr(max_length=255) = Field(
        ...,
        description='The alphanumeric originator for the message to appear to originate from for the 46elks service.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFortySixElksPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    fortySixElksApiPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the 46elks service. Stored in encrypted format.',
    )
    fortySixElksApiUsername: constr(max_length=255) = Field(
        ..., description='The API username for the 46elks service.'
    )
    fortySixElksFrom: constr(max_length=255) = Field(
        ...,
        description='The alphanumeric originator for the message to appear to originate from for the 46elks service.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext32(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportFortySixElksJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext32]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    fortySixElksApiPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the 46elks service. Stored in encrypted format.',
    )
    fortySixElksApiUsername: constr(max_length=255) = Field(
        ..., description='The API username for the 46elks service.'
    )
    fortySixElksFrom: constr(max_length=255) = Field(
        ...,
        description='The alphanumeric originator for the message to appear to originate from for the 46elks service.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFortySixElksJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    fortySixElksApiPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the 46elks service. Stored in encrypted format.',
    )
    fortySixElksApiUsername: constr(max_length=255) = Field(
        ..., description='The API username for the 46elks service.'
    )
    fortySixElksFrom: constr(max_length=255) = Field(
        ...,
        description='The alphanumeric originator for the message to appear to originate from for the 46elks service.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFortySixElksJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    fortySixElksApiPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the 46elks service. Stored in encrypted format.',
    )
    fortySixElksApiUsername: constr(max_length=255) = Field(
        ..., description='The API username for the 46elks service.'
    )
    fortySixElksFrom: constr(max_length=255) = Field(
        ...,
        description='The alphanumeric originator for the message to appear to originate from for the 46elks service.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFreeMobileGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    freeMobileApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Free Mobile service. Stored in encrypted format.',
    )
    freeMobileLogin: constr(max_length=255) = Field(
        ..., description='The login for the Free Mobile service.'
    )
    freeMobilePhone: constr(max_length=255) = Field(
        ..., description='The phone number for the Free Mobile service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFreeMobilePost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    freeMobileApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Free Mobile service. Stored in encrypted format.',
    )
    freeMobileLogin: constr(max_length=255) = Field(
        ..., description='The login for the Free Mobile service.'
    )
    freeMobilePhone: constr(max_length=255) = Field(
        ..., description='The phone number for the Free Mobile service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFreeMobilePut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    freeMobileApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Free Mobile service. Stored in encrypted format.',
    )
    freeMobileLogin: constr(max_length=255) = Field(
        ..., description='The login for the Free Mobile service.'
    )
    freeMobilePhone: constr(max_length=255) = Field(
        ..., description='The phone number for the Free Mobile service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext33(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportFreeMobileJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext33]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    freeMobileApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Free Mobile service. Stored in encrypted format.',
    )
    freeMobileLogin: constr(max_length=255) = Field(
        ..., description='The login for the Free Mobile service.'
    )
    freeMobilePhone: constr(max_length=255) = Field(
        ..., description='The phone number for the Free Mobile service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFreeMobileJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    freeMobileApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Free Mobile service. Stored in encrypted format.',
    )
    freeMobileLogin: constr(max_length=255) = Field(
        ..., description='The login for the Free Mobile service.'
    )
    freeMobilePhone: constr(max_length=255) = Field(
        ..., description='The phone number for the Free Mobile service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFreeMobileJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    freeMobileApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Free Mobile service. Stored in encrypted format.',
    )
    freeMobileLogin: constr(max_length=255) = Field(
        ..., description='The login for the Free Mobile service.'
    )
    freeMobilePhone: constr(max_length=255) = Field(
        ..., description='The phone number for the Free Mobile service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFreshdeskGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    freshdeskApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Freshdesk service. Stored in encrypted format.',
    )
    freshdeskEmail: EmailStr = Field(
        ..., description='The requester email address for the Freshdesk service.'
    )
    freshdeskHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Freshdesk service (domain.freshdesk.com).',
    )
    freshdeskPriority: Optional[str] = Field(
        None, description='The ticket priority for the Freshdesk service.'
    )
    freshdeskType: Optional[constr(max_length=255)] = Field(
        None, description='The ticket type for the Freshdesk service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFreshdeskPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    freshdeskApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Freshdesk service. Stored in encrypted format.',
    )
    freshdeskEmail: EmailStr = Field(
        ..., description='The requester email address for the Freshdesk service.'
    )
    freshdeskHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Freshdesk service (domain.freshdesk.com).',
    )
    freshdeskPriority: Optional[str] = Field(
        None, description='The ticket priority for the Freshdesk service.'
    )
    freshdeskType: Optional[constr(max_length=255)] = Field(
        None, description='The ticket type for the Freshdesk service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFreshdeskPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    freshdeskApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Freshdesk service. Stored in encrypted format.',
    )
    freshdeskEmail: EmailStr = Field(
        ..., description='The requester email address for the Freshdesk service.'
    )
    freshdeskHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Freshdesk service (domain.freshdesk.com).',
    )
    freshdeskPriority: Optional[str] = Field(
        None, description='The ticket priority for the Freshdesk service.'
    )
    freshdeskType: Optional[constr(max_length=255)] = Field(
        None, description='The ticket type for the Freshdesk service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext34(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportFreshdeskJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext34]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    freshdeskApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Freshdesk service. Stored in encrypted format.',
    )
    freshdeskEmail: EmailStr = Field(
        ..., description='The requester email address for the Freshdesk service.'
    )
    freshdeskHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Freshdesk service (domain.freshdesk.com).',
    )
    freshdeskPriority: Optional[str] = Field(
        None, description='The ticket priority for the Freshdesk service.'
    )
    freshdeskType: Optional[constr(max_length=255)] = Field(
        None, description='The ticket type for the Freshdesk service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFreshdeskJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    freshdeskApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Freshdesk service. Stored in encrypted format.',
    )
    freshdeskEmail: EmailStr = Field(
        ..., description='The requester email address for the Freshdesk service.'
    )
    freshdeskHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Freshdesk service (domain.freshdesk.com).',
    )
    freshdeskPriority: Optional[str] = Field(
        None, description='The ticket priority for the Freshdesk service.'
    )
    freshdeskType: Optional[constr(max_length=255)] = Field(
        None, description='The ticket type for the Freshdesk service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportFreshdeskJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    freshdeskApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Freshdesk service. Stored in encrypted format.',
    )
    freshdeskEmail: EmailStr = Field(
        ..., description='The requester email address for the Freshdesk service.'
    )
    freshdeskHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Freshdesk service (domain.freshdesk.com).',
    )
    freshdeskPriority: Optional[str] = Field(
        None, description='The ticket priority for the Freshdesk service.'
    )
    freshdeskType: Optional[constr(max_length=255)] = Field(
        None, description='The ticket type for the Freshdesk service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGatewayApiGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gatewayApiFrom: constr(max_length=255) = Field(
        ..., description='The sender name for the Gateway API service.'
    )
    gatewayApiToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Gateway API service. Stored in encrypted format.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGatewayApiPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gatewayApiFrom: constr(max_length=255) = Field(
        ..., description='The sender name for the Gateway API service.'
    )
    gatewayApiToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Gateway API service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGatewayApiPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gatewayApiFrom: constr(max_length=255) = Field(
        ..., description='The sender name for the Gateway API service.'
    )
    gatewayApiToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Gateway API service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext35(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportGatewayApiJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext35]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gatewayApiFrom: constr(max_length=255) = Field(
        ..., description='The sender name for the Gateway API service.'
    )
    gatewayApiToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Gateway API service. Stored in encrypted format.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGatewayApiJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gatewayApiFrom: constr(max_length=255) = Field(
        ..., description='The sender name for the Gateway API service.'
    )
    gatewayApiToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Gateway API service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGatewayApiJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gatewayApiFrom: constr(max_length=255) = Field(
        ..., description='The sender name for the Gateway API service.'
    )
    gatewayApiToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Gateway API service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGitterGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gitterRoomId: constr(max_length=255) = Field(
        ..., description='The room ID for the Gitter service.'
    )
    gitterToken: constr(max_length=1000) = Field(
        ..., description='The token for the Gitter service. Stored in encrypted format.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGitterPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gitterRoomId: constr(max_length=255) = Field(
        ..., description='The room ID for the Gitter service.'
    )
    gitterToken: constr(max_length=1000) = Field(
        ..., description='The token for the Gitter service. Stored in encrypted format.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGitterPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gitterRoomId: constr(max_length=255) = Field(
        ..., description='The room ID for the Gitter service.'
    )
    gitterToken: constr(max_length=1000) = Field(
        ..., description='The token for the Gitter service. Stored in encrypted format.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext36(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportGitterJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext36]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gitterRoomId: constr(max_length=255) = Field(
        ..., description='The room ID for the Gitter service.'
    )
    gitterToken: constr(max_length=1000) = Field(
        ..., description='The token for the Gitter service. Stored in encrypted format.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGitterJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gitterRoomId: constr(max_length=255) = Field(
        ..., description='The room ID for the Gitter service.'
    )
    gitterToken: constr(max_length=1000) = Field(
        ..., description='The token for the Gitter service. Stored in encrypted format.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGitterJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gitterRoomId: constr(max_length=255) = Field(
        ..., description='The room ID for the Gitter service.'
    )
    gitterToken: constr(max_length=1000) = Field(
        ..., description='The token for the Gitter service. Stored in encrypted format.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGoogleChatGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    googleChatAccessKey: constr(max_length=255) = Field(
        ..., description='The access key for the Google Chat service.'
    )
    googleChatAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Google Chat service. Stored in encrypted format.',
    )
    googleChatSpace: constr(max_length=255) = Field(
        ..., description='The space name for the Google Chat service.'
    )
    googleChatThreadKey: Optional[constr(max_length=255)] = Field(
        None, description='The optional thread key for the Google Chat service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGoogleChatPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    googleChatAccessKey: constr(max_length=255) = Field(
        ..., description='The access key for the Google Chat service.'
    )
    googleChatAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Google Chat service. Stored in encrypted format.',
    )
    googleChatSpace: constr(max_length=255) = Field(
        ..., description='The space name for the Google Chat service.'
    )
    googleChatThreadKey: Optional[constr(max_length=255)] = Field(
        None, description='The optional thread key for the Google Chat service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGoogleChatPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    googleChatAccessKey: constr(max_length=255) = Field(
        ..., description='The access key for the Google Chat service.'
    )
    googleChatAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Google Chat service. Stored in encrypted format.',
    )
    googleChatSpace: constr(max_length=255) = Field(
        ..., description='The space name for the Google Chat service.'
    )
    googleChatThreadKey: Optional[constr(max_length=255)] = Field(
        None, description='The optional thread key for the Google Chat service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext37(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportGoogleChatJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext37]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    googleChatAccessKey: constr(max_length=255) = Field(
        ..., description='The access key for the Google Chat service.'
    )
    googleChatAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Google Chat service. Stored in encrypted format.',
    )
    googleChatSpace: constr(max_length=255) = Field(
        ..., description='The space name for the Google Chat service.'
    )
    googleChatThreadKey: Optional[constr(max_length=255)] = Field(
        None, description='The optional thread key for the Google Chat service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGoogleChatJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    googleChatAccessKey: constr(max_length=255) = Field(
        ..., description='The access key for the Google Chat service.'
    )
    googleChatAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Google Chat service. Stored in encrypted format.',
    )
    googleChatSpace: constr(max_length=255) = Field(
        ..., description='The space name for the Google Chat service.'
    )
    googleChatThreadKey: Optional[constr(max_length=255)] = Field(
        None, description='The optional thread key for the Google Chat service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGoogleChatJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    googleChatAccessKey: constr(max_length=255) = Field(
        ..., description='The access key for the Google Chat service.'
    )
    googleChatAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Google Chat service. Stored in encrypted format.',
    )
    googleChatSpace: constr(max_length=255) = Field(
        ..., description='The space name for the Google Chat service.'
    )
    googleChatThreadKey: Optional[constr(max_length=255)] = Field(
        None, description='The optional thread key for the Google Chat service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGotifyGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gotifyApiUrl: AnyUrl = Field(
        ...,
        description='The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).',
    )
    gotifyAppToken: constr(max_length=1000) = Field(
        ...,
        description='The app token for the Gotify service. Stored in encrypted format.',
    )
    gotifyPriority: Optional[str] = Field(
        None, description='The priority for the Gotify service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGotifyPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gotifyApiUrl: AnyUrl = Field(
        ...,
        description='The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).',
    )
    gotifyAppToken: constr(max_length=1000) = Field(
        ...,
        description='The app token for the Gotify service. Stored in encrypted format.',
    )
    gotifyPriority: Optional[str] = Field(
        None, description='The priority for the Gotify service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGotifyPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gotifyApiUrl: AnyUrl = Field(
        ...,
        description='The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).',
    )
    gotifyAppToken: constr(max_length=1000) = Field(
        ...,
        description='The app token for the Gotify service. Stored in encrypted format.',
    )
    gotifyPriority: Optional[str] = Field(
        None, description='The priority for the Gotify service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext38(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportGotifyJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext38]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gotifyApiUrl: AnyUrl = Field(
        ...,
        description='The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).',
    )
    gotifyAppToken: constr(max_length=1000) = Field(
        ...,
        description='The app token for the Gotify service. Stored in encrypted format.',
    )
    gotifyPriority: Optional[str] = Field(
        None, description='The priority for the Gotify service.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGotifyJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gotifyApiUrl: AnyUrl = Field(
        ...,
        description='The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).',
    )
    gotifyAppToken: constr(max_length=1000) = Field(
        ...,
        description='The app token for the Gotify service. Stored in encrypted format.',
    )
    gotifyPriority: Optional[str] = Field(
        None, description='The priority for the Gotify service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportGotifyJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    gotifyApiUrl: AnyUrl = Field(
        ...,
        description='The API URL name for the Gotify service (https://example.com) - (do not include the path /message/createMessage).',
    )
    gotifyAppToken: constr(max_length=1000) = Field(
        ...,
        description='The app token for the Gotify service. Stored in encrypted format.',
    )
    gotifyPriority: Optional[str] = Field(
        None, description='The priority for the Gotify service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportHelpScoutGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    helpScoutCustomerEmail: EmailStr = Field(
        ...,
        description='The requester customer email address for the HelpScout service.',
    )
    helpScoutMailboxId: Optional[PositiveInt] = Field(
        None, description='The mailbox ID for the HelpScout service.'
    )
    helpScoutOauthToken: constr(max_length=1000) = Field(
        ...,
        description='The OAuth token for the HelpScout service. Stored in encrypted format.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportHelpScoutPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    helpScoutCustomerEmail: EmailStr = Field(
        ...,
        description='The requester customer email address for the HelpScout service.',
    )
    helpScoutMailboxId: Optional[PositiveInt] = Field(
        None, description='The mailbox ID for the HelpScout service.'
    )
    helpScoutOauthToken: constr(max_length=1000) = Field(
        ...,
        description='The OAuth token for the HelpScout service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportHelpScoutPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    helpScoutCustomerEmail: EmailStr = Field(
        ...,
        description='The requester customer email address for the HelpScout service.',
    )
    helpScoutMailboxId: Optional[PositiveInt] = Field(
        None, description='The mailbox ID for the HelpScout service.'
    )
    helpScoutOauthToken: constr(max_length=1000) = Field(
        ...,
        description='The OAuth token for the HelpScout service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext39(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportHelpScoutJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext39]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    helpScoutCustomerEmail: EmailStr = Field(
        ...,
        description='The requester customer email address for the HelpScout service.',
    )
    helpScoutMailboxId: Optional[PositiveInt] = Field(
        None, description='The mailbox ID for the HelpScout service.'
    )
    helpScoutOauthToken: constr(max_length=1000) = Field(
        ...,
        description='The OAuth token for the HelpScout service. Stored in encrypted format.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportHelpScoutJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    helpScoutCustomerEmail: EmailStr = Field(
        ...,
        description='The requester customer email address for the HelpScout service.',
    )
    helpScoutMailboxId: Optional[PositiveInt] = Field(
        None, description='The mailbox ID for the HelpScout service.'
    )
    helpScoutOauthToken: constr(max_length=1000) = Field(
        ...,
        description='The OAuth token for the HelpScout service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportHelpScoutJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    helpScoutCustomerEmail: EmailStr = Field(
        ...,
        description='The requester customer email address for the HelpScout service.',
    )
    helpScoutMailboxId: Optional[PositiveInt] = Field(
        None, description='The mailbox ID for the HelpScout service.'
    )
    helpScoutOauthToken: constr(max_length=1000) = Field(
        ...,
        description='The OAuth token for the HelpScout service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportInfobipGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    infobipAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Infobip service. Stored in encrypted format.',
    )
    infobipFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Infobip service.'
    )
    infobipHost: constr(max_length=255) = Field(
        ..., description='The host for the Infobip service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportInfobipPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    infobipAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Infobip service. Stored in encrypted format.',
    )
    infobipFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Infobip service.'
    )
    infobipHost: constr(max_length=255) = Field(
        ..., description='The host for the Infobip service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportInfobipPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    infobipAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Infobip service. Stored in encrypted format.',
    )
    infobipFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Infobip service.'
    )
    infobipHost: constr(max_length=255) = Field(
        ..., description='The host for the Infobip service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext40(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportInfobipJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext40]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    infobipAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Infobip service. Stored in encrypted format.',
    )
    infobipFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Infobip service.'
    )
    infobipHost: constr(max_length=255) = Field(
        ..., description='The host for the Infobip service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportInfobipJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    infobipAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Infobip service. Stored in encrypted format.',
    )
    infobipFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Infobip service.'
    )
    infobipHost: constr(max_length=255) = Field(
        ..., description='The host for the Infobip service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportInfobipJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    infobipAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Infobip service. Stored in encrypted format.',
    )
    infobipFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Infobip service.'
    )
    infobipHost: constr(max_length=255) = Field(
        ..., description='The host for the Infobip service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportIqsmsGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    iqsmsFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Iqsms service.'
    )
    iqsmsLogin: constr(max_length=255) = Field(
        ..., description='The login for the Iqsms service.'
    )
    iqsmsPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Iqsms service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportIqsmsPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    iqsmsFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Iqsms service.'
    )
    iqsmsLogin: constr(max_length=255) = Field(
        ..., description='The login for the Iqsms service.'
    )
    iqsmsPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Iqsms service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportIqsmsPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    iqsmsFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Iqsms service.'
    )
    iqsmsLogin: constr(max_length=255) = Field(
        ..., description='The login for the Iqsms service.'
    )
    iqsmsPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Iqsms service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext41(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportIqsmsJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext41]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    iqsmsFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Iqsms service.'
    )
    iqsmsLogin: constr(max_length=255) = Field(
        ..., description='The login for the Iqsms service.'
    )
    iqsmsPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Iqsms service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportIqsmsJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    iqsmsFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Iqsms service.'
    )
    iqsmsLogin: constr(max_length=255) = Field(
        ..., description='The login for the Iqsms service.'
    )
    iqsmsPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Iqsms service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportIqsmsJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    iqsmsFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Iqsms service.'
    )
    iqsmsLogin: constr(max_length=255) = Field(
        ..., description='The login for the Iqsms service.'
    )
    iqsmsPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Iqsms service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportKazInfoTehGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    kazInfoTehFrom: constr(max_length=255) = Field(
        ..., description='The from value for the KazInfoTeh service.'
    )
    kazInfoTehPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the KazInfoTeh service. Stored in encrypted format.',
    )
    kazInfoTehUsername: constr(max_length=255) = Field(
        ..., description='The username for the KazInfoTeh service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportKazInfoTehPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    kazInfoTehFrom: constr(max_length=255) = Field(
        ..., description='The from value for the KazInfoTeh service.'
    )
    kazInfoTehPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the KazInfoTeh service. Stored in encrypted format.',
    )
    kazInfoTehUsername: constr(max_length=255) = Field(
        ..., description='The username for the KazInfoTeh service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportKazInfoTehPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    kazInfoTehFrom: constr(max_length=255) = Field(
        ..., description='The from value for the KazInfoTeh service.'
    )
    kazInfoTehPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the KazInfoTeh service. Stored in encrypted format.',
    )
    kazInfoTehUsername: constr(max_length=255) = Field(
        ..., description='The username for the KazInfoTeh service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext42(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportKazInfoTehJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext42]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    kazInfoTehFrom: constr(max_length=255) = Field(
        ..., description='The from value for the KazInfoTeh service.'
    )
    kazInfoTehPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the KazInfoTeh service. Stored in encrypted format.',
    )
    kazInfoTehUsername: constr(max_length=255) = Field(
        ..., description='The username for the KazInfoTeh service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportKazInfoTehJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    kazInfoTehFrom: constr(max_length=255) = Field(
        ..., description='The from value for the KazInfoTeh service.'
    )
    kazInfoTehPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the KazInfoTeh service. Stored in encrypted format.',
    )
    kazInfoTehUsername: constr(max_length=255) = Field(
        ..., description='The username for the KazInfoTeh service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportKazInfoTehJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    kazInfoTehFrom: constr(max_length=255) = Field(
        ..., description='The from value for the KazInfoTeh service.'
    )
    kazInfoTehPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the KazInfoTeh service. Stored in encrypted format.',
    )
    kazInfoTehUsername: constr(max_length=255) = Field(
        ..., description='The username for the KazInfoTeh service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLightSmsGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    lightSmsLogin: constr(max_length=255) = Field(
        ..., description='The login for the LightSMS service.'
    )
    lightSmsPhone: constr(max_length=255) = Field(
        ..., description='The sender phone number for the LightSMS service.'
    )
    lightSmsToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the LightSMS service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLightSmsPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    lightSmsLogin: constr(max_length=255) = Field(
        ..., description='The login for the LightSMS service.'
    )
    lightSmsPhone: constr(max_length=255) = Field(
        ..., description='The sender phone number for the LightSMS service.'
    )
    lightSmsToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the LightSMS service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLightSmsPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    lightSmsLogin: constr(max_length=255) = Field(
        ..., description='The login for the LightSMS service.'
    )
    lightSmsPhone: constr(max_length=255) = Field(
        ..., description='The sender phone number for the LightSMS service.'
    )
    lightSmsToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the LightSMS service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext43(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportLightSmsJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext43]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    lightSmsLogin: constr(max_length=255) = Field(
        ..., description='The login for the LightSMS service.'
    )
    lightSmsPhone: constr(max_length=255) = Field(
        ..., description='The sender phone number for the LightSMS service.'
    )
    lightSmsToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the LightSMS service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLightSmsJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    lightSmsLogin: constr(max_length=255) = Field(
        ..., description='The login for the LightSMS service.'
    )
    lightSmsPhone: constr(max_length=255) = Field(
        ..., description='The sender phone number for the LightSMS service.'
    )
    lightSmsToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the LightSMS service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLightSmsJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    lightSmsLogin: constr(max_length=255) = Field(
        ..., description='The login for the LightSMS service.'
    )
    lightSmsPhone: constr(max_length=255) = Field(
        ..., description='The sender phone number for the LightSMS service.'
    )
    lightSmsToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the LightSMS service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLineNotifyGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    lineNotifyAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the LINE Notify service. Stored in encrypted format.',
    )
    lineNotifyStickerId: Optional[str] = Field(
        None, description='The sticker ID value for the LINE Notify service.'
    )
    lineNotifyStickerPackageId: Optional[str] = Field(
        None, description='The sticker package ID value for the LINE Notify service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLineNotifyPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    lineNotifyAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the LINE Notify service. Stored in encrypted format.',
    )
    lineNotifyStickerId: Optional[str] = Field(
        None, description='The sticker ID value for the LINE Notify service.'
    )
    lineNotifyStickerPackageId: Optional[str] = Field(
        None, description='The sticker package ID value for the LINE Notify service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLineNotifyPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    lineNotifyAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the LINE Notify service. Stored in encrypted format.',
    )
    lineNotifyStickerId: Optional[str] = Field(
        None, description='The sticker ID value for the LINE Notify service.'
    )
    lineNotifyStickerPackageId: Optional[str] = Field(
        None, description='The sticker package ID value for the LINE Notify service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext44(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportLineNotifyJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext44]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    lineNotifyAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the LINE Notify service. Stored in encrypted format.',
    )
    lineNotifyStickerId: Optional[str] = Field(
        None, description='The sticker ID value for the LINE Notify service.'
    )
    lineNotifyStickerPackageId: Optional[str] = Field(
        None, description='The sticker package ID value for the LINE Notify service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLineNotifyJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    lineNotifyAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the LINE Notify service. Stored in encrypted format.',
    )
    lineNotifyStickerId: Optional[str] = Field(
        None, description='The sticker ID value for the LINE Notify service.'
    )
    lineNotifyStickerPackageId: Optional[str] = Field(
        None, description='The sticker package ID value for the LINE Notify service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLineNotifyJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    lineNotifyAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the LINE Notify service. Stored in encrypted format.',
    )
    lineNotifyStickerId: Optional[str] = Field(
        None, description='The sticker ID value for the LINE Notify service.'
    )
    lineNotifyStickerPackageId: Optional[str] = Field(
        None, description='The sticker package ID value for the LINE Notify service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLinkedInGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    linkedInToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the LinkedIn service. Stored in encrypted format.',
    )
    linkedInUserId: constr(max_length=255) = Field(
        ..., description='The user ID for the LinkedIn service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLinkedInPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    linkedInToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the LinkedIn service. Stored in encrypted format.',
    )
    linkedInUserId: constr(max_length=255) = Field(
        ..., description='The user ID for the LinkedIn service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLinkedInPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    linkedInToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the LinkedIn service. Stored in encrypted format.',
    )
    linkedInUserId: constr(max_length=255) = Field(
        ..., description='The user ID for the LinkedIn service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext45(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportLinkedInJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext45]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    linkedInToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the LinkedIn service. Stored in encrypted format.',
    )
    linkedInUserId: constr(max_length=255) = Field(
        ..., description='The user ID for the LinkedIn service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLinkedInJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    linkedInToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the LinkedIn service. Stored in encrypted format.',
    )
    linkedInUserId: constr(max_length=255) = Field(
        ..., description='The user ID for the LinkedIn service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportLinkedInJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    linkedInToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the LinkedIn service. Stored in encrypted format.',
    )
    linkedInUserId: constr(max_length=255) = Field(
        ..., description='The user ID for the LinkedIn service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMailjetGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mailjetFrom: constr(max_length=255) = Field(
        ..., description='The alphanumeric sender ID for the MailJet service.'
    )
    mailjetToken: constr(max_length=1000) = Field(
        ...,
        description='The SMS auth token for the MailJet service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMailjetPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mailjetFrom: constr(max_length=255) = Field(
        ..., description='The alphanumeric sender ID for the MailJet service.'
    )
    mailjetToken: constr(max_length=1000) = Field(
        ...,
        description='The SMS auth token for the MailJet service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMailjetPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mailjetFrom: constr(max_length=255) = Field(
        ..., description='The alphanumeric sender ID for the MailJet service.'
    )
    mailjetToken: constr(max_length=1000) = Field(
        ...,
        description='The SMS auth token for the MailJet service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext46(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportMailjetJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext46]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mailjetFrom: constr(max_length=255) = Field(
        ..., description='The alphanumeric sender ID for the MailJet service.'
    )
    mailjetToken: constr(max_length=1000) = Field(
        ...,
        description='The SMS auth token for the MailJet service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMailjetJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mailjetFrom: constr(max_length=255) = Field(
        ..., description='The alphanumeric sender ID for the MailJet service.'
    )
    mailjetToken: constr(max_length=1000) = Field(
        ...,
        description='The SMS auth token for the MailJet service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMailjetJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mailjetFrom: constr(max_length=255) = Field(
        ..., description='The alphanumeric sender ID for the MailJet service.'
    )
    mailjetToken: constr(max_length=1000) = Field(
        ...,
        description='The SMS auth token for the MailJet service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMastodonGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mastodonAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mastodon service. Stored in encrypted format.',
    )
    mastodonHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Mastodon service (omit the "https://" part).',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMastodonPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mastodonAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mastodon service. Stored in encrypted format.',
    )
    mastodonHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Mastodon service (omit the "https://" part).',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMastodonPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mastodonAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mastodon service. Stored in encrypted format.',
    )
    mastodonHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Mastodon service (omit the "https://" part).',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext47(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportMastodonJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext47]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mastodonAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mastodon service. Stored in encrypted format.',
    )
    mastodonHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Mastodon service (omit the "https://" part).',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMastodonJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mastodonAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mastodon service. Stored in encrypted format.',
    )
    mastodonHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Mastodon service (omit the "https://" part).',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMastodonJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mastodonAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mastodon service. Stored in encrypted format.',
    )
    mastodonHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ...,
        description='The host name for the Mastodon service (omit the "https://" part).',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMattermostGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mattermostAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mattermost service. Stored in encrypted format.',
    )
    mattermostChannel: constr(max_length=255) = Field(
        ..., description='The default channel ID for the Mattermost service.'
    )
    mattermostHost: constr(max_length=255) = Field(
        ..., description='The host for the Mattermost service.'
    )
    mattermostPath: Optional[constr(max_length=255)] = Field(
        None, description='The optional path for the Mattermost service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMattermostPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mattermostAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mattermost service. Stored in encrypted format.',
    )
    mattermostChannel: constr(max_length=255) = Field(
        ..., description='The default channel ID for the Mattermost service.'
    )
    mattermostHost: constr(max_length=255) = Field(
        ..., description='The host for the Mattermost service.'
    )
    mattermostPath: Optional[constr(max_length=255)] = Field(
        None, description='The optional path for the Mattermost service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMattermostPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mattermostAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mattermost service. Stored in encrypted format.',
    )
    mattermostChannel: constr(max_length=255) = Field(
        ..., description='The default channel ID for the Mattermost service.'
    )
    mattermostHost: constr(max_length=255) = Field(
        ..., description='The host for the Mattermost service.'
    )
    mattermostPath: Optional[constr(max_length=255)] = Field(
        None, description='The optional path for the Mattermost service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext48(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportMattermostJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext48]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mattermostAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mattermost service. Stored in encrypted format.',
    )
    mattermostChannel: constr(max_length=255) = Field(
        ..., description='The default channel ID for the Mattermost service.'
    )
    mattermostHost: constr(max_length=255) = Field(
        ..., description='The host for the Mattermost service.'
    )
    mattermostPath: Optional[constr(max_length=255)] = Field(
        None, description='The optional path for the Mattermost service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMattermostJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mattermostAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mattermost service. Stored in encrypted format.',
    )
    mattermostChannel: constr(max_length=255) = Field(
        ..., description='The default channel ID for the Mattermost service.'
    )
    mattermostHost: constr(max_length=255) = Field(
        ..., description='The host for the Mattermost service.'
    )
    mattermostPath: Optional[constr(max_length=255)] = Field(
        None, description='The optional path for the Mattermost service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMattermostJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mattermostAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mattermost service. Stored in encrypted format.',
    )
    mattermostChannel: constr(max_length=255) = Field(
        ..., description='The default channel ID for the Mattermost service.'
    )
    mattermostHost: constr(max_length=255) = Field(
        ..., description='The host for the Mattermost service.'
    )
    mattermostPath: Optional[constr(max_length=255)] = Field(
        None, description='The optional path for the Mattermost service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMercureGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mercureHubJwtToken: constr(max_length=1000) = Field(
        ...,
        description='The JWT token for the hub for the Mercure service. Stored in encrypted format.',
    )
    mercureHubUrl: Optional[AnyUrl] = Field(
        None, description='The URL for the hub for the Mercure service.'
    )
    mercureTopic: Optional[constr(max_length=255)] = Field(
        None, description='The optional topic for the Mercure service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMercurePost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mercureHubJwtToken: constr(max_length=1000) = Field(
        ...,
        description='The JWT token for the hub for the Mercure service. Stored in encrypted format.',
    )
    mercureHubUrl: Optional[AnyUrl] = Field(
        None, description='The URL for the hub for the Mercure service.'
    )
    mercureTopic: Optional[constr(max_length=255)] = Field(
        None, description='The optional topic for the Mercure service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMercurePut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mercureHubJwtToken: constr(max_length=1000) = Field(
        ...,
        description='The JWT token for the hub for the Mercure service. Stored in encrypted format.',
    )
    mercureHubUrl: Optional[AnyUrl] = Field(
        None, description='The URL for the hub for the Mercure service.'
    )
    mercureTopic: Optional[constr(max_length=255)] = Field(
        None, description='The optional topic for the Mercure service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext49(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportMercureJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext49]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mercureHubJwtToken: constr(max_length=1000) = Field(
        ...,
        description='The JWT token for the hub for the Mercure service. Stored in encrypted format.',
    )
    mercureHubUrl: Optional[AnyUrl] = Field(
        None, description='The URL for the hub for the Mercure service.'
    )
    mercureTopic: Optional[constr(max_length=255)] = Field(
        None, description='The optional topic for the Mercure service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMercureJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mercureHubJwtToken: constr(max_length=1000) = Field(
        ...,
        description='The JWT token for the hub for the Mercure service. Stored in encrypted format.',
    )
    mercureHubUrl: Optional[AnyUrl] = Field(
        None, description='The URL for the hub for the Mercure service.'
    )
    mercureTopic: Optional[constr(max_length=255)] = Field(
        None, description='The optional topic for the Mercure service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMercureJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mercureHubJwtToken: constr(max_length=1000) = Field(
        ...,
        description='The JWT token for the hub for the Mercure service. Stored in encrypted format.',
    )
    mercureHubUrl: Optional[AnyUrl] = Field(
        None, description='The URL for the hub for the Mercure service.'
    )
    mercureTopic: Optional[constr(max_length=255)] = Field(
        None, description='The optional topic for the Mercure service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMessageBirdGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    messageBirdFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the MessageBird service.'
    )
    messageBirdToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the MessageBird service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMessageBirdPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    messageBirdFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the MessageBird service.'
    )
    messageBirdToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the MessageBird service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMessageBirdPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    messageBirdFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the MessageBird service.'
    )
    messageBirdToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the MessageBird service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext50(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportMessageBirdJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext50]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    messageBirdFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the MessageBird service.'
    )
    messageBirdToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the MessageBird service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMessageBirdJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    messageBirdFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the MessageBird service.'
    )
    messageBirdToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the MessageBird service. Stored in encrypted format.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMessageBirdJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    messageBirdFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the MessageBird service.'
    )
    messageBirdToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the MessageBird service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMessageMediaGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    messageMediaApiKey: constr(max_length=255) = Field(
        ..., description='The API key for the MessageMedia service.'
    )
    messageMediaApiSecret: constr(max_length=1000) = Field(
        ...,
        description='The API secret for the MessageMedia service. Stored in encrypted format.',
    )
    messageMediaFrom: Optional[constr(max_length=255)] = Field(
        None,
        description='The optional registered sender ID for the MessageMedia service.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMessageMediaPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    messageMediaApiKey: constr(max_length=255) = Field(
        ..., description='The API key for the MessageMedia service.'
    )
    messageMediaApiSecret: constr(max_length=1000) = Field(
        ...,
        description='The API secret for the MessageMedia service. Stored in encrypted format.',
    )
    messageMediaFrom: Optional[constr(max_length=255)] = Field(
        None,
        description='The optional registered sender ID for the MessageMedia service.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMessageMediaPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    messageMediaApiKey: constr(max_length=255) = Field(
        ..., description='The API key for the MessageMedia service.'
    )
    messageMediaApiSecret: constr(max_length=1000) = Field(
        ...,
        description='The API secret for the MessageMedia service. Stored in encrypted format.',
    )
    messageMediaFrom: Optional[constr(max_length=255)] = Field(
        None,
        description='The optional registered sender ID for the MessageMedia service.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext51(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportMessageMediaJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext51]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    messageMediaApiKey: constr(max_length=255) = Field(
        ..., description='The API key for the MessageMedia service.'
    )
    messageMediaApiSecret: constr(max_length=1000) = Field(
        ...,
        description='The API secret for the MessageMedia service. Stored in encrypted format.',
    )
    messageMediaFrom: Optional[constr(max_length=255)] = Field(
        None,
        description='The optional registered sender ID for the MessageMedia service.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMessageMediaJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    messageMediaApiKey: constr(max_length=255) = Field(
        ..., description='The API key for the MessageMedia service.'
    )
    messageMediaApiSecret: constr(max_length=1000) = Field(
        ...,
        description='The API secret for the MessageMedia service. Stored in encrypted format.',
    )
    messageMediaFrom: Optional[constr(max_length=255)] = Field(
        None,
        description='The optional registered sender ID for the MessageMedia service.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMessageMediaJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    messageMediaApiKey: constr(max_length=255) = Field(
        ..., description='The API key for the MessageMedia service.'
    )
    messageMediaApiSecret: constr(max_length=1000) = Field(
        ...,
        description='The API secret for the MessageMedia service. Stored in encrypted format.',
    )
    messageMediaFrom: Optional[constr(max_length=255)] = Field(
        None,
        description='The optional registered sender ID for the MessageMedia service.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMicrosoftTeamsGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    microsoftTeamsPath: constr(max_length=1000) = Field(
        ...,
        description="The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.",
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMicrosoftTeamsPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    microsoftTeamsPath: constr(max_length=1000) = Field(
        ...,
        description="The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.",
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMicrosoftTeamsPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    microsoftTeamsPath: constr(max_length=1000) = Field(
        ...,
        description="The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.",
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext52(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportMicrosoftTeamsJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext52]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    microsoftTeamsPath: constr(max_length=1000) = Field(
        ...,
        description="The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.",
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMicrosoftTeamsJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    microsoftTeamsPath: constr(max_length=1000) = Field(
        ...,
        description="The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.",
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMicrosoftTeamsJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    microsoftTeamsPath: constr(max_length=1000) = Field(
        ...,
        description="The path (has the following format: 'webhookb2/{uuid}@{uuid}/IncomingWebhook/{id}/{uuid}') for the Microsoft Teams service. Stored in encrypted format.",
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMobytGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mobytAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mobyt service. Stored in encrypted format.',
    )
    mobytFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Mobyt service.'
    )
    mobytTypeQuality: constr(max_length=255) = Field(
        ...,
        description="The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.",
    )
    mobytUserKey: constr(max_length=255) = Field(
        ..., description='The user key for the Mobyt service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMobytPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mobytAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mobyt service. Stored in encrypted format.',
    )
    mobytFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Mobyt service.'
    )
    mobytTypeQuality: constr(max_length=255) = Field(
        ...,
        description="The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.",
    )
    mobytUserKey: constr(max_length=255) = Field(
        ..., description='The user key for the Mobyt service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMobytPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mobytAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mobyt service. Stored in encrypted format.',
    )
    mobytFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Mobyt service.'
    )
    mobytTypeQuality: constr(max_length=255) = Field(
        ...,
        description="The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.",
    )
    mobytUserKey: constr(max_length=255) = Field(
        ..., description='The user key for the Mobyt service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext53(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportMobytJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext53]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mobytAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mobyt service. Stored in encrypted format.',
    )
    mobytFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Mobyt service.'
    )
    mobytTypeQuality: constr(max_length=255) = Field(
        ...,
        description="The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.",
    )
    mobytUserKey: constr(max_length=255) = Field(
        ..., description='The user key for the Mobyt service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMobytJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mobytAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mobyt service. Stored in encrypted format.',
    )
    mobytFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Mobyt service.'
    )
    mobytTypeQuality: constr(max_length=255) = Field(
        ...,
        description="The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.",
    )
    mobytUserKey: constr(max_length=255) = Field(
        ..., description='The user key for the Mobyt service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportMobytJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    mobytAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Mobyt service. Stored in encrypted format.',
    )
    mobytFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Mobyt service.'
    )
    mobytTypeQuality: constr(max_length=255) = Field(
        ...,
        description="The quality of your message: 'N' for high, 'L' for medium, 'LL' for low, for the Mobyt service.",
    )
    mobytUserKey: constr(max_length=255) = Field(
        ..., description='The user key for the Mobyt service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOctopushGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    octopushApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Octopush service. Stored in encrypted format.',
    )
    octopushFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Octopush service.'
    )
    octopushType: constr(max_length=255) = Field(
        ...,
        description="The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.",
    )
    octopushUserLogin: constr(max_length=255) = Field(
        ..., description='The user login (email) for the Octopush service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOctopushPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    octopushApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Octopush service. Stored in encrypted format.',
    )
    octopushFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Octopush service.'
    )
    octopushType: constr(max_length=255) = Field(
        ...,
        description="The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.",
    )
    octopushUserLogin: constr(max_length=255) = Field(
        ..., description='The user login (email) for the Octopush service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOctopushPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    octopushApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Octopush service. Stored in encrypted format.',
    )
    octopushFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Octopush service.'
    )
    octopushType: constr(max_length=255) = Field(
        ...,
        description="The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.",
    )
    octopushUserLogin: constr(max_length=255) = Field(
        ..., description='The user login (email) for the Octopush service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext54(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportOctopushJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext54]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    octopushApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Octopush service. Stored in encrypted format.',
    )
    octopushFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Octopush service.'
    )
    octopushType: constr(max_length=255) = Field(
        ...,
        description="The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.",
    )
    octopushUserLogin: constr(max_length=255) = Field(
        ..., description='The user login (email) for the Octopush service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOctopushJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    octopushApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Octopush service. Stored in encrypted format.',
    )
    octopushFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Octopush service.'
    )
    octopushType: constr(max_length=255) = Field(
        ...,
        description="The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.",
    )
    octopushUserLogin: constr(max_length=255) = Field(
        ..., description='The user login (email) for the Octopush service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOctopushJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    octopushApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Octopush service. Stored in encrypted format.',
    )
    octopushFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Octopush service.'
    )
    octopushType: constr(max_length=255) = Field(
        ...,
        description="The SMS type ('XXX' = SMS LowCost; 'FR' = SMS Premium; 'WWW' = SMS World) for the Octopush service.",
    )
    octopushUserLogin: constr(max_length=255) = Field(
        ..., description='The user login (email) for the Octopush service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOneSignalGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    oneSignalApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API (auth) key for the One Signal service. Stored in encrypted format.',
    )
    oneSignalAppId: constr(max_length=255) = Field(
        ..., description='The App ID for the One Signal service.'
    )
    oneSignalDefaultRecipientId: Optional[constr(max_length=255)] = Field(
        None,
        description='The optional default recipient ID for the One Signal service.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOneSignalPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    oneSignalApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API (auth) key for the One Signal service. Stored in encrypted format.',
    )
    oneSignalAppId: constr(max_length=255) = Field(
        ..., description='The App ID for the One Signal service.'
    )
    oneSignalDefaultRecipientId: Optional[constr(max_length=255)] = Field(
        None,
        description='The optional default recipient ID for the One Signal service.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOneSignalPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    oneSignalApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API (auth) key for the One Signal service. Stored in encrypted format.',
    )
    oneSignalAppId: constr(max_length=255) = Field(
        ..., description='The App ID for the One Signal service.'
    )
    oneSignalDefaultRecipientId: Optional[constr(max_length=255)] = Field(
        None,
        description='The optional default recipient ID for the One Signal service.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext55(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportOneSignalJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext55]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    oneSignalApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API (auth) key for the One Signal service. Stored in encrypted format.',
    )
    oneSignalAppId: constr(max_length=255) = Field(
        ..., description='The App ID for the One Signal service.'
    )
    oneSignalDefaultRecipientId: Optional[constr(max_length=255)] = Field(
        None,
        description='The optional default recipient ID for the One Signal service.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOneSignalJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    oneSignalApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API (auth) key for the One Signal service. Stored in encrypted format.',
    )
    oneSignalAppId: constr(max_length=255) = Field(
        ..., description='The App ID for the One Signal service.'
    )
    oneSignalDefaultRecipientId: Optional[constr(max_length=255)] = Field(
        None,
        description='The optional default recipient ID for the One Signal service.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOneSignalJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    oneSignalApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API (auth) key for the One Signal service. Stored in encrypted format.',
    )
    oneSignalAppId: constr(max_length=255) = Field(
        ..., description='The App ID for the One Signal service.'
    )
    oneSignalDefaultRecipientId: Optional[constr(max_length=255)] = Field(
        None,
        description='The optional default recipient ID for the One Signal service.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOpsgenieGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    opsgenieAlias: Optional[constr(max_length=255)] = Field(
        None, description='The alias for the Opsgenie service.'
    )
    opsgenieApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Opsgenie service. Stored in encrypted format.',
    )
    opsgenieEntity: Optional[constr(max_length=255)] = Field(
        None, description='The entity for the Opsgenie service.'
    )
    opsgenieNote: Optional[constr(max_length=255)] = Field(
        None, description='The note for the Opsgenie service.'
    )
    opsgeniePriority: Optional[constr(max_length=255)] = Field(
        None, description='The priority for the Opsgenie service.'
    )
    opsgenieUser: Optional[constr(max_length=255)] = Field(
        None, description='The user for the Opsgenie service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOpsgeniePost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    opsgenieAlias: Optional[constr(max_length=255)] = Field(
        None, description='The alias for the Opsgenie service.'
    )
    opsgenieApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Opsgenie service. Stored in encrypted format.',
    )
    opsgenieEntity: Optional[constr(max_length=255)] = Field(
        None, description='The entity for the Opsgenie service.'
    )
    opsgenieNote: Optional[constr(max_length=255)] = Field(
        None, description='The note for the Opsgenie service.'
    )
    opsgeniePriority: Optional[constr(max_length=255)] = Field(
        None, description='The priority for the Opsgenie service.'
    )
    opsgenieUser: Optional[constr(max_length=255)] = Field(
        None, description='The user for the Opsgenie service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOpsgeniePut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    opsgenieAlias: Optional[constr(max_length=255)] = Field(
        None, description='The alias for the Opsgenie service.'
    )
    opsgenieApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Opsgenie service. Stored in encrypted format.',
    )
    opsgenieEntity: Optional[constr(max_length=255)] = Field(
        None, description='The entity for the Opsgenie service.'
    )
    opsgenieNote: Optional[constr(max_length=255)] = Field(
        None, description='The note for the Opsgenie service.'
    )
    opsgeniePriority: Optional[constr(max_length=255)] = Field(
        None, description='The priority for the Opsgenie service.'
    )
    opsgenieUser: Optional[constr(max_length=255)] = Field(
        None, description='The user for the Opsgenie service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext56(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportOpsgenieJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext56]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    opsgenieAlias: Optional[constr(max_length=255)] = Field(
        None, description='The alias for the Opsgenie service.'
    )
    opsgenieApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Opsgenie service. Stored in encrypted format.',
    )
    opsgenieEntity: Optional[constr(max_length=255)] = Field(
        None, description='The entity for the Opsgenie service.'
    )
    opsgenieNote: Optional[constr(max_length=255)] = Field(
        None, description='The note for the Opsgenie service.'
    )
    opsgeniePriority: Optional[constr(max_length=255)] = Field(
        None, description='The priority for the Opsgenie service.'
    )
    opsgenieUser: Optional[constr(max_length=255)] = Field(
        None, description='The user for the Opsgenie service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOpsgenieJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    opsgenieAlias: Optional[constr(max_length=255)] = Field(
        None, description='The alias for the Opsgenie service.'
    )
    opsgenieApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Opsgenie service. Stored in encrypted format.',
    )
    opsgenieEntity: Optional[constr(max_length=255)] = Field(
        None, description='The entity for the Opsgenie service.'
    )
    opsgenieNote: Optional[constr(max_length=255)] = Field(
        None, description='The note for the Opsgenie service.'
    )
    opsgeniePriority: Optional[constr(max_length=255)] = Field(
        None, description='The priority for the Opsgenie service.'
    )
    opsgenieUser: Optional[constr(max_length=255)] = Field(
        None, description='The user for the Opsgenie service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOpsgenieJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    opsgenieAlias: Optional[constr(max_length=255)] = Field(
        None, description='The alias for the Opsgenie service.'
    )
    opsgenieApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Opsgenie service. Stored in encrypted format.',
    )
    opsgenieEntity: Optional[constr(max_length=255)] = Field(
        None, description='The entity for the Opsgenie service.'
    )
    opsgenieNote: Optional[constr(max_length=255)] = Field(
        None, description='The note for the Opsgenie service.'
    )
    opsgeniePriority: Optional[constr(max_length=255)] = Field(
        None, description='The priority for the Opsgenie service.'
    )
    opsgenieUser: Optional[constr(max_length=255)] = Field(
        None, description='The user for the Opsgenie service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOrangeSmsGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    orangeSmsClientId: constr(max_length=255) = Field(
        ..., description='The app client ID for the Orange SMS service.'
    )
    orangeSmsClientSecret: constr(max_length=1000) = Field(
        ...,
        description='The app client secret for the Orange SMS service. Stored in encrypted format.',
    )
    orangeSmsFrom: constr(max_length=255) = Field(
        ..., description='The sender phone number for the Orange SMS service.'
    )
    orangeSmsSenderName: constr(max_length=255) = Field(
        ..., description='The sender name for the Orange SMS service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOrangeSmsPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    orangeSmsClientId: constr(max_length=255) = Field(
        ..., description='The app client ID for the Orange SMS service.'
    )
    orangeSmsClientSecret: constr(max_length=1000) = Field(
        ...,
        description='The app client secret for the Orange SMS service. Stored in encrypted format.',
    )
    orangeSmsFrom: constr(max_length=255) = Field(
        ..., description='The sender phone number for the Orange SMS service.'
    )
    orangeSmsSenderName: constr(max_length=255) = Field(
        ..., description='The sender name for the Orange SMS service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOrangeSmsPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    orangeSmsClientId: constr(max_length=255) = Field(
        ..., description='The app client ID for the Orange SMS service.'
    )
    orangeSmsClientSecret: constr(max_length=1000) = Field(
        ...,
        description='The app client secret for the Orange SMS service. Stored in encrypted format.',
    )
    orangeSmsFrom: constr(max_length=255) = Field(
        ..., description='The sender phone number for the Orange SMS service.'
    )
    orangeSmsSenderName: constr(max_length=255) = Field(
        ..., description='The sender name for the Orange SMS service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext57(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportOrangeSmsJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext57]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    orangeSmsClientId: constr(max_length=255) = Field(
        ..., description='The app client ID for the Orange SMS service.'
    )
    orangeSmsClientSecret: constr(max_length=1000) = Field(
        ...,
        description='The app client secret for the Orange SMS service. Stored in encrypted format.',
    )
    orangeSmsFrom: constr(max_length=255) = Field(
        ..., description='The sender phone number for the Orange SMS service.'
    )
    orangeSmsSenderName: constr(max_length=255) = Field(
        ..., description='The sender name for the Orange SMS service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOrangeSmsJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    orangeSmsClientId: constr(max_length=255) = Field(
        ..., description='The app client ID for the Orange SMS service.'
    )
    orangeSmsClientSecret: constr(max_length=1000) = Field(
        ...,
        description='The app client secret for the Orange SMS service. Stored in encrypted format.',
    )
    orangeSmsFrom: constr(max_length=255) = Field(
        ..., description='The sender phone number for the Orange SMS service.'
    )
    orangeSmsSenderName: constr(max_length=255) = Field(
        ..., description='The sender name for the Orange SMS service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOrangeSmsJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    orangeSmsClientId: constr(max_length=255) = Field(
        ..., description='The app client ID for the Orange SMS service.'
    )
    orangeSmsClientSecret: constr(max_length=1000) = Field(
        ...,
        description='The app client secret for the Orange SMS service. Stored in encrypted format.',
    )
    orangeSmsFrom: constr(max_length=255) = Field(
        ..., description='The sender phone number for the Orange SMS service.'
    )
    orangeSmsSenderName: constr(max_length=255) = Field(
        ..., description='The sender name for the Orange SMS service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOvhCloudGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    ovhCloudApplicationKey: constr(max_length=255) = Field(
        ..., description='The application key for the OVHcloud service.'
    )
    ovhCloudApplicationSecret: constr(max_length=1000) = Field(
        ...,
        description='The application secret for the OVHcloud service. Stored in encrypted format.',
    )
    ovhCloudConsumerKey: constr(max_length=255) = Field(
        ..., description='The consumer key for the OVHcloud service.'
    )
    ovhCloudSender: Optional[constr(max_length=255)] = Field(
        None, description='The optional sender for the OVHcloud service.'
    )
    ovhCloudServiceName: constr(max_length=255) = Field(
        ..., description='The service name for the OVHcloud service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOvhCloudPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    ovhCloudApplicationKey: constr(max_length=255) = Field(
        ..., description='The application key for the OVHcloud service.'
    )
    ovhCloudApplicationSecret: constr(max_length=1000) = Field(
        ...,
        description='The application secret for the OVHcloud service. Stored in encrypted format.',
    )
    ovhCloudConsumerKey: constr(max_length=255) = Field(
        ..., description='The consumer key for the OVHcloud service.'
    )
    ovhCloudSender: Optional[constr(max_length=255)] = Field(
        None, description='The optional sender for the OVHcloud service.'
    )
    ovhCloudServiceName: constr(max_length=255) = Field(
        ..., description='The service name for the OVHcloud service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOvhCloudPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    ovhCloudApplicationKey: constr(max_length=255) = Field(
        ..., description='The application key for the OVHcloud service.'
    )
    ovhCloudApplicationSecret: constr(max_length=1000) = Field(
        ...,
        description='The application secret for the OVHcloud service. Stored in encrypted format.',
    )
    ovhCloudConsumerKey: constr(max_length=255) = Field(
        ..., description='The consumer key for the OVHcloud service.'
    )
    ovhCloudSender: Optional[constr(max_length=255)] = Field(
        None, description='The optional sender for the OVHcloud service.'
    )
    ovhCloudServiceName: constr(max_length=255) = Field(
        ..., description='The service name for the OVHcloud service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext58(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportOvhCloudJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext58]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    ovhCloudApplicationKey: constr(max_length=255) = Field(
        ..., description='The application key for the OVHcloud service.'
    )
    ovhCloudApplicationSecret: constr(max_length=1000) = Field(
        ...,
        description='The application secret for the OVHcloud service. Stored in encrypted format.',
    )
    ovhCloudConsumerKey: constr(max_length=255) = Field(
        ..., description='The consumer key for the OVHcloud service.'
    )
    ovhCloudSender: Optional[constr(max_length=255)] = Field(
        None, description='The optional sender for the OVHcloud service.'
    )
    ovhCloudServiceName: constr(max_length=255) = Field(
        ..., description='The service name for the OVHcloud service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOvhCloudJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    ovhCloudApplicationKey: constr(max_length=255) = Field(
        ..., description='The application key for the OVHcloud service.'
    )
    ovhCloudApplicationSecret: constr(max_length=1000) = Field(
        ...,
        description='The application secret for the OVHcloud service. Stored in encrypted format.',
    )
    ovhCloudConsumerKey: constr(max_length=255) = Field(
        ..., description='The consumer key for the OVHcloud service.'
    )
    ovhCloudSender: Optional[constr(max_length=255)] = Field(
        None, description='The optional sender for the OVHcloud service.'
    )
    ovhCloudServiceName: constr(max_length=255) = Field(
        ..., description='The service name for the OVHcloud service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportOvhCloudJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    ovhCloudApplicationKey: constr(max_length=255) = Field(
        ..., description='The application key for the OVHcloud service.'
    )
    ovhCloudApplicationSecret: constr(max_length=1000) = Field(
        ...,
        description='The application secret for the OVHcloud service. Stored in encrypted format.',
    )
    ovhCloudConsumerKey: constr(max_length=255) = Field(
        ..., description='The consumer key for the OVHcloud service.'
    )
    ovhCloudSender: Optional[constr(max_length=255)] = Field(
        None, description='The optional sender for the OVHcloud service.'
    )
    ovhCloudServiceName: constr(max_length=255) = Field(
        ..., description='The service name for the OVHcloud service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPagerDutyGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    pagerDutyApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Pager Duty service. Stored in encrypted format.',
    )
    pagerDutyDedupKey: Optional[constr(max_length=255)] = Field(
        None, description='The dedup key for the Pager Duty service.'
    )
    pagerDutyEventAction: constr(max_length=255) = Field(
        ..., description='The event action for the Pager Duty service.'
    )
    pagerDutyPayloadClass: Optional[constr(max_length=255)] = Field(
        None, description='The payload class for the Pager Duty service.'
    )
    pagerDutyPayloadComponent: Optional[constr(max_length=255)] = Field(
        None, description='The payload component for the Pager Duty service.'
    )
    pagerDutyPayloadGroup: Optional[constr(max_length=255)] = Field(
        None, description='The payload group for the Pager Duty service.'
    )
    pagerDutyPayloadSeverity: Optional[constr(max_length=255)] = Field(
        None, description='The payload severity for the Pager Duty service.'
    )
    pagerDutyPayloadSource: Optional[constr(max_length=255)] = Field(
        None, description='The payload source for the Pager Duty service.'
    )
    pagerDutyRoutingKey: constr(max_length=255) = Field(
        ..., description='The routing key for the Pager Duty service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPagerDutyPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pagerDutyApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Pager Duty service. Stored in encrypted format.',
    )
    pagerDutyDedupKey: Optional[constr(max_length=255)] = Field(
        None, description='The dedup key for the Pager Duty service.'
    )
    pagerDutyEventAction: constr(max_length=255) = Field(
        ..., description='The event action for the Pager Duty service.'
    )
    pagerDutyPayloadClass: Optional[constr(max_length=255)] = Field(
        None, description='The payload class for the Pager Duty service.'
    )
    pagerDutyPayloadComponent: Optional[constr(max_length=255)] = Field(
        None, description='The payload component for the Pager Duty service.'
    )
    pagerDutyPayloadGroup: Optional[constr(max_length=255)] = Field(
        None, description='The payload group for the Pager Duty service.'
    )
    pagerDutyPayloadSeverity: Optional[constr(max_length=255)] = Field(
        None, description='The payload severity for the Pager Duty service.'
    )
    pagerDutyPayloadSource: Optional[constr(max_length=255)] = Field(
        None, description='The payload source for the Pager Duty service.'
    )
    pagerDutyRoutingKey: constr(max_length=255) = Field(
        ..., description='The routing key for the Pager Duty service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPagerDutyPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pagerDutyApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Pager Duty service. Stored in encrypted format.',
    )
    pagerDutyDedupKey: Optional[constr(max_length=255)] = Field(
        None, description='The dedup key for the Pager Duty service.'
    )
    pagerDutyEventAction: constr(max_length=255) = Field(
        ..., description='The event action for the Pager Duty service.'
    )
    pagerDutyPayloadClass: Optional[constr(max_length=255)] = Field(
        None, description='The payload class for the Pager Duty service.'
    )
    pagerDutyPayloadComponent: Optional[constr(max_length=255)] = Field(
        None, description='The payload component for the Pager Duty service.'
    )
    pagerDutyPayloadGroup: Optional[constr(max_length=255)] = Field(
        None, description='The payload group for the Pager Duty service.'
    )
    pagerDutyPayloadSeverity: Optional[constr(max_length=255)] = Field(
        None, description='The payload severity for the Pager Duty service.'
    )
    pagerDutyPayloadSource: Optional[constr(max_length=255)] = Field(
        None, description='The payload source for the Pager Duty service.'
    )
    pagerDutyRoutingKey: constr(max_length=255) = Field(
        ..., description='The routing key for the Pager Duty service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext59(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportPagerDutyJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext59]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    pagerDutyApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Pager Duty service. Stored in encrypted format.',
    )
    pagerDutyDedupKey: Optional[constr(max_length=255)] = Field(
        None, description='The dedup key for the Pager Duty service.'
    )
    pagerDutyEventAction: constr(max_length=255) = Field(
        ..., description='The event action for the Pager Duty service.'
    )
    pagerDutyPayloadClass: Optional[constr(max_length=255)] = Field(
        None, description='The payload class for the Pager Duty service.'
    )
    pagerDutyPayloadComponent: Optional[constr(max_length=255)] = Field(
        None, description='The payload component for the Pager Duty service.'
    )
    pagerDutyPayloadGroup: Optional[constr(max_length=255)] = Field(
        None, description='The payload group for the Pager Duty service.'
    )
    pagerDutyPayloadSeverity: Optional[constr(max_length=255)] = Field(
        None, description='The payload severity for the Pager Duty service.'
    )
    pagerDutyPayloadSource: Optional[constr(max_length=255)] = Field(
        None, description='The payload source for the Pager Duty service.'
    )
    pagerDutyRoutingKey: constr(max_length=255) = Field(
        ..., description='The routing key for the Pager Duty service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPagerDutyJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pagerDutyApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Pager Duty service. Stored in encrypted format.',
    )
    pagerDutyDedupKey: Optional[constr(max_length=255)] = Field(
        None, description='The dedup key for the Pager Duty service.'
    )
    pagerDutyEventAction: constr(max_length=255) = Field(
        ..., description='The event action for the Pager Duty service.'
    )
    pagerDutyPayloadClass: Optional[constr(max_length=255)] = Field(
        None, description='The payload class for the Pager Duty service.'
    )
    pagerDutyPayloadComponent: Optional[constr(max_length=255)] = Field(
        None, description='The payload component for the Pager Duty service.'
    )
    pagerDutyPayloadGroup: Optional[constr(max_length=255)] = Field(
        None, description='The payload group for the Pager Duty service.'
    )
    pagerDutyPayloadSeverity: Optional[constr(max_length=255)] = Field(
        None, description='The payload severity for the Pager Duty service.'
    )
    pagerDutyPayloadSource: Optional[constr(max_length=255)] = Field(
        None, description='The payload source for the Pager Duty service.'
    )
    pagerDutyRoutingKey: constr(max_length=255) = Field(
        ..., description='The routing key for the Pager Duty service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPagerDutyJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pagerDutyApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Pager Duty service. Stored in encrypted format.',
    )
    pagerDutyDedupKey: Optional[constr(max_length=255)] = Field(
        None, description='The dedup key for the Pager Duty service.'
    )
    pagerDutyEventAction: constr(max_length=255) = Field(
        ..., description='The event action for the Pager Duty service.'
    )
    pagerDutyPayloadClass: Optional[constr(max_length=255)] = Field(
        None, description='The payload class for the Pager Duty service.'
    )
    pagerDutyPayloadComponent: Optional[constr(max_length=255)] = Field(
        None, description='The payload component for the Pager Duty service.'
    )
    pagerDutyPayloadGroup: Optional[constr(max_length=255)] = Field(
        None, description='The payload group for the Pager Duty service.'
    )
    pagerDutyPayloadSeverity: Optional[constr(max_length=255)] = Field(
        None, description='The payload severity for the Pager Duty service.'
    )
    pagerDutyPayloadSource: Optional[constr(max_length=255)] = Field(
        None, description='The payload source for the Pager Duty service.'
    )
    pagerDutyRoutingKey: constr(max_length=255) = Field(
        ..., description='The routing key for the Pager Duty service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPagerTreeGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    pagerTreeAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Pager Tree service. Stored in encrypted format.',
    )
    pagerTreeAccountUserId: Optional[constr(max_length=255)] = Field(
        None,
        description='The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeRouterId: Optional[constr(max_length=255)] = Field(
        None,
        description='The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeTeamId: Optional[constr(max_length=255)] = Field(
        None,
        description='The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeUrgency: constr(max_length=255) = Field(
        ..., description='The urgency for the Pager Tree service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPagerTreePost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pagerTreeAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Pager Tree service. Stored in encrypted format.',
    )
    pagerTreeAccountUserId: Optional[constr(max_length=255)] = Field(
        None,
        description='The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeRouterId: Optional[constr(max_length=255)] = Field(
        None,
        description='The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeTeamId: Optional[constr(max_length=255)] = Field(
        None,
        description='The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeUrgency: constr(max_length=255) = Field(
        ..., description='The urgency for the Pager Tree service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPagerTreePut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pagerTreeAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Pager Tree service. Stored in encrypted format.',
    )
    pagerTreeAccountUserId: Optional[constr(max_length=255)] = Field(
        None,
        description='The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeRouterId: Optional[constr(max_length=255)] = Field(
        None,
        description='The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeTeamId: Optional[constr(max_length=255)] = Field(
        None,
        description='The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeUrgency: constr(max_length=255) = Field(
        ..., description='The urgency for the Pager Tree service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext60(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportPagerTreeJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext60]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    pagerTreeAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Pager Tree service. Stored in encrypted format.',
    )
    pagerTreeAccountUserId: Optional[constr(max_length=255)] = Field(
        None,
        description='The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeRouterId: Optional[constr(max_length=255)] = Field(
        None,
        description='The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeTeamId: Optional[constr(max_length=255)] = Field(
        None,
        description='The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeUrgency: constr(max_length=255) = Field(
        ..., description='The urgency for the Pager Tree service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPagerTreeJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pagerTreeAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Pager Tree service. Stored in encrypted format.',
    )
    pagerTreeAccountUserId: Optional[constr(max_length=255)] = Field(
        None,
        description='The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeRouterId: Optional[constr(max_length=255)] = Field(
        None,
        description='The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeTeamId: Optional[constr(max_length=255)] = Field(
        None,
        description='The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeUrgency: constr(max_length=255) = Field(
        ..., description='The urgency for the Pager Tree service.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPagerTreeJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pagerTreeAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Pager Tree service. Stored in encrypted format.',
    )
    pagerTreeAccountUserId: Optional[constr(max_length=255)] = Field(
        None,
        description='The account user ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeRouterId: Optional[constr(max_length=255)] = Field(
        None,
        description='The router ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeTeamId: Optional[constr(max_length=255)] = Field(
        None,
        description='The team ID for the Pager Tree service. (Must supply either team ID, router ID or account user ID.)',
    )
    pagerTreeUrgency: constr(max_length=255) = Field(
        ..., description='The urgency for the Pager Tree service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPlivoGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    plivoAuthId: constr(max_length=255) = Field(
        ..., description='The auth ID for the Plivo service.'
    )
    plivoAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Plivo service. Stored in encrypted format.',
    )
    plivoFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Plivo service.'
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPlivoPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    plivoAuthId: constr(max_length=255) = Field(
        ..., description='The auth ID for the Plivo service.'
    )
    plivoAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Plivo service. Stored in encrypted format.',
    )
    plivoFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Plivo service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPlivoPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    plivoAuthId: constr(max_length=255) = Field(
        ..., description='The auth ID for the Plivo service.'
    )
    plivoAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Plivo service. Stored in encrypted format.',
    )
    plivoFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Plivo service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext61(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportPlivoJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext61]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    plivoAuthId: constr(max_length=255) = Field(
        ..., description='The auth ID for the Plivo service.'
    )
    plivoAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Plivo service. Stored in encrypted format.',
    )
    plivoFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Plivo service.'
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPlivoJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    plivoAuthId: constr(max_length=255) = Field(
        ..., description='The auth ID for the Plivo service.'
    )
    plivoAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Plivo service. Stored in encrypted format.',
    )
    plivoFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Plivo service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPlivoJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    plivoAuthId: constr(max_length=255) = Field(
        ..., description='The auth ID for the Plivo service.'
    )
    plivoAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Plivo service. Stored in encrypted format.',
    )
    plivoFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Plivo service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushbulletGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pushbulletAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Pushbullet service. Stored in encrypted format.',
    )
    pushbulletEmail: Optional[EmailStr] = Field(
        None, description='The recipient email for the Pushbullet service.'
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushbulletPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pushbulletAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Pushbullet service. Stored in encrypted format.',
    )
    pushbulletEmail: Optional[EmailStr] = Field(
        None, description='The recipient email for the Pushbullet service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushbulletPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pushbulletAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Pushbullet service. Stored in encrypted format.',
    )
    pushbulletEmail: Optional[EmailStr] = Field(
        None, description='The recipient email for the Pushbullet service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext62(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportPushbulletJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext62]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pushbulletAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Pushbullet service. Stored in encrypted format.',
    )
    pushbulletEmail: Optional[EmailStr] = Field(
        None, description='The recipient email for the Pushbullet service.'
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushbulletJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pushbulletAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Pushbullet service. Stored in encrypted format.',
    )
    pushbulletEmail: Optional[EmailStr] = Field(
        None, description='The recipient email for the Pushbullet service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushbulletJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pushbulletAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Pushbullet service. Stored in encrypted format.',
    )
    pushbulletEmail: Optional[EmailStr] = Field(
        None, description='The recipient email for the Pushbullet service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushoverGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pushoverAppToken: constr(max_length=1000) = Field(
        ...,
        description='The app token for the Pushover service. Stored in encrypted format.',
    )
    pushoverUserKey: constr(max_length=255) = Field(
        ..., description='The user key for the Pushover service.'
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushoverPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pushoverAppToken: constr(max_length=1000) = Field(
        ...,
        description='The app token for the Pushover service. Stored in encrypted format.',
    )
    pushoverUserKey: constr(max_length=255) = Field(
        ..., description='The user key for the Pushover service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushoverPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pushoverAppToken: constr(max_length=1000) = Field(
        ...,
        description='The app token for the Pushover service. Stored in encrypted format.',
    )
    pushoverUserKey: constr(max_length=255) = Field(
        ..., description='The user key for the Pushover service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext63(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportPushoverJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext63]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pushoverAppToken: constr(max_length=1000) = Field(
        ...,
        description='The app token for the Pushover service. Stored in encrypted format.',
    )
    pushoverUserKey: constr(max_length=255) = Field(
        ..., description='The user key for the Pushover service.'
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushoverJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pushoverAppToken: constr(max_length=1000) = Field(
        ...,
        description='The app token for the Pushover service. Stored in encrypted format.',
    )
    pushoverUserKey: constr(max_length=255) = Field(
        ..., description='The user key for the Pushover service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushoverJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pushoverAppToken: constr(max_length=1000) = Field(
        ...,
        description='The app token for the Pushover service. Stored in encrypted format.',
    )
    pushoverUserKey: constr(max_length=255) = Field(
        ..., description='The user key for the Pushover service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushyGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pushyApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Pushy service. Stored in encrypted format.',
    )
    pushyTo: constr(max_length=255) = Field(
        ..., description='The recipient ID for the Pushy service.'
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushyPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pushyApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Pushy service. Stored in encrypted format.',
    )
    pushyTo: constr(max_length=255) = Field(
        ..., description='The recipient ID for the Pushy service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushyPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pushyApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Pushy service. Stored in encrypted format.',
    )
    pushyTo: constr(max_length=255) = Field(
        ..., description='The recipient ID for the Pushy service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext64(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportPushyJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext64]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pushyApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Pushy service. Stored in encrypted format.',
    )
    pushyTo: constr(max_length=255) = Field(
        ..., description='The recipient ID for the Pushy service.'
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushyJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    pushyApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Pushy service. Stored in encrypted format.',
    )
    pushyTo: constr(max_length=255) = Field(
        ..., description='The recipient ID for the Pushy service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportPushyJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    pushyApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Pushy service. Stored in encrypted format.',
    )
    pushyTo: constr(max_length=255) = Field(
        ..., description='The recipient ID for the Pushy service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportRingCentralGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    ringCentralApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Ring Central service. Stored in encrypted format.',
    )
    ringCentralFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Ring Central service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportRingCentralPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    ringCentralApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Ring Central service. Stored in encrypted format.',
    )
    ringCentralFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Ring Central service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportRingCentralPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    ringCentralApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Ring Central service. Stored in encrypted format.',
    )
    ringCentralFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Ring Central service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext65(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportRingCentralJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext65]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    ringCentralApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Ring Central service. Stored in encrypted format.',
    )
    ringCentralFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Ring Central service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportRingCentralJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    ringCentralApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Ring Central service. Stored in encrypted format.',
    )
    ringCentralFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Ring Central service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportRingCentralJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    ringCentralApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Ring Central service. Stored in encrypted format.',
    )
    ringCentralFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Ring Central service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportRocketChatGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    rocketChatChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Rocket Chat service.'
    )
    rocketChatToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Rocket Chat service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportRocketChatPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    rocketChatChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Rocket Chat service.'
    )
    rocketChatToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Rocket Chat service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportRocketChatPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    rocketChatChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Rocket Chat service.'
    )
    rocketChatToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Rocket Chat service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext66(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportRocketChatJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext66]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    rocketChatChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Rocket Chat service.'
    )
    rocketChatToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Rocket Chat service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportRocketChatJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    rocketChatChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Rocket Chat service.'
    )
    rocketChatToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Rocket Chat service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportRocketChatJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    rocketChatChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Rocket Chat service.'
    )
    rocketChatToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Rocket Chat service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSendberryGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    sendberryAuthKey: constr(max_length=255) = Field(
        ..., description='The auth key for the Sendberry service.'
    )
    sendberryFrom: constr(max_length=255) = Field(
        ..., description='The sender name or phone number for the Sendberry service.'
    )
    sendberryPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Sendberry service. Stored in encrypted format.',
    )
    sendberryUsername: constr(max_length=255) = Field(
        ..., description='The username for the Sendberry service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSendberryPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    sendberryAuthKey: constr(max_length=255) = Field(
        ..., description='The auth key for the Sendberry service.'
    )
    sendberryFrom: constr(max_length=255) = Field(
        ..., description='The sender name or phone number for the Sendberry service.'
    )
    sendberryPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Sendberry service. Stored in encrypted format.',
    )
    sendberryUsername: constr(max_length=255) = Field(
        ..., description='The username for the Sendberry service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSendberryPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    sendberryAuthKey: constr(max_length=255) = Field(
        ..., description='The auth key for the Sendberry service.'
    )
    sendberryFrom: constr(max_length=255) = Field(
        ..., description='The sender name or phone number for the Sendberry service.'
    )
    sendberryPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Sendberry service. Stored in encrypted format.',
    )
    sendberryUsername: constr(max_length=255) = Field(
        ..., description='The username for the Sendberry service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext67(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportSendberryJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext67]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    sendberryAuthKey: constr(max_length=255) = Field(
        ..., description='The auth key for the Sendberry service.'
    )
    sendberryFrom: constr(max_length=255) = Field(
        ..., description='The sender name or phone number for the Sendberry service.'
    )
    sendberryPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Sendberry service. Stored in encrypted format.',
    )
    sendberryUsername: constr(max_length=255) = Field(
        ..., description='The username for the Sendberry service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSendberryJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    sendberryAuthKey: constr(max_length=255) = Field(
        ..., description='The auth key for the Sendberry service.'
    )
    sendberryFrom: constr(max_length=255) = Field(
        ..., description='The sender name or phone number for the Sendberry service.'
    )
    sendberryPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Sendberry service. Stored in encrypted format.',
    )
    sendberryUsername: constr(max_length=255) = Field(
        ..., description='The username for the Sendberry service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSendberryJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    sendberryAuthKey: constr(max_length=255) = Field(
        ..., description='The auth key for the Sendberry service.'
    )
    sendberryFrom: constr(max_length=255) = Field(
        ..., description='The sender name or phone number for the Sendberry service.'
    )
    sendberryPassword: constr(max_length=1000) = Field(
        ...,
        description='The password for the Sendberry service. Stored in encrypted format.',
    )
    sendberryUsername: constr(max_length=255) = Field(
        ..., description='The username for the Sendberry service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSendinblueGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    sendinblueApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Sendinblue service. Stored in encrypted format.',
    )
    sendinblueSenderPhone: constr(max_length=255) = Field(
        ..., description='The sender phone number for the Sendinblue service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSendinbluePost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    sendinblueApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Sendinblue service. Stored in encrypted format.',
    )
    sendinblueSenderPhone: constr(max_length=255) = Field(
        ..., description='The sender phone number for the Sendinblue service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSendinbluePut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    sendinblueApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Sendinblue service. Stored in encrypted format.',
    )
    sendinblueSenderPhone: constr(max_length=255) = Field(
        ..., description='The sender phone number for the Sendinblue service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext68(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportSendinblueJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext68]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    sendinblueApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Sendinblue service. Stored in encrypted format.',
    )
    sendinblueSenderPhone: constr(max_length=255) = Field(
        ..., description='The sender phone number for the Sendinblue service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSendinblueJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    sendinblueApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Sendinblue service. Stored in encrypted format.',
    )
    sendinblueSenderPhone: constr(max_length=255) = Field(
        ..., description='The sender phone number for the Sendinblue service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSendinblueJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    sendinblueApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Sendinblue service. Stored in encrypted format.',
    )
    sendinblueSenderPhone: constr(max_length=255) = Field(
        ..., description='The sender phone number for the Sendinblue service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSimpleTextinGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    simpleTextinApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the SimpleTextin service. Stored in encrypted format.',
    )
    simpleTextinFrom: Optional[constr(max_length=255)] = Field(
        None, description='The from value for the SimpleTextin service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSimpleTextinPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    simpleTextinApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the SimpleTextin service. Stored in encrypted format.',
    )
    simpleTextinFrom: Optional[constr(max_length=255)] = Field(
        None, description='The from value for the SimpleTextin service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSimpleTextinPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    simpleTextinApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the SimpleTextin service. Stored in encrypted format.',
    )
    simpleTextinFrom: Optional[constr(max_length=255)] = Field(
        None, description='The from value for the SimpleTextin service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext69(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportSimpleTextinJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext69]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    simpleTextinApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the SimpleTextin service. Stored in encrypted format.',
    )
    simpleTextinFrom: Optional[constr(max_length=255)] = Field(
        None, description='The from value for the SimpleTextin service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSimpleTextinJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    simpleTextinApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the SimpleTextin service. Stored in encrypted format.',
    )
    simpleTextinFrom: Optional[constr(max_length=255)] = Field(
        None, description='The from value for the SimpleTextin service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSimpleTextinJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    simpleTextinApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the SimpleTextin service. Stored in encrypted format.',
    )
    simpleTextinFrom: Optional[constr(max_length=255)] = Field(
        None, description='The from value for the SimpleTextin service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSinchGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    sinchAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Sinch service. Stored in encrypted format.',
    )
    sinchFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Sinch service.'
    )
    sinchServicePlanId: constr(max_length=255) = Field(
        ..., description='The service plan ID for the Sinch service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSinchPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    sinchAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Sinch service. Stored in encrypted format.',
    )
    sinchFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Sinch service.'
    )
    sinchServicePlanId: constr(max_length=255) = Field(
        ..., description='The service plan ID for the Sinch service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSinchPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    sinchAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Sinch service. Stored in encrypted format.',
    )
    sinchFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Sinch service.'
    )
    sinchServicePlanId: constr(max_length=255) = Field(
        ..., description='The service plan ID for the Sinch service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext70(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportSinchJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext70]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    sinchAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Sinch service. Stored in encrypted format.',
    )
    sinchFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Sinch service.'
    )
    sinchServicePlanId: constr(max_length=255) = Field(
        ..., description='The service plan ID for the Sinch service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSinchJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    sinchAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Sinch service. Stored in encrypted format.',
    )
    sinchFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Sinch service.'
    )
    sinchServicePlanId: constr(max_length=255) = Field(
        ..., description='The service plan ID for the Sinch service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSinchJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    sinchAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the Sinch service. Stored in encrypted format.',
    )
    sinchFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Sinch service.'
    )
    sinchServicePlanId: constr(max_length=255) = Field(
        ..., description='The service plan ID for the Sinch service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSlackGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    slackChannel: constr(max_length=255) = Field(
        ...,
        description='The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.',
    )
    slackToken: constr(max_length=1000) = Field(
        ..., description='The token for the Slack service. Stored in encrypted format.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSlackPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    slackChannel: constr(max_length=255) = Field(
        ...,
        description='The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.',
    )
    slackToken: constr(max_length=1000) = Field(
        ..., description='The token for the Slack service. Stored in encrypted format.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSlackPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    slackChannel: constr(max_length=255) = Field(
        ...,
        description='The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.',
    )
    slackToken: constr(max_length=1000) = Field(
        ..., description='The token for the Slack service. Stored in encrypted format.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext71(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportSlackJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext71]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    slackChannel: constr(max_length=255) = Field(
        ...,
        description='The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.',
    )
    slackToken: constr(max_length=1000) = Field(
        ..., description='The token for the Slack service. Stored in encrypted format.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSlackJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    slackChannel: constr(max_length=255) = Field(
        ...,
        description='The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.',
    )
    slackToken: constr(max_length=1000) = Field(
        ..., description='The token for the Slack service. Stored in encrypted format.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSlackJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    slackChannel: constr(max_length=255) = Field(
        ...,
        description='The channel (channel, private group, or IM channel to send message to, it can be an encoded ID, or a name) for the Slack service.',
    )
    slackToken: constr(max_length=1000) = Field(
        ..., description='The token for the Slack service. Stored in encrypted format.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSms77Get(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    sms77ApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Sms77 service. Stored in encrypted format.',
    )
    sms77From: Optional[constr(max_length=255)] = Field(
        None, description='The optional sender for the Sms77 service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSms77Post(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    sms77ApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Sms77 service. Stored in encrypted format.',
    )
    sms77From: Optional[constr(max_length=255)] = Field(
        None, description='The optional sender for the Sms77 service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSms77Put(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    sms77ApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Sms77 service. Stored in encrypted format.',
    )
    sms77From: Optional[constr(max_length=255)] = Field(
        None, description='The optional sender for the Sms77 service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext72(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportSms77JsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext72]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    sms77ApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Sms77 service. Stored in encrypted format.',
    )
    sms77From: Optional[constr(max_length=255)] = Field(
        None, description='The optional sender for the Sms77 service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSms77JsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    sms77ApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Sms77 service. Stored in encrypted format.',
    )
    sms77From: Optional[constr(max_length=255)] = Field(
        None, description='The optional sender for the Sms77 service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSms77JsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    sms77ApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Sms77 service. Stored in encrypted format.',
    )
    sms77From: Optional[constr(max_length=255)] = Field(
        None, description='The optional sender for the Sms77 service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsBiurasGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    smsBiurasApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the SMSBIURAS service. Stored in encrypted format.',
    )
    smsBiurasFrom: constr(max_length=255) = Field(
        ..., description='The sender for the SMSBIURAS service.'
    )
    smsBiurasUid: constr(max_length=255) = Field(
        ..., description='The client code for the SMSBIURAS service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsBiurasPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    smsBiurasApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the SMSBIURAS service. Stored in encrypted format.',
    )
    smsBiurasFrom: constr(max_length=255) = Field(
        ..., description='The sender for the SMSBIURAS service.'
    )
    smsBiurasUid: constr(max_length=255) = Field(
        ..., description='The client code for the SMSBIURAS service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsBiurasPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    smsBiurasApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the SMSBIURAS service. Stored in encrypted format.',
    )
    smsBiurasFrom: constr(max_length=255) = Field(
        ..., description='The sender for the SMSBIURAS service.'
    )
    smsBiurasUid: constr(max_length=255) = Field(
        ..., description='The client code for the SMSBIURAS service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext73(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportSmsBiurasJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext73]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    smsBiurasApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the SMSBIURAS service. Stored in encrypted format.',
    )
    smsBiurasFrom: constr(max_length=255) = Field(
        ..., description='The sender for the SMSBIURAS service.'
    )
    smsBiurasUid: constr(max_length=255) = Field(
        ..., description='The client code for the SMSBIURAS service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsBiurasJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    smsBiurasApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the SMSBIURAS service. Stored in encrypted format.',
    )
    smsBiurasFrom: constr(max_length=255) = Field(
        ..., description='The sender for the SMSBIURAS service.'
    )
    smsBiurasUid: constr(max_length=255) = Field(
        ..., description='The client code for the SMSBIURAS service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsBiurasJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    smsBiurasApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the SMSBIURAS service. Stored in encrypted format.',
    )
    smsBiurasFrom: constr(max_length=255) = Field(
        ..., description='The sender for the SMSBIURAS service.'
    )
    smsBiurasUid: constr(max_length=255) = Field(
        ..., description='The client code for the SMSBIURAS service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsFactorGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    smsFactorPushType: constr(max_length=255) = Field(
        ..., description='The push type for the SMSFactor service.'
    )
    smsFactorSender: constr(max_length=255) = Field(
        ..., description='The sender value for the SMSFactor service.'
    )
    smsFactorToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the SMSFactor service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsFactorPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    smsFactorPushType: constr(max_length=255) = Field(
        ..., description='The push type for the SMSFactor service.'
    )
    smsFactorSender: constr(max_length=255) = Field(
        ..., description='The sender value for the SMSFactor service.'
    )
    smsFactorToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the SMSFactor service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsFactorPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    smsFactorPushType: constr(max_length=255) = Field(
        ..., description='The push type for the SMSFactor service.'
    )
    smsFactorSender: constr(max_length=255) = Field(
        ..., description='The sender value for the SMSFactor service.'
    )
    smsFactorToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the SMSFactor service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext74(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportSmsFactorJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext74]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    smsFactorPushType: constr(max_length=255) = Field(
        ..., description='The push type for the SMSFactor service.'
    )
    smsFactorSender: constr(max_length=255) = Field(
        ..., description='The sender value for the SMSFactor service.'
    )
    smsFactorToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the SMSFactor service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsFactorJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    smsFactorPushType: constr(max_length=255) = Field(
        ..., description='The push type for the SMSFactor service.'
    )
    smsFactorSender: constr(max_length=255) = Field(
        ..., description='The sender value for the SMSFactor service.'
    )
    smsFactorToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the SMSFactor service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsFactorJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    smsFactorPushType: constr(max_length=255) = Field(
        ..., description='The push type for the SMSFactor service.'
    )
    smsFactorSender: constr(max_length=255) = Field(
        ..., description='The sender value for the SMSFactor service.'
    )
    smsFactorToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the SMSFactor service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsapiGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    smsapiFrom: constr(max_length=255) = Field(
        ..., description='The sender name for the SMS API service.'
    )
    smsapiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the SMS API service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsapiPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    smsapiFrom: constr(max_length=255) = Field(
        ..., description='The sender name for the SMS API service.'
    )
    smsapiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the SMS API service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsapiPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    smsapiFrom: constr(max_length=255) = Field(
        ..., description='The sender name for the SMS API service.'
    )
    smsapiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the SMS API service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext75(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportSmsapiJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext75]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    smsapiFrom: constr(max_length=255) = Field(
        ..., description='The sender name for the SMS API service.'
    )
    smsapiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the SMS API service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsapiJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    smsapiFrom: constr(max_length=255) = Field(
        ..., description='The sender name for the SMS API service.'
    )
    smsapiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the SMS API service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsapiJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    smsapiFrom: constr(max_length=255) = Field(
        ..., description='The sender name for the SMS API service.'
    )
    smsapiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the SMS API service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmscGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    smscFrom: constr(max_length=255) = Field(
        ...,
        description='The sender (NB: text identity, not a phone number) for the Smsc service.',
    )
    smscLogin: constr(max_length=255) = Field(
        ..., description='The login for the Smsc service.'
    )
    smscPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the Smsc service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmscPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    smscFrom: constr(max_length=255) = Field(
        ...,
        description='The sender (NB: text identity, not a phone number) for the Smsc service.',
    )
    smscLogin: constr(max_length=255) = Field(
        ..., description='The login for the Smsc service.'
    )
    smscPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the Smsc service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmscPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    smscFrom: constr(max_length=255) = Field(
        ...,
        description='The sender (NB: text identity, not a phone number) for the Smsc service.',
    )
    smscLogin: constr(max_length=255) = Field(
        ..., description='The login for the Smsc service.'
    )
    smscPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the Smsc service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext76(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportSmscJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext76]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    smscFrom: constr(max_length=255) = Field(
        ...,
        description='The sender (NB: text identity, not a phone number) for the Smsc service.',
    )
    smscLogin: constr(max_length=255) = Field(
        ..., description='The login for the Smsc service.'
    )
    smscPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the Smsc service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmscJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    smscFrom: constr(max_length=255) = Field(
        ...,
        description='The sender (NB: text identity, not a phone number) for the Smsc service.',
    )
    smscLogin: constr(max_length=255) = Field(
        ..., description='The login for the Smsc service.'
    )
    smscPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the Smsc service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmscJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    smscFrom: constr(max_length=255) = Field(
        ...,
        description='The sender (NB: text identity, not a phone number) for the Smsc service.',
    )
    smscLogin: constr(max_length=255) = Field(
        ..., description='The login for the Smsc service.'
    )
    smscPassword: constr(max_length=1000) = Field(
        ...,
        description='The API password for the Smsc service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsmodeGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    smsmodeApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Smsmode service. Stored in encrypted format.',
    )
    smsmodeFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Smsmode service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsmodePost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    smsmodeApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Smsmode service. Stored in encrypted format.',
    )
    smsmodeFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Smsmode service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsmodePut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    smsmodeApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Smsmode service. Stored in encrypted format.',
    )
    smsmodeFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Smsmode service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext77(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportSmsmodeJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext77]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    smsmodeApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Smsmode service. Stored in encrypted format.',
    )
    smsmodeFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Smsmode service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsmodeJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    smsmodeApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Smsmode service. Stored in encrypted format.',
    )
    smsmodeFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Smsmode service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSmsmodeJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    smsmodeApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Smsmode service. Stored in encrypted format.',
    )
    smsmodeFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Smsmode service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSpotHitGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    spotHitFrom: constr(max_length=255) = Field(
        ...,
        description='The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.',
    )
    spotHitToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Spot-Hit service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSpotHitPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    spotHitFrom: constr(max_length=255) = Field(
        ...,
        description='The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.',
    )
    spotHitToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Spot-Hit service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSpotHitPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    spotHitFrom: constr(max_length=255) = Field(
        ...,
        description='The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.',
    )
    spotHitToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Spot-Hit service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext78(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportSpotHitJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext78]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    spotHitFrom: constr(max_length=255) = Field(
        ...,
        description='The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.',
    )
    spotHitToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Spot-Hit service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSpotHitJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    spotHitFrom: constr(max_length=255) = Field(
        ...,
        description='The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.',
    )
    spotHitToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Spot-Hit service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportSpotHitJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    spotHitFrom: constr(max_length=255) = Field(
        ...,
        description='The sender (3-11 letters, default is a 5 digits phone number) for the Spot-Hit service.',
    )
    spotHitToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Spot-Hit service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTelegramGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    telegramChatId: constr(max_length=255) = Field(
        ..., description='The chat ID for the Telegram service.'
    )
    telegramToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Telegram service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTelegramPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    telegramChatId: constr(max_length=255) = Field(
        ..., description='The chat ID for the Telegram service.'
    )
    telegramToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Telegram service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTelegramPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    telegramChatId: constr(max_length=255) = Field(
        ..., description='The chat ID for the Telegram service.'
    )
    telegramToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Telegram service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext79(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportTelegramJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext79]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    telegramChatId: constr(max_length=255) = Field(
        ..., description='The chat ID for the Telegram service.'
    )
    telegramToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Telegram service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTelegramJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    telegramChatId: constr(max_length=255) = Field(
        ..., description='The chat ID for the Telegram service.'
    )
    telegramToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Telegram service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTelegramJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    telegramChatId: constr(max_length=255) = Field(
        ..., description='The chat ID for the Telegram service.'
    )
    telegramToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Telegram service. Stored in encrypted format.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTelnyxGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    telnyxApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Telnyx service. Stored in encrypted format.',
    )
    telnyxFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Telnyx service.'
    )
    telnyxMessagingProfileId: constr(max_length=255) = Field(
        ...,
        description='The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTelnyxPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    telnyxApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Telnyx service. Stored in encrypted format.',
    )
    telnyxFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Telnyx service.'
    )
    telnyxMessagingProfileId: constr(max_length=255) = Field(
        ...,
        description='The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTelnyxPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    telnyxApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Telnyx service. Stored in encrypted format.',
    )
    telnyxFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Telnyx service.'
    )
    telnyxMessagingProfileId: constr(max_length=255) = Field(
        ...,
        description='The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext80(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportTelnyxJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext80]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    telnyxApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Telnyx service. Stored in encrypted format.',
    )
    telnyxFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Telnyx service.'
    )
    telnyxMessagingProfileId: constr(max_length=255) = Field(
        ...,
        description='The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTelnyxJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    telnyxApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Telnyx service. Stored in encrypted format.',
    )
    telnyxFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Telnyx service.'
    )
    telnyxMessagingProfileId: constr(max_length=255) = Field(
        ...,
        description='The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTelnyxJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    telnyxApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Telnyx service. Stored in encrypted format.',
    )
    telnyxFrom: constr(max_length=255) = Field(
        ..., description='The from value for the Telnyx service.'
    )
    telnyxMessagingProfileId: constr(max_length=255) = Field(
        ...,
        description='The messaging profile ID (You need this in order to show a name to the recipient instead of just the phone number) for the Telnyx service.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTermiiGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    termiiApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Termii service. Stored in encrypted format.',
    )
    termiiChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Termii service.'
    )
    termiiFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Termii service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTermiiPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    termiiApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Termii service. Stored in encrypted format.',
    )
    termiiChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Termii service.'
    )
    termiiFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Termii service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTermiiPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    termiiApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Termii service. Stored in encrypted format.',
    )
    termiiChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Termii service.'
    )
    termiiFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Termii service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class FieldContext81(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportTermiiJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext81]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    termiiApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Termii service. Stored in encrypted format.',
    )
    termiiChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Termii service.'
    )
    termiiFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Termii service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTermiiJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    termiiApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Termii service. Stored in encrypted format.',
    )
    termiiChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Termii service.'
    )
    termiiFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Termii service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTermiiJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    termiiApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Termii service. Stored in encrypted format.',
    )
    termiiChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Termii service.'
    )
    termiiFrom: constr(max_length=255) = Field(
        ..., description='The sender value for the Termii service.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )


class TransportTrelloGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    trelloApiKey: constr(max_length=255) = Field(
        ..., description='The API key for the Trello service.'
    )
    trelloApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Trello service. Stored in encrypted format.',
    )
    trelloListId: constr(max_length=255) = Field(
        ..., description='The list ID for the Trello service.'
    )


class TransportTrelloPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    trelloApiKey: constr(max_length=255) = Field(
        ..., description='The API key for the Trello service.'
    )
    trelloApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Trello service. Stored in encrypted format.',
    )
    trelloListId: constr(max_length=255) = Field(
        ..., description='The list ID for the Trello service.'
    )


class TransportTrelloPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    trelloApiKey: constr(max_length=255) = Field(
        ..., description='The API key for the Trello service.'
    )
    trelloApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Trello service. Stored in encrypted format.',
    )
    trelloListId: constr(max_length=255) = Field(
        ..., description='The list ID for the Trello service.'
    )


class FieldContext82(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportTrelloJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext82]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    trelloApiKey: constr(max_length=255) = Field(
        ..., description='The API key for the Trello service.'
    )
    trelloApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Trello service. Stored in encrypted format.',
    )
    trelloListId: constr(max_length=255) = Field(
        ..., description='The list ID for the Trello service.'
    )


class TransportTrelloJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    trelloApiKey: constr(max_length=255) = Field(
        ..., description='The API key for the Trello service.'
    )
    trelloApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Trello service. Stored in encrypted format.',
    )
    trelloListId: constr(max_length=255) = Field(
        ..., description='The list ID for the Trello service.'
    )


class TransportTrelloJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    trelloApiKey: constr(max_length=255) = Field(
        ..., description='The API key for the Trello service.'
    )
    trelloApiToken: constr(max_length=1000) = Field(
        ...,
        description='The API token for the Trello service. Stored in encrypted format.',
    )
    trelloListId: constr(max_length=255) = Field(
        ..., description='The list ID for the Trello service.'
    )


class TransportTurboSmsGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    turboSmsAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the TurboSms service. Stored in encrypted format.',
    )
    turboSmsFrom: constr(max_length=255) = Field(
        ...,
        description='The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.',
    )


class TransportTurboSmsPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    turboSmsAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the TurboSms service. Stored in encrypted format.',
    )
    turboSmsFrom: constr(max_length=255) = Field(
        ...,
        description='The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.',
    )


class TransportTurboSmsPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    turboSmsAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the TurboSms service. Stored in encrypted format.',
    )
    turboSmsFrom: constr(max_length=255) = Field(
        ...,
        description='The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.',
    )


class FieldContext83(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportTurboSmsJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext83]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    turboSmsAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the TurboSms service. Stored in encrypted format.',
    )
    turboSmsFrom: constr(max_length=255) = Field(
        ...,
        description='The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.',
    )


class TransportTurboSmsJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    turboSmsAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the TurboSms service. Stored in encrypted format.',
    )
    turboSmsFrom: constr(max_length=255) = Field(
        ...,
        description='The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.',
    )


class TransportTurboSmsJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    turboSmsAuthToken: constr(max_length=1000) = Field(
        ...,
        description='The auth token for the TurboSms service. Stored in encrypted format.',
    )
    turboSmsFrom: constr(max_length=255) = Field(
        ...,
        description='The sender name (should be alphanumeric, max 20 characters and activated in your TurboSms account) for the TurboSms service.',
    )


class TransportTwilioGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    twilioFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Twilio service.'
    )
    twilioSid: constr(max_length=255) = Field(
        ..., description='The SID for the Twilio service.'
    )
    twilioToken: constr(max_length=1000) = Field(
        ..., description='The token for the Twilio service. Stored in encrypted format.'
    )


class TransportTwilioPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    twilioFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Twilio service.'
    )
    twilioSid: constr(max_length=255) = Field(
        ..., description='The SID for the Twilio service.'
    )
    twilioToken: constr(max_length=1000) = Field(
        ..., description='The token for the Twilio service. Stored in encrypted format.'
    )


class TransportTwilioPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    twilioFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Twilio service.'
    )
    twilioSid: constr(max_length=255) = Field(
        ..., description='The SID for the Twilio service.'
    )
    twilioToken: constr(max_length=1000) = Field(
        ..., description='The token for the Twilio service. Stored in encrypted format.'
    )


class FieldContext84(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportTwilioJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext84]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    twilioFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Twilio service.'
    )
    twilioSid: constr(max_length=255) = Field(
        ..., description='The SID for the Twilio service.'
    )
    twilioToken: constr(max_length=1000) = Field(
        ..., description='The token for the Twilio service. Stored in encrypted format.'
    )


class TransportTwilioJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    twilioFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Twilio service.'
    )
    twilioSid: constr(max_length=255) = Field(
        ..., description='The SID for the Twilio service.'
    )
    twilioToken: constr(max_length=1000) = Field(
        ..., description='The token for the Twilio service. Stored in encrypted format.'
    )


class TransportTwilioJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    twilioFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Twilio service.'
    )
    twilioSid: constr(max_length=255) = Field(
        ..., description='The SID for the Twilio service.'
    )
    twilioToken: constr(max_length=1000) = Field(
        ..., description='The token for the Twilio service. Stored in encrypted format.'
    )


class TransportTwitterGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    twitterAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Twitter service. Stored in encrypted format.',
    )


class TransportTwitterPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    twitterAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Twitter service. Stored in encrypted format.',
    )


class TransportTwitterPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    twitterAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Twitter service. Stored in encrypted format.',
    )


class FieldContext85(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportTwitterJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext85]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    twitterAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Twitter service. Stored in encrypted format.',
    )


class TransportTwitterJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    twitterAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Twitter service. Stored in encrypted format.',
    )


class TransportTwitterJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    twitterAccessToken: constr(max_length=1000) = Field(
        ...,
        description='The access token for the Twitter service. Stored in encrypted format.',
    )


class TransportVonageGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    vonageFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Vonage service.'
    )
    vonageKey: constr(max_length=255) = Field(
        ..., description='The key for the Vonage service.'
    )
    vonageSecret: constr(max_length=1000) = Field(
        ...,
        description='The secret for the Vonage service. Stored in encrypted format.',
    )


class TransportVonagePost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    vonageFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Vonage service.'
    )
    vonageKey: constr(max_length=255) = Field(
        ..., description='The key for the Vonage service.'
    )
    vonageSecret: constr(max_length=1000) = Field(
        ...,
        description='The secret for the Vonage service. Stored in encrypted format.',
    )


class TransportVonagePut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    vonageFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Vonage service.'
    )
    vonageKey: constr(max_length=255) = Field(
        ..., description='The key for the Vonage service.'
    )
    vonageSecret: constr(max_length=1000) = Field(
        ...,
        description='The secret for the Vonage service. Stored in encrypted format.',
    )


class FieldContext86(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportVonageJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext86]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    vonageFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Vonage service.'
    )
    vonageKey: constr(max_length=255) = Field(
        ..., description='The key for the Vonage service.'
    )
    vonageSecret: constr(max_length=1000) = Field(
        ...,
        description='The secret for the Vonage service. Stored in encrypted format.',
    )


class TransportVonageJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    vonageFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Vonage service.'
    )
    vonageKey: constr(max_length=255) = Field(
        ..., description='The key for the Vonage service.'
    )
    vonageSecret: constr(max_length=1000) = Field(
        ...,
        description='The secret for the Vonage service. Stored in encrypted format.',
    )


class TransportVonageJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    vonageFrom: constr(max_length=255) = Field(
        ..., description='The sender for the Vonage service.'
    )
    vonageKey: constr(max_length=255) = Field(
        ..., description='The key for the Vonage service.'
    )
    vonageSecret: constr(max_length=1000) = Field(
        ...,
        description='The secret for the Vonage service. Stored in encrypted format.',
    )


class TransportWebhookGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    httpMethodCode: str = Field(
        ..., description='The HTTP request method that must be used.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mustBeEncryptedValue: Optional[constr(max_length=1000)] = Field(
        None,
        description='An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    webhookHeaders: Optional[List[str]] = Field(
        None,
        description='The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.',
    )
    webhookUrl: AnyUrl = Field(..., description='The URL for the Webhook service.')


class TransportWebhookPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    httpMethodCode: str = Field(
        ..., description='The HTTP request method that must be used.'
    )
    mustBeEncryptedValue: Optional[constr(max_length=1000)] = Field(
        None,
        description='An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    webhookHeaders: Optional[List[str]] = Field(
        None,
        description='The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.',
    )
    webhookUrl: AnyUrl = Field(..., description='The URL for the Webhook service.')


class TransportWebhookPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    httpMethodCode: str = Field(
        ..., description='The HTTP request method that must be used.'
    )
    mustBeEncryptedValue: Optional[constr(max_length=1000)] = Field(
        None,
        description='An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    webhookHeaders: Optional[List[str]] = Field(
        None,
        description='The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.',
    )
    webhookUrl: AnyUrl = Field(..., description='The URL for the Webhook service.')


class FieldContext87(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportWebhookJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext87]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    httpMethodCode: str = Field(
        ..., description='The HTTP request method that must be used.'
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    mustBeEncryptedValue: Optional[constr(max_length=1000)] = Field(
        None,
        description='An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    webhookHeaders: Optional[List[str]] = Field(
        None,
        description='The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.',
    )
    webhookUrl: AnyUrl = Field(..., description='The URL for the Webhook service.')


class TransportWebhookJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    httpMethodCode: str = Field(
        ..., description='The HTTP request method that must be used.'
    )
    mustBeEncryptedValue: Optional[constr(max_length=1000)] = Field(
        None,
        description='An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    webhookHeaders: Optional[List[str]] = Field(
        None,
        description='The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.',
    )
    webhookUrl: AnyUrl = Field(..., description='The URL for the Webhook service.')


class TransportWebhookJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    httpMethodCode: str = Field(
        ..., description='The HTTP request method that must be used.'
    )
    mustBeEncryptedValue: Optional[constr(max_length=1000)] = Field(
        None,
        description='An optional and arbitrary secret value that must be stored in encrypted format, such as an access token. In the webhookUrl and/or webhookHeaders fields, use the special ENCRYPTED_VALUE placeholder (must be uppercase), which we will replace with the decrypted secret value when using the transport.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    webhookHeaders: Optional[List[str]] = Field(
        None,
        description='The HTTP request headers, if any, for the Webhook service. To use the encrypted value:  E.g., Authorization: Bearer ENCRYPTED_VALUE.',
    )
    webhookUrl: AnyUrl = Field(..., description='The URL for the Webhook service.')


class TransportYunpianGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    yunpianApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Yunpian service. Stored in encrypted format.',
    )


class TransportYunpianPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    yunpianApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Yunpian service. Stored in encrypted format.',
    )


class TransportYunpianPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    yunpianApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Yunpian service. Stored in encrypted format.',
    )


class FieldContext88(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportYunpianJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext88]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    yunpianApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Yunpian service. Stored in encrypted format.',
    )


class TransportYunpianJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    yunpianApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Yunpian service. Stored in encrypted format.',
    )


class TransportYunpianJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    yunpianApiKey: constr(max_length=1000) = Field(
        ...,
        description='The API key for the Yunpian service. Stored in encrypted format.',
    )


class TransportZendeskGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    zendeskEmail: EmailStr = Field(
        ..., description='The login email address for the Zendesk service.'
    )
    zendeskHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ..., description='The host name for the Zendesk service (domain.zendesk.com).'
    )
    zendeskToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Zendesk service. Stored in encrypted format.',
    )


class TransportZendeskPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    zendeskEmail: EmailStr = Field(
        ..., description='The login email address for the Zendesk service.'
    )
    zendeskHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ..., description='The host name for the Zendesk service (domain.zendesk.com).'
    )
    zendeskToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Zendesk service. Stored in encrypted format.',
    )


class TransportZendeskPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    zendeskEmail: EmailStr = Field(
        ..., description='The login email address for the Zendesk service.'
    )
    zendeskHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ..., description='The host name for the Zendesk service (domain.zendesk.com).'
    )
    zendeskToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Zendesk service. Stored in encrypted format.',
    )


class FieldContext89(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportZendeskJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext89]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    zendeskEmail: EmailStr = Field(
        ..., description='The login email address for the Zendesk service.'
    )
    zendeskHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ..., description='The host name for the Zendesk service (domain.zendesk.com).'
    )
    zendeskToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Zendesk service. Stored in encrypted format.',
    )


class TransportZendeskJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    zendeskEmail: EmailStr = Field(
        ..., description='The login email address for the Zendesk service.'
    )
    zendeskHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ..., description='The host name for the Zendesk service (domain.zendesk.com).'
    )
    zendeskToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Zendesk service. Stored in encrypted format.',
    )


class TransportZendeskJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    zendeskEmail: EmailStr = Field(
        ..., description='The login email address for the Zendesk service.'
    )
    zendeskHost: constr(
        pattern=r'^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])$'
    ) = Field(
        ..., description='The host name for the Zendesk service (domain.zendesk.com).'
    )
    zendeskToken: constr(max_length=1000) = Field(
        ...,
        description='The token for the Zendesk service. Stored in encrypted format.',
    )


class TransportZulipGet(BaseModel):
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    zulipChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Zulip service.'
    )
    zulipEmail: constr(max_length=255) = Field(
        ..., description='The email for the Zulip service.'
    )
    zulipHost: constr(max_length=255) = Field(
        ..., description='The host for the Zulip service.'
    )
    zulipToken: constr(max_length=1000) = Field(
        ..., description='The token for the Zulip service. Stored in encrypted format.'
    )


class TransportZulipPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    zulipChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Zulip service.'
    )
    zulipEmail: constr(max_length=255) = Field(
        ..., description='The email for the Zulip service.'
    )
    zulipHost: constr(max_length=255) = Field(
        ..., description='The host for the Zulip service.'
    )
    zulipToken: constr(max_length=1000) = Field(
        ..., description='The token for the Zulip service. Stored in encrypted format.'
    )


class TransportZulipPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    zulipChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Zulip service.'
    )
    zulipEmail: constr(max_length=255) = Field(
        ..., description='The email for the Zulip service.'
    )
    zulipHost: constr(max_length=255) = Field(
        ..., description='The host for the Zulip service.'
    )
    zulipToken: constr(max_length=1000) = Field(
        ..., description='The token for the Zulip service. Stored in encrypted format.'
    )


class FieldContext90(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class TransportZulipJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext90]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    createdAt: Optional[datetime] = Field(
        None,
        description='When the resource instance was created. This date-time is in the UTC timezone.',
    )
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    resourceOwner: Optional[str] = Field(
        None, description='The name of the person who owns this resource.'
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    zulipChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Zulip service.'
    )
    zulipEmail: constr(max_length=255) = Field(
        ..., description='The email for the Zulip service.'
    )
    zulipHost: constr(max_length=255) = Field(
        ..., description='The host for the Zulip service.'
    )
    zulipToken: constr(max_length=1000) = Field(
        ..., description='The token for the Zulip service. Stored in encrypted format.'
    )


class TransportZulipJsonldPost(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    partition: str = Field(
        ...,
        description='The partition that contains this resource instance. The resource cannot be moved to another partition.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    zulipChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Zulip service.'
    )
    zulipEmail: constr(max_length=255) = Field(
        ..., description='The email for the Zulip service.'
    )
    zulipHost: constr(max_length=255) = Field(
        ..., description='The host for the Zulip service.'
    )
    zulipToken: constr(max_length=1000) = Field(
        ..., description='The token for the Zulip service. Stored in encrypted format.'
    )


class TransportZulipJsonldPut(BaseModel):
    dataSegmentCode: Optional[constr(max_length=50)] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    transportName: constr(max_length=255) = Field(
        ..., description='The name of the transport.'
    )
    zulipChannel: constr(max_length=255) = Field(
        ..., description='The channel for the Zulip service.'
    )
    zulipEmail: constr(max_length=255) = Field(
        ..., description='The email for the Zulip service.'
    )
    zulipHost: constr(max_length=255) = Field(
        ..., description='The host for the Zulip service.'
    )
    zulipToken: constr(max_length=1000) = Field(
        ..., description='The token for the Zulip service. Stored in encrypted format.'
    )


class UserAccountGet(BaseModel):
    accountLevelCode: Optional[str] = Field(
        None, description='The account level of the user.'
    )
    creditsOveragePercentTripSwitch: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description="If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.",
    )
    email: Optional[str] = Field(None, description='The email address of the user.')
    firstName: Optional[str] = Field(None, description='The first name of the user.')
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    isDelinquent: Optional[bool] = Field(
        None, description='Whether the user account has overdue payments.'
    )
    lastName: Optional[str] = Field(None, description='The last name of the user.')
    timezoneCode: Optional[str] = Field(None, description='The timezone of the user.')


class UserAccountPut(BaseModel):
    creditsOveragePercentTripSwitch: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description="If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.",
    )


class FieldContext91(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class UserAccountJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext91]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    accountLevelCode: Optional[str] = Field(
        None, description='The account level of the user.'
    )
    creditsOveragePercentTripSwitch: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description="If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.",
    )
    email: Optional[str] = Field(None, description='The email address of the user.')
    firstName: Optional[str] = Field(None, description='The first name of the user.')
    id: Optional[UUID] = Field(
        None, description='The unique identifier of the resource instance.'
    )
    isDelinquent: Optional[bool] = Field(
        None, description='Whether the user account has overdue payments.'
    )
    lastName: Optional[str] = Field(None, description='The last name of the user.')
    timezoneCode: Optional[str] = Field(None, description='The timezone of the user.')


class UserAccountJsonldPut(BaseModel):
    creditsOveragePercentTripSwitch: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description="If the credits consumed in the billing period are this percentage above the account plan's included credits, cease further consumption of credits until the end of the billing period. Any integer between 1 and 1,000. Optional. Leave blank for no limit.",
    )


class UserAccountLevelCodeGet(BaseModel):
    codeName: Optional[str] = None
    id: Optional[str] = None


class FieldContext92(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_vocab: str = Field(..., alias='@vocab')
    hydra: Hydra


class UserAccountLevelCodeJsonldGet(BaseModel):
    field_context: Optional[Union[str, FieldContext92]] = Field(None, alias='@context')
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    codeName: Optional[str] = None
    id: Optional[str] = None


class ApiAlertLogGetResponse(RootModel[List[AlertLogGet]]):
    root: List[AlertLogGet]


class HydraMappingItem(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    property: Optional[str] = None
    required: Optional[bool] = None
    variable: Optional[str] = None


class HydraSearch(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class HydraView(BaseModel):
    field_id: Optional[str] = Field(None, alias='@id')
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_first: Optional[str] = Field(None, alias='hydra:first')
    hydra_last: Optional[str] = Field(None, alias='hydra:last')
    hydra_next: Optional[str] = Field(None, alias='hydra:next')
    hydra_previous: Optional[str] = Field(None, alias='hydra:previous')


class ApiAlertLogGetResponse1(BaseModel):
    hydra_member: List[AlertLogJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiAlertLogGetResponse2(RootModel[List[AlertLogGet]]):
    root: List[AlertLogGet]


class DataSegmentCode(RootModel[List[str]]):
    root: List[str]


class Monitor(RootModel[List[str]]):
    root: List[str]


class AlertService(RootModel[List[str]]):
    root: List[str]


class AlertLogStatusCode(RootModel[List[str]]):
    root: List[str]


class Partition(RootModel[List[str]]):
    root: List[str]


class Properties(RootModel[List[str]]):
    root: List[str]


class ApiAlertLogStatusCodeGetResponse(RootModel[List[AlertLogStatusCodeGet]]):
    root: List[AlertLogStatusCodeGet]


class HydraSearch1(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiAlertLogStatusCodeGetResponse1(BaseModel):
    hydra_member: List[AlertLogStatusCodeJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch1] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiAlertLogStatusCodeGetResponse2(RootModel[List[AlertLogStatusCodeGet]]):
    root: List[AlertLogStatusCodeGet]


class ApiAlertServiceGetResponse(RootModel[List[AlertServiceGet]]):
    root: List[AlertServiceGet]


class HydraSearch2(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiAlertServiceGetResponse1(BaseModel):
    hydra_member: List[AlertServiceJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch2] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiAlertServiceGetResponse2(RootModel[List[AlertServiceGet]]):
    root: List[AlertServiceGet]


class ApiAlertServiceTransportCodeGetResponse(
    RootModel[List[AlertServiceTransportCodeGet]]
):
    root: List[AlertServiceTransportCodeGet]


class HydraSearch3(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiAlertServiceTransportCodeGetResponse1(BaseModel):
    hydra_member: List[AlertServiceTransportCodeJsonldGet] = Field(
        ..., alias='hydra:member'
    )
    hydra_search: Optional[HydraSearch3] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiAlertServiceTransportCodeGetResponse2(
    RootModel[List[AlertServiceTransportCodeGet]]
):
    root: List[AlertServiceTransportCodeGet]


class ApiCreditsConsumptionGetResponse(RootModel[List[CreditsConsumptionGet]]):
    root: List[CreditsConsumptionGet]


class HydraSearch4(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiCreditsConsumptionGetResponse1(BaseModel):
    hydra_member: List[CreditsConsumptionJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch4] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiCreditsConsumptionGetResponse2(RootModel[List[CreditsConsumptionGet]]):
    root: List[CreditsConsumptionGet]


class ApiHttpMethodCodeGetResponse(RootModel[List[HttpMethodCodeGet]]):
    root: List[HttpMethodCodeGet]


class HydraSearch5(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiHttpMethodCodeGetResponse1(BaseModel):
    hydra_member: List[HttpMethodCodeJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch5] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiHttpMethodCodeGetResponse2(RootModel[List[HttpMethodCodeGet]]):
    root: List[HttpMethodCodeGet]


class ApiMediaObjectGetResponse(RootModel[List[MediaObjectGet]]):
    root: List[MediaObjectGet]


class HydraSearch6(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiMediaObjectGetResponse1(BaseModel):
    hydra_member: List[MediaObjectJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch6] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiMediaObjectGetResponse2(RootModel[List[MediaObjectGet]]):
    root: List[MediaObjectGet]


class ApiMediaObjectPostRequest(BaseModel):
    dataSegmentCode: Optional[str] = Field(
        None,
        description='User-provided string on which to segment and filter data. Max 50 characters.',
    )
    file: Optional[bytes] = None
    keywords: Optional[str] = Field(
        None,
        description='A string of keywords that can be used to search for a resource. Max 100 characters.',
    )
    partition: Optional[str] = Field(
        None,
        description='The unique id of the partition. Can be just the id or an IRI.',
    )


class ApiMonitorGetResponse(RootModel[List[MonitorGet]]):
    root: List[MonitorGet]


class HydraSearch7(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiMonitorGetResponse1(BaseModel):
    hydra_member: List[MonitorJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch7] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiMonitorGetResponse2(RootModel[List[MonitorGet]]):
    root: List[MonitorGet]


class ApiMonitorStatusCodeGetResponse(RootModel[List[MonitorStatusCodeGet]]):
    root: List[MonitorStatusCodeGet]


class HydraSearch8(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiMonitorStatusCodeGetResponse1(BaseModel):
    hydra_member: List[MonitorStatusCodeJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch8] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiMonitorStatusCodeGetResponse2(RootModel[List[MonitorStatusCodeGet]]):
    root: List[MonitorStatusCodeGet]


class ApiMonitorStatusLogGetResponse(RootModel[List[MonitorStatusLogGet]]):
    root: List[MonitorStatusLogGet]


class HydraSearch9(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiMonitorStatusLogGetResponse1(BaseModel):
    hydra_member: List[MonitorStatusLogJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch9] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiMonitorStatusLogGetResponse2(RootModel[List[MonitorStatusLogGet]]):
    root: List[MonitorStatusLogGet]


class MonitorStatusCode(RootModel[List[str]]):
    root: List[str]


class ApiMonitorTypeCodeGetResponse(RootModel[List[MonitorTypeCodeGet]]):
    root: List[MonitorTypeCodeGet]


class HydraSearch10(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiMonitorTypeCodeGetResponse1(BaseModel):
    hydra_member: List[MonitorTypeCodeJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch10] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiMonitorTypeCodeGetResponse2(RootModel[List[MonitorTypeCodeGet]]):
    root: List[MonitorTypeCodeGet]


class ApiPartitionGetResponse(RootModel[List[PartitionGet]]):
    root: List[PartitionGet]


class HydraSearch11(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiPartitionGetResponse1(BaseModel):
    hydra_member: List[PartitionJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch11] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiPartitionGetResponse2(RootModel[List[PartitionGet]]):
    root: List[PartitionGet]


class ApiPingGetResponse(RootModel[List[PingGet]]):
    root: List[PingGet]


class HydraSearch12(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiPingGetResponse1(BaseModel):
    hydra_member: List[PingJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch12] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiPingGetResponse2(RootModel[List[PingGet]]):
    root: List[PingGet]


class ApiPingMethodCodeGetResponse(RootModel[List[PingMethodCodeGet]]):
    root: List[PingMethodCodeGet]


class HydraSearch13(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiPingMethodCodeGetResponse1(BaseModel):
    hydra_member: List[PingMethodCodeJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch13] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiPingMethodCodeGetResponse2(RootModel[List[PingMethodCodeGet]]):
    root: List[PingMethodCodeGet]


class ApiTeamInvitationGetResponse(RootModel[List[TeamInvitationGet]]):
    root: List[TeamInvitationGet]


class HydraSearch14(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTeamInvitationGetResponse1(BaseModel):
    hydra_member: List[TeamInvitationJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch14] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTeamInvitationGetResponse2(RootModel[List[TeamInvitationGet]]):
    root: List[TeamInvitationGet]


class InviteeEmail(RootModel[List[str]]):
    root: List[str]


class ApiTeamMemberGetResponse(RootModel[List[TeamMemberGet]]):
    root: List[TeamMemberGet]


class HydraSearch15(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTeamMemberGetResponse1(BaseModel):
    hydra_member: List[TeamMemberJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch15] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTeamMemberGetResponse2(RootModel[List[TeamMemberGet]]):
    root: List[TeamMemberGet]


class UserAccount(RootModel[List[str]]):
    root: List[str]


class ApiTeamMemberRoleCodeGetResponse(RootModel[List[TeamMemberRoleCodeGet]]):
    root: List[TeamMemberRoleCodeGet]


class HydraSearch16(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTeamMemberRoleCodeGetResponse1(BaseModel):
    hydra_member: List[TeamMemberRoleCodeJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch16] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTeamMemberRoleCodeGetResponse2(RootModel[List[TeamMemberRoleCodeGet]]):
    root: List[TeamMemberRoleCodeGet]


class ApiTimezoneCodeGetResponse(RootModel[List[TimezoneCodeGet]]):
    root: List[TimezoneCodeGet]


class HydraSearch17(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTimezoneCodeGetResponse1(BaseModel):
    hydra_member: List[TimezoneCodeJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch17] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTimezoneCodeGetResponse2(RootModel[List[TimezoneCodeGet]]):
    root: List[TimezoneCodeGet]


class ApiTransportAlertaGetResponse(RootModel[List[TransportAlertaGet]]):
    root: List[TransportAlertaGet]


class HydraSearch18(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportAlertaGetResponse1(BaseModel):
    hydra_member: List[TransportAlertaJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch18] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportAlertaGetResponse2(RootModel[List[TransportAlertaGet]]):
    root: List[TransportAlertaGet]


class ApiTransportAllMySmsGetResponse(RootModel[List[TransportAllMySmsGet]]):
    root: List[TransportAllMySmsGet]


class HydraSearch19(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportAllMySmsGetResponse1(BaseModel):
    hydra_member: List[TransportAllMySmsJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch19] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportAllMySmsGetResponse2(RootModel[List[TransportAllMySmsGet]]):
    root: List[TransportAllMySmsGet]


class ApiTransportAmazonSnsGetResponse(RootModel[List[TransportAmazonSnsGet]]):
    root: List[TransportAmazonSnsGet]


class HydraSearch20(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportAmazonSnsGetResponse1(BaseModel):
    hydra_member: List[TransportAmazonSnsJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch20] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportAmazonSnsGetResponse2(RootModel[List[TransportAmazonSnsGet]]):
    root: List[TransportAmazonSnsGet]


class ApiTransportBandwidthGetResponse(RootModel[List[TransportBandwidthGet]]):
    root: List[TransportBandwidthGet]


class HydraSearch21(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportBandwidthGetResponse1(BaseModel):
    hydra_member: List[TransportBandwidthJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch21] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportBandwidthGetResponse2(RootModel[List[TransportBandwidthGet]]):
    root: List[TransportBandwidthGet]


class ApiTransportChatworkGetResponse(RootModel[List[TransportChatworkGet]]):
    root: List[TransportChatworkGet]


class HydraSearch22(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportChatworkGetResponse1(BaseModel):
    hydra_member: List[TransportChatworkJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch22] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportChatworkGetResponse2(RootModel[List[TransportChatworkGet]]):
    root: List[TransportChatworkGet]


class ApiTransportClickSendGetResponse(RootModel[List[TransportClickSendGet]]):
    root: List[TransportClickSendGet]


class HydraSearch23(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportClickSendGetResponse1(BaseModel):
    hydra_member: List[TransportClickSendJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch23] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportClickSendGetResponse2(RootModel[List[TransportClickSendGet]]):
    root: List[TransportClickSendGet]


class ApiTransportClickatellGetResponse(RootModel[List[TransportClickatellGet]]):
    root: List[TransportClickatellGet]


class HydraSearch24(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportClickatellGetResponse1(BaseModel):
    hydra_member: List[TransportClickatellJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch24] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportClickatellGetResponse2(RootModel[List[TransportClickatellGet]]):
    root: List[TransportClickatellGet]


class ApiTransportContactEveryoneGetResponse(
    RootModel[List[TransportContactEveryoneGet]]
):
    root: List[TransportContactEveryoneGet]


class HydraSearch25(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportContactEveryoneGetResponse1(BaseModel):
    hydra_member: List[TransportContactEveryoneJsonldGet] = Field(
        ..., alias='hydra:member'
    )
    hydra_search: Optional[HydraSearch25] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportContactEveryoneGetResponse2(
    RootModel[List[TransportContactEveryoneGet]]
):
    root: List[TransportContactEveryoneGet]


class ApiTransportDiscordGetResponse(RootModel[List[TransportDiscordGet]]):
    root: List[TransportDiscordGet]


class HydraSearch26(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportDiscordGetResponse1(BaseModel):
    hydra_member: List[TransportDiscordJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch26] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportDiscordGetResponse2(RootModel[List[TransportDiscordGet]]):
    root: List[TransportDiscordGet]


class ApiTransportEmailGetResponse(RootModel[List[TransportEmailGet]]):
    root: List[TransportEmailGet]


class HydraSearch27(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportEmailGetResponse1(BaseModel):
    hydra_member: List[TransportEmailJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch27] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportEmailGetResponse2(RootModel[List[TransportEmailGet]]):
    root: List[TransportEmailGet]


class ApiTransportEngagespotGetResponse(RootModel[List[TransportEngagespotGet]]):
    root: List[TransportEngagespotGet]


class HydraSearch28(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportEngagespotGetResponse1(BaseModel):
    hydra_member: List[TransportEngagespotJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch28] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportEngagespotGetResponse2(RootModel[List[TransportEngagespotGet]]):
    root: List[TransportEngagespotGet]


class ApiTransportEsendexGetResponse(RootModel[List[TransportEsendexGet]]):
    root: List[TransportEsendexGet]


class HydraSearch29(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportEsendexGetResponse1(BaseModel):
    hydra_member: List[TransportEsendexJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch29] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportEsendexGetResponse2(RootModel[List[TransportEsendexGet]]):
    root: List[TransportEsendexGet]


class ApiTransportExpoGetResponse(RootModel[List[TransportExpoGet]]):
    root: List[TransportExpoGet]


class HydraSearch30(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportExpoGetResponse1(BaseModel):
    hydra_member: List[TransportExpoJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch30] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportExpoGetResponse2(RootModel[List[TransportExpoGet]]):
    root: List[TransportExpoGet]


class ApiTransportFirebaseGetResponse(RootModel[List[TransportFirebaseGet]]):
    root: List[TransportFirebaseGet]


class HydraSearch31(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportFirebaseGetResponse1(BaseModel):
    hydra_member: List[TransportFirebaseJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch31] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportFirebaseGetResponse2(RootModel[List[TransportFirebaseGet]]):
    root: List[TransportFirebaseGet]


class ApiTransportFortySixElksGetResponse(RootModel[List[TransportFortySixElksGet]]):
    root: List[TransportFortySixElksGet]


class HydraSearch32(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportFortySixElksGetResponse1(BaseModel):
    hydra_member: List[TransportFortySixElksJsonldGet] = Field(
        ..., alias='hydra:member'
    )
    hydra_search: Optional[HydraSearch32] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportFortySixElksGetResponse2(RootModel[List[TransportFortySixElksGet]]):
    root: List[TransportFortySixElksGet]


class ApiTransportFreeMobileGetResponse(RootModel[List[TransportFreeMobileGet]]):
    root: List[TransportFreeMobileGet]


class HydraSearch33(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportFreeMobileGetResponse1(BaseModel):
    hydra_member: List[TransportFreeMobileJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch33] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportFreeMobileGetResponse2(RootModel[List[TransportFreeMobileGet]]):
    root: List[TransportFreeMobileGet]


class ApiTransportFreshdeskGetResponse(RootModel[List[TransportFreshdeskGet]]):
    root: List[TransportFreshdeskGet]


class HydraSearch34(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportFreshdeskGetResponse1(BaseModel):
    hydra_member: List[TransportFreshdeskJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch34] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportFreshdeskGetResponse2(RootModel[List[TransportFreshdeskGet]]):
    root: List[TransportFreshdeskGet]


class ApiTransportGatewayApiGetResponse(RootModel[List[TransportGatewayApiGet]]):
    root: List[TransportGatewayApiGet]


class HydraSearch35(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportGatewayApiGetResponse1(BaseModel):
    hydra_member: List[TransportGatewayApiJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch35] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportGatewayApiGetResponse2(RootModel[List[TransportGatewayApiGet]]):
    root: List[TransportGatewayApiGet]


class ApiTransportGitterGetResponse(RootModel[List[TransportGitterGet]]):
    root: List[TransportGitterGet]


class HydraSearch36(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportGitterGetResponse1(BaseModel):
    hydra_member: List[TransportGitterJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch36] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportGitterGetResponse2(RootModel[List[TransportGitterGet]]):
    root: List[TransportGitterGet]


class ApiTransportGoogleChatGetResponse(RootModel[List[TransportGoogleChatGet]]):
    root: List[TransportGoogleChatGet]


class HydraSearch37(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportGoogleChatGetResponse1(BaseModel):
    hydra_member: List[TransportGoogleChatJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch37] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportGoogleChatGetResponse2(RootModel[List[TransportGoogleChatGet]]):
    root: List[TransportGoogleChatGet]


class ApiTransportGotifyGetResponse(RootModel[List[TransportGotifyGet]]):
    root: List[TransportGotifyGet]


class HydraSearch38(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportGotifyGetResponse1(BaseModel):
    hydra_member: List[TransportGotifyJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch38] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportGotifyGetResponse2(RootModel[List[TransportGotifyGet]]):
    root: List[TransportGotifyGet]


class ApiTransportHelpScoutGetResponse(RootModel[List[TransportHelpScoutGet]]):
    root: List[TransportHelpScoutGet]


class HydraSearch39(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportHelpScoutGetResponse1(BaseModel):
    hydra_member: List[TransportHelpScoutJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch39] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportHelpScoutGetResponse2(RootModel[List[TransportHelpScoutGet]]):
    root: List[TransportHelpScoutGet]


class ApiTransportInfobipGetResponse(RootModel[List[TransportInfobipGet]]):
    root: List[TransportInfobipGet]


class HydraSearch40(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportInfobipGetResponse1(BaseModel):
    hydra_member: List[TransportInfobipJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch40] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportInfobipGetResponse2(RootModel[List[TransportInfobipGet]]):
    root: List[TransportInfobipGet]


class ApiTransportIqsmsGetResponse(RootModel[List[TransportIqsmsGet]]):
    root: List[TransportIqsmsGet]


class HydraSearch41(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportIqsmsGetResponse1(BaseModel):
    hydra_member: List[TransportIqsmsJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch41] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportIqsmsGetResponse2(RootModel[List[TransportIqsmsGet]]):
    root: List[TransportIqsmsGet]


class ApiTransportKazInfoTehGetResponse(RootModel[List[TransportKazInfoTehGet]]):
    root: List[TransportKazInfoTehGet]


class HydraSearch42(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportKazInfoTehGetResponse1(BaseModel):
    hydra_member: List[TransportKazInfoTehJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch42] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportKazInfoTehGetResponse2(RootModel[List[TransportKazInfoTehGet]]):
    root: List[TransportKazInfoTehGet]


class ApiTransportLightSmsGetResponse(RootModel[List[TransportLightSmsGet]]):
    root: List[TransportLightSmsGet]


class HydraSearch43(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportLightSmsGetResponse1(BaseModel):
    hydra_member: List[TransportLightSmsJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch43] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportLightSmsGetResponse2(RootModel[List[TransportLightSmsGet]]):
    root: List[TransportLightSmsGet]


class ApiTransportLineNotifyGetResponse(RootModel[List[TransportLineNotifyGet]]):
    root: List[TransportLineNotifyGet]


class HydraSearch44(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportLineNotifyGetResponse1(BaseModel):
    hydra_member: List[TransportLineNotifyJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch44] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportLineNotifyGetResponse2(RootModel[List[TransportLineNotifyGet]]):
    root: List[TransportLineNotifyGet]


class ApiTransportLinkedInGetResponse(RootModel[List[TransportLinkedInGet]]):
    root: List[TransportLinkedInGet]


class HydraSearch45(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportLinkedInGetResponse1(BaseModel):
    hydra_member: List[TransportLinkedInJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch45] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportLinkedInGetResponse2(RootModel[List[TransportLinkedInGet]]):
    root: List[TransportLinkedInGet]


class ApiTransportMailjetGetResponse(RootModel[List[TransportMailjetGet]]):
    root: List[TransportMailjetGet]


class HydraSearch46(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportMailjetGetResponse1(BaseModel):
    hydra_member: List[TransportMailjetJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch46] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportMailjetGetResponse2(RootModel[List[TransportMailjetGet]]):
    root: List[TransportMailjetGet]


class ApiTransportMastodonGetResponse(RootModel[List[TransportMastodonGet]]):
    root: List[TransportMastodonGet]


class HydraSearch47(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportMastodonGetResponse1(BaseModel):
    hydra_member: List[TransportMastodonJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch47] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportMastodonGetResponse2(RootModel[List[TransportMastodonGet]]):
    root: List[TransportMastodonGet]


class ApiTransportMattermostGetResponse(RootModel[List[TransportMattermostGet]]):
    root: List[TransportMattermostGet]


class HydraSearch48(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportMattermostGetResponse1(BaseModel):
    hydra_member: List[TransportMattermostJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch48] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportMattermostGetResponse2(RootModel[List[TransportMattermostGet]]):
    root: List[TransportMattermostGet]


class ApiTransportMercureGetResponse(RootModel[List[TransportMercureGet]]):
    root: List[TransportMercureGet]


class HydraSearch49(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportMercureGetResponse1(BaseModel):
    hydra_member: List[TransportMercureJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch49] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportMercureGetResponse2(RootModel[List[TransportMercureGet]]):
    root: List[TransportMercureGet]


class ApiTransportMessageBirdGetResponse(RootModel[List[TransportMessageBirdGet]]):
    root: List[TransportMessageBirdGet]


class HydraSearch50(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportMessageBirdGetResponse1(BaseModel):
    hydra_member: List[TransportMessageBirdJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch50] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportMessageBirdGetResponse2(RootModel[List[TransportMessageBirdGet]]):
    root: List[TransportMessageBirdGet]


class ApiTransportMessageMediaGetResponse(RootModel[List[TransportMessageMediaGet]]):
    root: List[TransportMessageMediaGet]


class HydraSearch51(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportMessageMediaGetResponse1(BaseModel):
    hydra_member: List[TransportMessageMediaJsonldGet] = Field(
        ..., alias='hydra:member'
    )
    hydra_search: Optional[HydraSearch51] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportMessageMediaGetResponse2(RootModel[List[TransportMessageMediaGet]]):
    root: List[TransportMessageMediaGet]


class ApiTransportMicrosoftTeamsGetResponse(
    RootModel[List[TransportMicrosoftTeamsGet]]
):
    root: List[TransportMicrosoftTeamsGet]


class HydraSearch52(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportMicrosoftTeamsGetResponse1(BaseModel):
    hydra_member: List[TransportMicrosoftTeamsJsonldGet] = Field(
        ..., alias='hydra:member'
    )
    hydra_search: Optional[HydraSearch52] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportMicrosoftTeamsGetResponse2(
    RootModel[List[TransportMicrosoftTeamsGet]]
):
    root: List[TransportMicrosoftTeamsGet]


class ApiTransportMobytGetResponse(RootModel[List[TransportMobytGet]]):
    root: List[TransportMobytGet]


class HydraSearch53(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportMobytGetResponse1(BaseModel):
    hydra_member: List[TransportMobytJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch53] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportMobytGetResponse2(RootModel[List[TransportMobytGet]]):
    root: List[TransportMobytGet]


class ApiTransportOctopushGetResponse(RootModel[List[TransportOctopushGet]]):
    root: List[TransportOctopushGet]


class HydraSearch54(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportOctopushGetResponse1(BaseModel):
    hydra_member: List[TransportOctopushJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch54] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportOctopushGetResponse2(RootModel[List[TransportOctopushGet]]):
    root: List[TransportOctopushGet]


class ApiTransportOneSignalGetResponse(RootModel[List[TransportOneSignalGet]]):
    root: List[TransportOneSignalGet]


class HydraSearch55(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportOneSignalGetResponse1(BaseModel):
    hydra_member: List[TransportOneSignalJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch55] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportOneSignalGetResponse2(RootModel[List[TransportOneSignalGet]]):
    root: List[TransportOneSignalGet]


class ApiTransportOpsgenieGetResponse(RootModel[List[TransportOpsgenieGet]]):
    root: List[TransportOpsgenieGet]


class HydraSearch56(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportOpsgenieGetResponse1(BaseModel):
    hydra_member: List[TransportOpsgenieJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch56] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportOpsgenieGetResponse2(RootModel[List[TransportOpsgenieGet]]):
    root: List[TransportOpsgenieGet]


class ApiTransportOrangeSmsGetResponse(RootModel[List[TransportOrangeSmsGet]]):
    root: List[TransportOrangeSmsGet]


class HydraSearch57(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportOrangeSmsGetResponse1(BaseModel):
    hydra_member: List[TransportOrangeSmsJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch57] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportOrangeSmsGetResponse2(RootModel[List[TransportOrangeSmsGet]]):
    root: List[TransportOrangeSmsGet]


class ApiTransportOvhCloudGetResponse(RootModel[List[TransportOvhCloudGet]]):
    root: List[TransportOvhCloudGet]


class HydraSearch58(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportOvhCloudGetResponse1(BaseModel):
    hydra_member: List[TransportOvhCloudJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch58] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportOvhCloudGetResponse2(RootModel[List[TransportOvhCloudGet]]):
    root: List[TransportOvhCloudGet]


class ApiTransportPagerDutyGetResponse(RootModel[List[TransportPagerDutyGet]]):
    root: List[TransportPagerDutyGet]


class HydraSearch59(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportPagerDutyGetResponse1(BaseModel):
    hydra_member: List[TransportPagerDutyJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch59] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportPagerDutyGetResponse2(RootModel[List[TransportPagerDutyGet]]):
    root: List[TransportPagerDutyGet]


class ApiTransportPagerTreeGetResponse(RootModel[List[TransportPagerTreeGet]]):
    root: List[TransportPagerTreeGet]


class HydraSearch60(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportPagerTreeGetResponse1(BaseModel):
    hydra_member: List[TransportPagerTreeJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch60] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportPagerTreeGetResponse2(RootModel[List[TransportPagerTreeGet]]):
    root: List[TransportPagerTreeGet]


class ApiTransportPlivoGetResponse(RootModel[List[TransportPlivoGet]]):
    root: List[TransportPlivoGet]


class HydraSearch61(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportPlivoGetResponse1(BaseModel):
    hydra_member: List[TransportPlivoJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch61] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportPlivoGetResponse2(RootModel[List[TransportPlivoGet]]):
    root: List[TransportPlivoGet]


class ApiTransportPushbulletGetResponse(RootModel[List[TransportPushbulletGet]]):
    root: List[TransportPushbulletGet]


class HydraSearch62(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportPushbulletGetResponse1(BaseModel):
    hydra_member: List[TransportPushbulletJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch62] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportPushbulletGetResponse2(RootModel[List[TransportPushbulletGet]]):
    root: List[TransportPushbulletGet]


class ApiTransportPushoverGetResponse(RootModel[List[TransportPushoverGet]]):
    root: List[TransportPushoverGet]


class HydraSearch63(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportPushoverGetResponse1(BaseModel):
    hydra_member: List[TransportPushoverJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch63] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportPushoverGetResponse2(RootModel[List[TransportPushoverGet]]):
    root: List[TransportPushoverGet]


class ApiTransportPushyGetResponse(RootModel[List[TransportPushyGet]]):
    root: List[TransportPushyGet]


class HydraSearch64(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportPushyGetResponse1(BaseModel):
    hydra_member: List[TransportPushyJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch64] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportPushyGetResponse2(RootModel[List[TransportPushyGet]]):
    root: List[TransportPushyGet]


class ApiTransportRingCentralGetResponse(RootModel[List[TransportRingCentralGet]]):
    root: List[TransportRingCentralGet]


class HydraSearch65(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportRingCentralGetResponse1(BaseModel):
    hydra_member: List[TransportRingCentralJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch65] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportRingCentralGetResponse2(RootModel[List[TransportRingCentralGet]]):
    root: List[TransportRingCentralGet]


class ApiTransportRocketChatGetResponse(RootModel[List[TransportRocketChatGet]]):
    root: List[TransportRocketChatGet]


class HydraSearch66(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportRocketChatGetResponse1(BaseModel):
    hydra_member: List[TransportRocketChatJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch66] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportRocketChatGetResponse2(RootModel[List[TransportRocketChatGet]]):
    root: List[TransportRocketChatGet]


class ApiTransportSendberryGetResponse(RootModel[List[TransportSendberryGet]]):
    root: List[TransportSendberryGet]


class HydraSearch67(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportSendberryGetResponse1(BaseModel):
    hydra_member: List[TransportSendberryJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch67] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportSendberryGetResponse2(RootModel[List[TransportSendberryGet]]):
    root: List[TransportSendberryGet]


class ApiTransportSendinblueGetResponse(RootModel[List[TransportSendinblueGet]]):
    root: List[TransportSendinblueGet]


class HydraSearch68(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportSendinblueGetResponse1(BaseModel):
    hydra_member: List[TransportSendinblueJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch68] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportSendinblueGetResponse2(RootModel[List[TransportSendinblueGet]]):
    root: List[TransportSendinblueGet]


class ApiTransportSimpleTextinGetResponse(RootModel[List[TransportSimpleTextinGet]]):
    root: List[TransportSimpleTextinGet]


class HydraSearch69(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportSimpleTextinGetResponse1(BaseModel):
    hydra_member: List[TransportSimpleTextinJsonldGet] = Field(
        ..., alias='hydra:member'
    )
    hydra_search: Optional[HydraSearch69] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportSimpleTextinGetResponse2(RootModel[List[TransportSimpleTextinGet]]):
    root: List[TransportSimpleTextinGet]


class ApiTransportSinchGetResponse(RootModel[List[TransportSinchGet]]):
    root: List[TransportSinchGet]


class HydraSearch70(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportSinchGetResponse1(BaseModel):
    hydra_member: List[TransportSinchJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch70] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportSinchGetResponse2(RootModel[List[TransportSinchGet]]):
    root: List[TransportSinchGet]


class ApiTransportSlackGetResponse(RootModel[List[TransportSlackGet]]):
    root: List[TransportSlackGet]


class HydraSearch71(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportSlackGetResponse1(BaseModel):
    hydra_member: List[TransportSlackJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch71] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportSlackGetResponse2(RootModel[List[TransportSlackGet]]):
    root: List[TransportSlackGet]


class ApiTransportSmsBiurasGetResponse(RootModel[List[TransportSmsBiurasGet]]):
    root: List[TransportSmsBiurasGet]


class HydraSearch72(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportSmsBiurasGetResponse1(BaseModel):
    hydra_member: List[TransportSmsBiurasJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch72] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportSmsBiurasGetResponse2(RootModel[List[TransportSmsBiurasGet]]):
    root: List[TransportSmsBiurasGet]


class ApiTransportSmsFactorGetResponse(RootModel[List[TransportSmsFactorGet]]):
    root: List[TransportSmsFactorGet]


class HydraSearch73(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportSmsFactorGetResponse1(BaseModel):
    hydra_member: List[TransportSmsFactorJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch73] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportSmsFactorGetResponse2(RootModel[List[TransportSmsFactorGet]]):
    root: List[TransportSmsFactorGet]


class ApiTransportSms77GetResponse(RootModel[List[TransportSms77Get]]):
    root: List[TransportSms77Get]


class HydraSearch74(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportSms77GetResponse1(BaseModel):
    hydra_member: List[TransportSms77JsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch74] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportSms77GetResponse2(RootModel[List[TransportSms77Get]]):
    root: List[TransportSms77Get]


class ApiTransportSmsapiGetResponse(RootModel[List[TransportSmsapiGet]]):
    root: List[TransportSmsapiGet]


class HydraSearch75(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportSmsapiGetResponse1(BaseModel):
    hydra_member: List[TransportSmsapiJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch75] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportSmsapiGetResponse2(RootModel[List[TransportSmsapiGet]]):
    root: List[TransportSmsapiGet]


class ApiTransportSmscGetResponse(RootModel[List[TransportSmscGet]]):
    root: List[TransportSmscGet]


class HydraSearch76(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportSmscGetResponse1(BaseModel):
    hydra_member: List[TransportSmscJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch76] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportSmscGetResponse2(RootModel[List[TransportSmscGet]]):
    root: List[TransportSmscGet]


class ApiTransportSmsmodeGetResponse(RootModel[List[TransportSmsmodeGet]]):
    root: List[TransportSmsmodeGet]


class HydraSearch77(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportSmsmodeGetResponse1(BaseModel):
    hydra_member: List[TransportSmsmodeJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch77] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportSmsmodeGetResponse2(RootModel[List[TransportSmsmodeGet]]):
    root: List[TransportSmsmodeGet]


class ApiTransportSpotHitGetResponse(RootModel[List[TransportSpotHitGet]]):
    root: List[TransportSpotHitGet]


class HydraSearch78(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportSpotHitGetResponse1(BaseModel):
    hydra_member: List[TransportSpotHitJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch78] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportSpotHitGetResponse2(RootModel[List[TransportSpotHitGet]]):
    root: List[TransportSpotHitGet]


class ApiTransportTelegramGetResponse(RootModel[List[TransportTelegramGet]]):
    root: List[TransportTelegramGet]


class HydraSearch79(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportTelegramGetResponse1(BaseModel):
    hydra_member: List[TransportTelegramJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch79] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportTelegramGetResponse2(RootModel[List[TransportTelegramGet]]):
    root: List[TransportTelegramGet]


class ApiTransportTelnyxGetResponse(RootModel[List[TransportTelnyxGet]]):
    root: List[TransportTelnyxGet]


class HydraSearch80(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportTelnyxGetResponse1(BaseModel):
    hydra_member: List[TransportTelnyxJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch80] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportTelnyxGetResponse2(RootModel[List[TransportTelnyxGet]]):
    root: List[TransportTelnyxGet]


class ApiTransportTermiiGetResponse(RootModel[List[TransportTermiiGet]]):
    root: List[TransportTermiiGet]


class HydraSearch81(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportTermiiGetResponse1(BaseModel):
    hydra_member: List[TransportTermiiJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch81] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportTermiiGetResponse2(RootModel[List[TransportTermiiGet]]):
    root: List[TransportTermiiGet]


class ApiTransportTrelloGetResponse(RootModel[List[TransportTrelloGet]]):
    root: List[TransportTrelloGet]


class HydraSearch82(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportTrelloGetResponse1(BaseModel):
    hydra_member: List[TransportTrelloJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch82] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportTrelloGetResponse2(RootModel[List[TransportTrelloGet]]):
    root: List[TransportTrelloGet]


class ApiTransportTurboSmsGetResponse(RootModel[List[TransportTurboSmsGet]]):
    root: List[TransportTurboSmsGet]


class HydraSearch83(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportTurboSmsGetResponse1(BaseModel):
    hydra_member: List[TransportTurboSmsJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch83] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportTurboSmsGetResponse2(RootModel[List[TransportTurboSmsGet]]):
    root: List[TransportTurboSmsGet]


class ApiTransportTwilioGetResponse(RootModel[List[TransportTwilioGet]]):
    root: List[TransportTwilioGet]


class HydraSearch84(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportTwilioGetResponse1(BaseModel):
    hydra_member: List[TransportTwilioJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch84] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportTwilioGetResponse2(RootModel[List[TransportTwilioGet]]):
    root: List[TransportTwilioGet]


class ApiTransportTwitterGetResponse(RootModel[List[TransportTwitterGet]]):
    root: List[TransportTwitterGet]


class HydraSearch85(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportTwitterGetResponse1(BaseModel):
    hydra_member: List[TransportTwitterJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch85] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportTwitterGetResponse2(RootModel[List[TransportTwitterGet]]):
    root: List[TransportTwitterGet]


class ApiTransportVonageGetResponse(RootModel[List[TransportVonageGet]]):
    root: List[TransportVonageGet]


class HydraSearch86(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportVonageGetResponse1(BaseModel):
    hydra_member: List[TransportVonageJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch86] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportVonageGetResponse2(RootModel[List[TransportVonageGet]]):
    root: List[TransportVonageGet]


class ApiTransportWebhookGetResponse(RootModel[List[TransportWebhookGet]]):
    root: List[TransportWebhookGet]


class HydraSearch87(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportWebhookGetResponse1(BaseModel):
    hydra_member: List[TransportWebhookJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch87] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportWebhookGetResponse2(RootModel[List[TransportWebhookGet]]):
    root: List[TransportWebhookGet]


class ApiTransportYunpianGetResponse(RootModel[List[TransportYunpianGet]]):
    root: List[TransportYunpianGet]


class HydraSearch88(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportYunpianGetResponse1(BaseModel):
    hydra_member: List[TransportYunpianJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch88] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportYunpianGetResponse2(RootModel[List[TransportYunpianGet]]):
    root: List[TransportYunpianGet]


class ApiTransportZendeskGetResponse(RootModel[List[TransportZendeskGet]]):
    root: List[TransportZendeskGet]


class HydraSearch89(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportZendeskGetResponse1(BaseModel):
    hydra_member: List[TransportZendeskJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch89] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportZendeskGetResponse2(RootModel[List[TransportZendeskGet]]):
    root: List[TransportZendeskGet]


class ApiTransportZulipGetResponse(RootModel[List[TransportZulipGet]]):
    root: List[TransportZulipGet]


class HydraSearch90(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiTransportZulipGetResponse1(BaseModel):
    hydra_member: List[TransportZulipJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch90] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiTransportZulipGetResponse2(RootModel[List[TransportZulipGet]]):
    root: List[TransportZulipGet]


class ApiUserAccountGetResponse(RootModel[List[UserAccountGet]]):
    root: List[UserAccountGet]


class HydraSearch91(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiUserAccountGetResponse1(BaseModel):
    hydra_member: List[UserAccountJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch91] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiUserAccountGetResponse2(RootModel[List[UserAccountGet]]):
    root: List[UserAccountGet]


class ApiUserAccountLevelCodeGetResponse(RootModel[List[UserAccountLevelCodeGet]]):
    root: List[UserAccountLevelCodeGet]


class HydraSearch92(BaseModel):
    field_type: Optional[str] = Field(None, alias='@type')
    hydra_mapping: Optional[List[HydraMappingItem]] = Field(None, alias='hydra:mapping')
    hydra_template: Optional[str] = Field(None, alias='hydra:template')
    hydra_variableRepresentation: Optional[str] = Field(
        None, alias='hydra:variableRepresentation'
    )


class ApiUserAccountLevelCodeGetResponse1(BaseModel):
    hydra_member: List[UserAccountLevelCodeJsonldGet] = Field(..., alias='hydra:member')
    hydra_search: Optional[HydraSearch92] = Field(None, alias='hydra:search')
    hydra_totalItems: Optional[conint(ge=0)] = Field(None, alias='hydra:totalItems')
    hydra_view: Optional[HydraView] = Field(
        None,
        alias='hydra:view',
        examples=[
            {
                '@id': 'string',
                'hydra:first': 'string',
                'hydra:last': 'string',
                'hydra:next': 'string',
                'hydra:previous': 'string',
                'type': 'string',
            }
        ],
    )


class ApiUserAccountLevelCodeGetResponse2(RootModel[List[UserAccountLevelCodeGet]]):
    root: List[UserAccountLevelCodeGet]
