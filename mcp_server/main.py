# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:24:34+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Query, UploadFile

from models import (
    AlertLogGet,
    AlertLogStatusCode,
    AlertLogStatusCodeGet,
    AlertService,
    AlertServiceGet,
    AlertServiceJsonldPost,
    AlertServiceJsonldPut,
    AlertServicePost,
    AlertServicePut,
    AlertServiceTransportCodeGet,
    ApiAlertLogGetResponse,
    ApiAlertLogStatusCodeGetResponse,
    ApiAlertServiceGetResponse,
    ApiAlertServiceTransportCodeGetResponse,
    ApiCreditsConsumptionGetResponse,
    ApiHttpMethodCodeGetResponse,
    ApiMediaObjectGetResponse,
    ApiMonitorGetResponse,
    ApiMonitorStatusCodeGetResponse,
    ApiMonitorStatusLogGetResponse,
    ApiMonitorTypeCodeGetResponse,
    ApiPartitionGetResponse,
    ApiPingGetResponse,
    ApiPingMethodCodeGetResponse,
    ApiTeamInvitationGetResponse,
    ApiTeamMemberGetResponse,
    ApiTeamMemberRoleCodeGetResponse,
    ApiTimezoneCodeGetResponse,
    ApiTransportAlertaGetResponse,
    ApiTransportAllMySmsGetResponse,
    ApiTransportAmazonSnsGetResponse,
    ApiTransportBandwidthGetResponse,
    ApiTransportChatworkGetResponse,
    ApiTransportClickatellGetResponse,
    ApiTransportClickSendGetResponse,
    ApiTransportContactEveryoneGetResponse,
    ApiTransportDiscordGetResponse,
    ApiTransportEmailGetResponse,
    ApiTransportEngagespotGetResponse,
    ApiTransportEsendexGetResponse,
    ApiTransportExpoGetResponse,
    ApiTransportFirebaseGetResponse,
    ApiTransportFortySixElksGetResponse,
    ApiTransportFreeMobileGetResponse,
    ApiTransportFreshdeskGetResponse,
    ApiTransportGatewayApiGetResponse,
    ApiTransportGitterGetResponse,
    ApiTransportGoogleChatGetResponse,
    ApiTransportGotifyGetResponse,
    ApiTransportHelpScoutGetResponse,
    ApiTransportInfobipGetResponse,
    ApiTransportIqsmsGetResponse,
    ApiTransportKazInfoTehGetResponse,
    ApiTransportLightSmsGetResponse,
    ApiTransportLineNotifyGetResponse,
    ApiTransportLinkedInGetResponse,
    ApiTransportMailjetGetResponse,
    ApiTransportMastodonGetResponse,
    ApiTransportMattermostGetResponse,
    ApiTransportMercureGetResponse,
    ApiTransportMessageBirdGetResponse,
    ApiTransportMessageMediaGetResponse,
    ApiTransportMicrosoftTeamsGetResponse,
    ApiTransportMobytGetResponse,
    ApiTransportOctopushGetResponse,
    ApiTransportOneSignalGetResponse,
    ApiTransportOpsgenieGetResponse,
    ApiTransportOrangeSmsGetResponse,
    ApiTransportOvhCloudGetResponse,
    ApiTransportPagerDutyGetResponse,
    ApiTransportPagerTreeGetResponse,
    ApiTransportPlivoGetResponse,
    ApiTransportPushbulletGetResponse,
    ApiTransportPushoverGetResponse,
    ApiTransportPushyGetResponse,
    ApiTransportRingCentralGetResponse,
    ApiTransportRocketChatGetResponse,
    ApiTransportSendberryGetResponse,
    ApiTransportSendinblueGetResponse,
    ApiTransportSimpleTextinGetResponse,
    ApiTransportSinchGetResponse,
    ApiTransportSlackGetResponse,
    ApiTransportSms77GetResponse,
    ApiTransportSmsapiGetResponse,
    ApiTransportSmsBiurasGetResponse,
    ApiTransportSmscGetResponse,
    ApiTransportSmsFactorGetResponse,
    ApiTransportSmsmodeGetResponse,
    ApiTransportSpotHitGetResponse,
    ApiTransportTelegramGetResponse,
    ApiTransportTelnyxGetResponse,
    ApiTransportTermiiGetResponse,
    ApiTransportTrelloGetResponse,
    ApiTransportTurboSmsGetResponse,
    ApiTransportTwilioGetResponse,
    ApiTransportTwitterGetResponse,
    ApiTransportVonageGetResponse,
    ApiTransportWebhookGetResponse,
    ApiTransportYunpianGetResponse,
    ApiTransportZendeskGetResponse,
    ApiTransportZulipGetResponse,
    ApiUserAccountGetResponse,
    ApiUserAccountLevelCodeGetResponse,
    CreditsConsumptionGet,
    DataSegmentCode,
    HttpMethodCodeGet,
    InviteeEmail,
    MediaObjectGet,
    Monitor,
    MonitorGet,
    MonitorJsonldPost,
    MonitorJsonldPut,
    MonitorPost,
    MonitorPut,
    MonitorStatusCode,
    MonitorStatusCodeGet,
    MonitorStatusLogGet,
    MonitorTypeCodeGet,
    Partition,
    PartitionGet,
    PartitionJsonldPost,
    PartitionJsonldPut,
    PartitionPost,
    PartitionPut,
    PingGet,
    PingJsonldPost,
    PingMethodCodeGet,
    PingPost,
    Properties,
    TeamInvitationGet,
    TeamInvitationJsonldPost,
    TeamInvitationPost,
    TeamMemberGet,
    TeamMemberJsonldPut,
    TeamMemberPut,
    TeamMemberRoleCodeGet,
    TimezoneCodeGet,
    TransportAlertaGet,
    TransportAlertaJsonldPost,
    TransportAlertaJsonldPut,
    TransportAlertaPost,
    TransportAlertaPut,
    TransportAllMySmsGet,
    TransportAllMySmsJsonldPost,
    TransportAllMySmsJsonldPut,
    TransportAllMySmsPost,
    TransportAllMySmsPut,
    TransportAmazonSnsGet,
    TransportAmazonSnsJsonldPost,
    TransportAmazonSnsJsonldPut,
    TransportAmazonSnsPost,
    TransportAmazonSnsPut,
    TransportBandwidthGet,
    TransportBandwidthJsonldPost,
    TransportBandwidthJsonldPut,
    TransportBandwidthPost,
    TransportBandwidthPut,
    TransportChatworkGet,
    TransportChatworkJsonldPost,
    TransportChatworkJsonldPut,
    TransportChatworkPost,
    TransportChatworkPut,
    TransportClickatellGet,
    TransportClickatellJsonldPost,
    TransportClickatellJsonldPut,
    TransportClickatellPost,
    TransportClickatellPut,
    TransportClickSendGet,
    TransportClickSendJsonldPost,
    TransportClickSendJsonldPut,
    TransportClickSendPost,
    TransportClickSendPut,
    TransportContactEveryoneGet,
    TransportContactEveryoneJsonldPost,
    TransportContactEveryoneJsonldPut,
    TransportContactEveryonePost,
    TransportContactEveryonePut,
    TransportDiscordGet,
    TransportDiscordJsonldPost,
    TransportDiscordJsonldPut,
    TransportDiscordPost,
    TransportDiscordPut,
    TransportEmailGet,
    TransportEmailJsonldPost,
    TransportEmailJsonldPut,
    TransportEmailPost,
    TransportEmailPut,
    TransportEngagespotGet,
    TransportEngagespotJsonldPost,
    TransportEngagespotJsonldPut,
    TransportEngagespotPost,
    TransportEngagespotPut,
    TransportEsendexGet,
    TransportEsendexJsonldPost,
    TransportEsendexJsonldPut,
    TransportEsendexPost,
    TransportEsendexPut,
    TransportExpoGet,
    TransportExpoJsonldPost,
    TransportExpoJsonldPut,
    TransportExpoPost,
    TransportExpoPut,
    TransportFirebaseGet,
    TransportFirebaseJsonldPost,
    TransportFirebaseJsonldPut,
    TransportFirebasePost,
    TransportFirebasePut,
    TransportFortySixElksGet,
    TransportFortySixElksJsonldPost,
    TransportFortySixElksJsonldPut,
    TransportFortySixElksPost,
    TransportFortySixElksPut,
    TransportFreeMobileGet,
    TransportFreeMobileJsonldPost,
    TransportFreeMobileJsonldPut,
    TransportFreeMobilePost,
    TransportFreeMobilePut,
    TransportFreshdeskGet,
    TransportFreshdeskJsonldPost,
    TransportFreshdeskJsonldPut,
    TransportFreshdeskPost,
    TransportFreshdeskPut,
    TransportGatewayApiGet,
    TransportGatewayApiJsonldPost,
    TransportGatewayApiJsonldPut,
    TransportGatewayApiPost,
    TransportGatewayApiPut,
    TransportGitterGet,
    TransportGitterJsonldPost,
    TransportGitterJsonldPut,
    TransportGitterPost,
    TransportGitterPut,
    TransportGoogleChatGet,
    TransportGoogleChatJsonldPost,
    TransportGoogleChatJsonldPut,
    TransportGoogleChatPost,
    TransportGoogleChatPut,
    TransportGotifyGet,
    TransportGotifyJsonldPost,
    TransportGotifyJsonldPut,
    TransportGotifyPost,
    TransportGotifyPut,
    TransportHelpScoutGet,
    TransportHelpScoutJsonldPost,
    TransportHelpScoutJsonldPut,
    TransportHelpScoutPost,
    TransportHelpScoutPut,
    TransportInfobipGet,
    TransportInfobipJsonldPost,
    TransportInfobipJsonldPut,
    TransportInfobipPost,
    TransportInfobipPut,
    TransportIqsmsGet,
    TransportIqsmsJsonldPost,
    TransportIqsmsJsonldPut,
    TransportIqsmsPost,
    TransportIqsmsPut,
    TransportKazInfoTehGet,
    TransportKazInfoTehJsonldPost,
    TransportKazInfoTehJsonldPut,
    TransportKazInfoTehPost,
    TransportKazInfoTehPut,
    TransportLightSmsGet,
    TransportLightSmsJsonldPost,
    TransportLightSmsJsonldPut,
    TransportLightSmsPost,
    TransportLightSmsPut,
    TransportLineNotifyGet,
    TransportLineNotifyJsonldPost,
    TransportLineNotifyJsonldPut,
    TransportLineNotifyPost,
    TransportLineNotifyPut,
    TransportLinkedInGet,
    TransportLinkedInJsonldPost,
    TransportLinkedInJsonldPut,
    TransportLinkedInPost,
    TransportLinkedInPut,
    TransportMailjetGet,
    TransportMailjetJsonldPost,
    TransportMailjetJsonldPut,
    TransportMailjetPost,
    TransportMailjetPut,
    TransportMastodonGet,
    TransportMastodonJsonldPost,
    TransportMastodonJsonldPut,
    TransportMastodonPost,
    TransportMastodonPut,
    TransportMattermostGet,
    TransportMattermostJsonldPost,
    TransportMattermostJsonldPut,
    TransportMattermostPost,
    TransportMattermostPut,
    TransportMercureGet,
    TransportMercureJsonldPost,
    TransportMercureJsonldPut,
    TransportMercurePost,
    TransportMercurePut,
    TransportMessageBirdGet,
    TransportMessageBirdJsonldPost,
    TransportMessageBirdJsonldPut,
    TransportMessageBirdPost,
    TransportMessageBirdPut,
    TransportMessageMediaGet,
    TransportMessageMediaJsonldPost,
    TransportMessageMediaJsonldPut,
    TransportMessageMediaPost,
    TransportMessageMediaPut,
    TransportMicrosoftTeamsGet,
    TransportMicrosoftTeamsJsonldPost,
    TransportMicrosoftTeamsJsonldPut,
    TransportMicrosoftTeamsPost,
    TransportMicrosoftTeamsPut,
    TransportMobytGet,
    TransportMobytJsonldPost,
    TransportMobytJsonldPut,
    TransportMobytPost,
    TransportMobytPut,
    TransportOctopushGet,
    TransportOctopushJsonldPost,
    TransportOctopushJsonldPut,
    TransportOctopushPost,
    TransportOctopushPut,
    TransportOneSignalGet,
    TransportOneSignalJsonldPost,
    TransportOneSignalJsonldPut,
    TransportOneSignalPost,
    TransportOneSignalPut,
    TransportOpsgenieGet,
    TransportOpsgenieJsonldPost,
    TransportOpsgenieJsonldPut,
    TransportOpsgeniePost,
    TransportOpsgeniePut,
    TransportOrangeSmsGet,
    TransportOrangeSmsJsonldPost,
    TransportOrangeSmsJsonldPut,
    TransportOrangeSmsPost,
    TransportOrangeSmsPut,
    TransportOvhCloudGet,
    TransportOvhCloudJsonldPost,
    TransportOvhCloudJsonldPut,
    TransportOvhCloudPost,
    TransportOvhCloudPut,
    TransportPagerDutyGet,
    TransportPagerDutyJsonldPost,
    TransportPagerDutyJsonldPut,
    TransportPagerDutyPost,
    TransportPagerDutyPut,
    TransportPagerTreeGet,
    TransportPagerTreeJsonldPost,
    TransportPagerTreeJsonldPut,
    TransportPagerTreePost,
    TransportPagerTreePut,
    TransportPlivoGet,
    TransportPlivoJsonldPost,
    TransportPlivoJsonldPut,
    TransportPlivoPost,
    TransportPlivoPut,
    TransportPushbulletGet,
    TransportPushbulletJsonldPost,
    TransportPushbulletJsonldPut,
    TransportPushbulletPost,
    TransportPushbulletPut,
    TransportPushoverGet,
    TransportPushoverJsonldPost,
    TransportPushoverJsonldPut,
    TransportPushoverPost,
    TransportPushoverPut,
    TransportPushyGet,
    TransportPushyJsonldPost,
    TransportPushyJsonldPut,
    TransportPushyPost,
    TransportPushyPut,
    TransportRingCentralGet,
    TransportRingCentralJsonldPost,
    TransportRingCentralJsonldPut,
    TransportRingCentralPost,
    TransportRingCentralPut,
    TransportRocketChatGet,
    TransportRocketChatJsonldPost,
    TransportRocketChatJsonldPut,
    TransportRocketChatPost,
    TransportRocketChatPut,
    TransportSendberryGet,
    TransportSendberryJsonldPost,
    TransportSendberryJsonldPut,
    TransportSendberryPost,
    TransportSendberryPut,
    TransportSendinblueGet,
    TransportSendinblueJsonldPost,
    TransportSendinblueJsonldPut,
    TransportSendinbluePost,
    TransportSendinbluePut,
    TransportSimpleTextinGet,
    TransportSimpleTextinJsonldPost,
    TransportSimpleTextinJsonldPut,
    TransportSimpleTextinPost,
    TransportSimpleTextinPut,
    TransportSinchGet,
    TransportSinchJsonldPost,
    TransportSinchJsonldPut,
    TransportSinchPost,
    TransportSinchPut,
    TransportSlackGet,
    TransportSlackJsonldPost,
    TransportSlackJsonldPut,
    TransportSlackPost,
    TransportSlackPut,
    TransportSms77Get,
    TransportSms77JsonldPost,
    TransportSms77JsonldPut,
    TransportSms77Post,
    TransportSms77Put,
    TransportSmsapiGet,
    TransportSmsapiJsonldPost,
    TransportSmsapiJsonldPut,
    TransportSmsapiPost,
    TransportSmsapiPut,
    TransportSmsBiurasGet,
    TransportSmsBiurasJsonldPost,
    TransportSmsBiurasJsonldPut,
    TransportSmsBiurasPost,
    TransportSmsBiurasPut,
    TransportSmscGet,
    TransportSmscJsonldPost,
    TransportSmscJsonldPut,
    TransportSmscPost,
    TransportSmscPut,
    TransportSmsFactorGet,
    TransportSmsFactorJsonldPost,
    TransportSmsFactorJsonldPut,
    TransportSmsFactorPost,
    TransportSmsFactorPut,
    TransportSmsmodeGet,
    TransportSmsmodeJsonldPost,
    TransportSmsmodeJsonldPut,
    TransportSmsmodePost,
    TransportSmsmodePut,
    TransportSpotHitGet,
    TransportSpotHitJsonldPost,
    TransportSpotHitJsonldPut,
    TransportSpotHitPost,
    TransportSpotHitPut,
    TransportTelegramGet,
    TransportTelegramJsonldPost,
    TransportTelegramJsonldPut,
    TransportTelegramPost,
    TransportTelegramPut,
    TransportTelnyxGet,
    TransportTelnyxJsonldPost,
    TransportTelnyxJsonldPut,
    TransportTelnyxPost,
    TransportTelnyxPut,
    TransportTermiiGet,
    TransportTermiiJsonldPost,
    TransportTermiiJsonldPut,
    TransportTermiiPost,
    TransportTermiiPut,
    TransportTrelloGet,
    TransportTrelloJsonldPost,
    TransportTrelloJsonldPut,
    TransportTrelloPost,
    TransportTrelloPut,
    TransportTurboSmsGet,
    TransportTurboSmsJsonldPost,
    TransportTurboSmsJsonldPut,
    TransportTurboSmsPost,
    TransportTurboSmsPut,
    TransportTwilioGet,
    TransportTwilioJsonldPost,
    TransportTwilioJsonldPut,
    TransportTwilioPost,
    TransportTwilioPut,
    TransportTwitterGet,
    TransportTwitterJsonldPost,
    TransportTwitterJsonldPut,
    TransportTwitterPost,
    TransportTwitterPut,
    TransportVonageGet,
    TransportVonageJsonldPost,
    TransportVonageJsonldPut,
    TransportVonagePost,
    TransportVonagePut,
    TransportWebhookGet,
    TransportWebhookJsonldPost,
    TransportWebhookJsonldPut,
    TransportWebhookPost,
    TransportWebhookPut,
    TransportYunpianGet,
    TransportYunpianJsonldPost,
    TransportYunpianJsonldPut,
    TransportYunpianPost,
    TransportYunpianPut,
    TransportZendeskGet,
    TransportZendeskJsonldPost,
    TransportZendeskJsonldPut,
    TransportZendeskPost,
    TransportZendeskPut,
    TransportZulipGet,
    TransportZulipJsonldPost,
    TransportZulipJsonldPut,
    TransportZulipPost,
    TransportZulipPut,
    UserAccount,
    UserAccountGet,
    UserAccountJsonldPut,
    UserAccountLevelCodeGet,
    UserAccountPut,
)

app = MCPProxy(
    description='<p>This is the <a href="/">Alerter System</a> API playground. More documentation is available at the <a href="/help/developers/">API Help Center</a>.</p><p>The "Available Authorizations" in the Authorize popup only applies to this playground web interface. Other <a href="/help/developers/authorization/">authorizations</a> are available for the actual API.</p>',
    title='Alerter System API',
    version='1.6.0',
    servers=[{'description': '', 'url': '/'}],
)


@app.get(
    '/api/alert-log',
    description=""" Retrieves the collection of AlertLog resources. """,
    tags=[
        'alert_log_management',
        'monitor_management',
        'alert_service_management',
        'partition_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_alert_log_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    monitor: Optional[str] = None,
    monitor__: Optional[Monitor] = Query(None, alias='monitor[]'),
    alert_service: Optional[str] = Query(None, alias='alertService'),
    alert_service__: Optional[AlertService] = Query(None, alias='alertService[]'),
    alert_log_status_code: Optional[str] = Query(None, alias='alertLogStatusCode'),
    alert_log_status_code__: Optional[AlertLogStatusCode] = Query(
        None, alias='alertLogStatusCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of AlertLog resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/alert-log-status-code',
    description=""" Retrieves the collection of AlertLogStatusCode resources. """,
    tags=['alert_log_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_alert_log_status_code_get_collection(
    page: Optional[int] = 1,
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of AlertLogStatusCode resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/alert-log-status-code/{id}',
    description=""" Retrieves a AlertLogStatusCode resource. """,
    tags=['alert_log_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_alert_log_status_code_id_get(id: str):
    """
    Retrieves a AlertLogStatusCode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/alert-log/{id}',
    description=""" Retrieves a AlertLog resource. """,
    tags=['alert_log_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_alert_log_id_get(id: str):
    """
    Retrieves a AlertLog resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/alert-service',
    description=""" Retrieves the collection of AlertService resources. """,
    tags=['alert_service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_alert_service_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of AlertService resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/alert-service',
    description=""" Creates a AlertService resource. """,
    tags=['alert_service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_alert_service_post(body: AlertServicePost):
    """
    Creates a AlertService resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/alert-service-transport-code',
    description=""" Retrieves the collection of AlertServiceTransportCode resources. """,
    tags=['alert_service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_alert_service_transport_code_get_collection(
    page: Optional[int] = 1,
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of AlertServiceTransportCode resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/alert-service-transport-code/{id}',
    description=""" Retrieves a AlertServiceTransportCode resource. """,
    tags=['alert_service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_alert_service_transport_code_id_get(id: str):
    """
    Retrieves a AlertServiceTransportCode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/alert-service/{id}',
    description=""" Removes the AlertService resource. """,
    tags=['alert_service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_alert_service_id_delete(id: str):
    """
    Removes the AlertService resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/alert-service/{id}',
    description=""" Retrieves a AlertService resource. """,
    tags=['alert_service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_alert_service_id_get(id: str):
    """
    Retrieves a AlertService resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/alert-service/{id}',
    description=""" Replaces the AlertService resource. """,
    tags=['alert_service_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_alert_service_id_put(id: str, body: AlertServicePut = ...):
    """
    Replaces the AlertService resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/credits-consumption',
    description=""" Retrieves the collection of CreditsConsumption resources. """,
    tags=['credits_consumption_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_credits_consumption_get_collection(
    page: Optional[int] = 1,
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of CreditsConsumption resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/credits-consumption/{id}',
    description=""" Retrieves a CreditsConsumption resource. """,
    tags=['credits_consumption_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_credits_consumption_id_get(id: str):
    """
    Retrieves a CreditsConsumption resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/http-method-code',
    description=""" Retrieves the collection of HttpMethodCode resources. """,
    tags=['http_method_code_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_http_method_code_get_collection(
    page: Optional[int] = 1,
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of HttpMethodCode resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/http-method-code/{id}',
    description=""" Retrieves a HttpMethodCode resource. """,
    tags=['http_method_code_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_http_method_code_id_get(id: str):
    """
    Retrieves a HttpMethodCode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/media-object',
    description=""" Retrieves the collection of MediaObject resources. """,
    tags=['media_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_media_object_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of MediaObject resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/media-object',
    description=""" Creates a MediaObject resource. """,
    tags=['media_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_media_object_post(file: UploadFile):
    """
    Creates a MediaObject resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/media-object/{id}',
    description=""" Removes the MediaObject resource. """,
    tags=['media_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_media_object_id_delete(id: str):
    """
    Removes the MediaObject resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/media-object/{id}',
    description=""" Retrieves a MediaObject resource. """,
    tags=['media_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_media_object_id_get(id: str):
    """
    Retrieves a MediaObject resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/monitor',
    description=""" Retrieves the collection of Monitor resources. """,
    tags=['monitor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_monitor_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of Monitor resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/monitor',
    description=""" Creates a Monitor resource. """,
    tags=['monitor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_monitor_post(body: MonitorPost):
    """
    Creates a Monitor resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/monitor-status-code',
    description=""" Retrieves the collection of MonitorStatusCode resources. """,
    tags=['monitor_management', 'monitor_status_log_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_monitor_status_code_get_collection(
    page: Optional[int] = 1,
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of MonitorStatusCode resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/monitor-status-code/{id}',
    description=""" Retrieves a MonitorStatusCode resource. """,
    tags=['monitor_management', 'monitor_status_log_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_monitor_status_code_id_get(id: str):
    """
    Retrieves a MonitorStatusCode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/monitor-status-log',
    description=""" Retrieves the collection of MonitorStatusLog resources. """,
    tags=['monitor_management', 'monitor_status_log_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_monitor_status_log_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    monitor: Optional[str] = None,
    monitor__: Optional[Monitor] = Query(None, alias='monitor[]'),
    monitor_status_code: Optional[str] = Query(None, alias='monitorStatusCode'),
    monitor_status_code__: Optional[MonitorStatusCode] = Query(
        None, alias='monitorStatusCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of MonitorStatusLog resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/monitor-status-log/{id}',
    description=""" Retrieves a MonitorStatusLog resource. """,
    tags=['monitor_status_log_management', 'monitor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_monitor_status_log_id_get(id: str):
    """
    Retrieves a MonitorStatusLog resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/monitor-type-code',
    description=""" Retrieves the collection of MonitorTypeCode resources. """,
    tags=['monitor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_monitor_type_code_get_collection(
    page: Optional[int] = 1,
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of MonitorTypeCode resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/monitor-type-code/{id}',
    description=""" Retrieves a MonitorTypeCode resource. """,
    tags=['monitor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_monitor_type_code_id_get(id: str):
    """
    Retrieves a MonitorTypeCode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/monitor/{id}',
    description=""" Removes the Monitor resource. """,
    tags=['monitor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_monitor_id_delete(id: str):
    """
    Removes the Monitor resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/monitor/{id}',
    description=""" Retrieves a Monitor resource. """,
    tags=['monitor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_monitor_id_get(id: str):
    """
    Retrieves a Monitor resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/monitor/{id}',
    description=""" Replaces the Monitor resource. """,
    tags=['monitor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_monitor_id_put(id: str, body: MonitorPut = ...):
    """
    Replaces the Monitor resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/partition',
    description=""" Retrieves the collection of Partition resources. """,
    tags=['partition_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_partition_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of Partition resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/partition',
    description=""" Creates a Partition resource. """,
    tags=['partition_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_partition_post(body: PartitionPost):
    """
    Creates a Partition resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/partition/{id}',
    description=""" Removes the Partition resource. """,
    tags=['partition_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_partition_id_delete(id: str):
    """
    Removes the Partition resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/partition/{id}',
    description=""" Retrieves a Partition resource. """,
    tags=['partition_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_partition_id_get(id: str):
    """
    Retrieves a Partition resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/partition/{id}',
    description=""" Replaces the Partition resource. """,
    tags=['partition_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_partition_id_put(id: str, body: PartitionPut = ...):
    """
    Replaces the Partition resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/ping',
    description=""" Retrieves the collection of Ping resources. """,
    tags=['ping_management', 'monitor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_ping_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    monitor: Optional[str] = None,
    monitor__: Optional[Monitor] = Query(None, alias='monitor[]'),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of Ping resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/ping',
    description=""" Creates a Ping resource. """,
    tags=['ping_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_ping_post(body: PingPost):
    """
    Creates a Ping resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/ping-method-code',
    description=""" Retrieves the collection of PingMethodCode resources. """,
    tags=['ping_method_code_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_ping_method_code_get_collection(
    page: Optional[int] = 1,
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of PingMethodCode resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/ping-method-code/{id}',
    description=""" Retrieves a PingMethodCode resource. """,
    tags=['ping_method_code_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_ping_method_code_id_get(id: str):
    """
    Retrieves a PingMethodCode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/ping/{id}',
    description=""" Retrieves a Ping resource. """,
    tags=['ping_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_ping_id_get(id: str):
    """
    Retrieves a Ping resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/team-invitation',
    description=""" Retrieves the collection of TeamInvitation resources. """,
    tags=['team_invitation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_team_invitation_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    invitee_email: Optional[str] = Query(None, alias='inviteeEmail'),
    invitee_email__: Optional[InviteeEmail] = Query(None, alias='inviteeEmail[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TeamInvitation resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/team-invitation',
    description=""" Creates a TeamInvitation resource. """,
    tags=['team_invitation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_team_invitation_post(body: TeamInvitationPost):
    """
    Creates a TeamInvitation resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/team-invitation/{id}',
    description=""" Removes the TeamInvitation resource. """,
    tags=['team_invitation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_team_invitation_id_delete(id: str):
    """
    Removes the TeamInvitation resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/team-invitation/{id}',
    description=""" Retrieves a TeamInvitation resource. """,
    tags=['team_invitation_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_team_invitation_id_get(id: str):
    """
    Retrieves a TeamInvitation resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/team-member',
    description=""" Retrieves the collection of TeamMember resources. """,
    tags=['team_member_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_team_member_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    user_account: Optional[str] = Query(None, alias='userAccount'),
    user_account__: Optional[UserAccount] = Query(None, alias='userAccount[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TeamMember resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/team-member-role-code',
    description=""" Retrieves the collection of TeamMemberRoleCode resources. """,
    tags=['team_member_role_code_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_team_member_role_code_get_collection(
    page: Optional[int] = 1,
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TeamMemberRoleCode resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/team-member-role-code/{id}',
    description=""" Retrieves a TeamMemberRoleCode resource. """,
    tags=['team_member_role_code_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_team_member_role_code_id_get(id: str):
    """
    Retrieves a TeamMemberRoleCode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/team-member/{id}',
    description=""" Removes the TeamMember resource. """,
    tags=['team_member_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_team_member_id_delete(id: str):
    """
    Removes the TeamMember resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/team-member/{id}',
    description=""" Retrieves a TeamMember resource. """,
    tags=['team_member_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_team_member_id_get(id: str):
    """
    Retrieves a TeamMember resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/team-member/{id}',
    description=""" Replaces the TeamMember resource. """,
    tags=['team_member_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_team_member_id_put(id: str, body: TeamMemberPut = ...):
    """
    Replaces the TeamMember resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/timezone-code',
    description=""" Retrieves the collection of TimezoneCode resources. """,
    tags=['timezone_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_timezone_code_get_collection(
    page: Optional[int] = 1,
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TimezoneCode resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/timezone-code/{id}',
    description=""" Retrieves a TimezoneCode resource. """,
    tags=['timezone_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_timezone_code_id_get(id: str):
    """
    Retrieves a TimezoneCode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-alerta',
    description=""" Retrieves the collection of TransportAlerta resources. """,
    tags=['transport_alerta_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_alerta_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportAlerta resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-alerta',
    description=""" Creates a TransportAlerta resource. """,
    tags=['transport_alerta_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_alerta_post(body: TransportAlertaPost):
    """
    Creates a TransportAlerta resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-alerta/{id}',
    description=""" Removes the TransportAlerta resource. """,
    tags=['transport_alerta_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_alerta_id_delete(id: str):
    """
    Removes the TransportAlerta resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-alerta/{id}',
    description=""" Retrieves a TransportAlerta resource. """,
    tags=['transport_alerta_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_alerta_id_get(id: str):
    """
    Retrieves a TransportAlerta resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-alerta/{id}',
    description=""" Replaces the TransportAlerta resource. """,
    tags=['transport_alerta_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_alerta_id_put(id: str, body: TransportAlertaPut = ...):
    """
    Replaces the TransportAlerta resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-all-my-sms',
    description=""" Retrieves the collection of TransportAllMySms resources. """,
    tags=['transport_all_my_sms_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_all_my_sms_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportAllMySms resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-all-my-sms',
    description=""" Creates a TransportAllMySms resource. """,
    tags=['transport_all_my_sms_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_all_my_sms_post(body: TransportAllMySmsPost):
    """
    Creates a TransportAllMySms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-all-my-sms/{id}',
    description=""" Removes the TransportAllMySms resource. """,
    tags=['transport_all_my_sms_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_all_my_sms_id_delete(id: str):
    """
    Removes the TransportAllMySms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-all-my-sms/{id}',
    description=""" Retrieves a TransportAllMySms resource. """,
    tags=['transport_all_my_sms_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_all_my_sms_id_get(id: str):
    """
    Retrieves a TransportAllMySms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-all-my-sms/{id}',
    description=""" Replaces the TransportAllMySms resource. """,
    tags=['transport_all_my_sms_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_all_my_sms_id_put(id: str, body: TransportAllMySmsPut = ...):
    """
    Replaces the TransportAllMySms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-amazon-sns',
    description=""" Retrieves the collection of TransportAmazonSns resources. """,
    tags=['transport_sns_operations', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_amazon_sns_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportAmazonSns resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-amazon-sns',
    description=""" Creates a TransportAmazonSns resource. """,
    tags=['transport_sns_operations', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_amazon_sns_post(body: TransportAmazonSnsPost):
    """
    Creates a TransportAmazonSns resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-amazon-sns/{id}',
    description=""" Removes the TransportAmazonSns resource. """,
    tags=['transport_sns_operations', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_amazon_sns_id_delete(id: str):
    """
    Removes the TransportAmazonSns resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-amazon-sns/{id}',
    description=""" Retrieves a TransportAmazonSns resource. """,
    tags=['transport_sns_operations', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_amazon_sns_id_get(id: str):
    """
    Retrieves a TransportAmazonSns resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-amazon-sns/{id}',
    description=""" Replaces the TransportAmazonSns resource. """,
    tags=['transport_sns_operations', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_amazon_sns_id_put(id: str, body: TransportAmazonSnsPut = ...):
    """
    Replaces the TransportAmazonSns resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-bandwidth',
    description=""" Retrieves the collection of TransportBandwidth resources. """,
    tags=['transport_bandwidth_operations', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_bandwidth_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportBandwidth resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-bandwidth',
    description=""" Creates a TransportBandwidth resource. """,
    tags=['transport_bandwidth_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_bandwidth_post(body: TransportBandwidthPost):
    """
    Creates a TransportBandwidth resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-bandwidth/{id}',
    description=""" Removes the TransportBandwidth resource. """,
    tags=['transport_bandwidth_operations', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_bandwidth_id_delete(id: str):
    """
    Removes the TransportBandwidth resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-bandwidth/{id}',
    description=""" Retrieves a TransportBandwidth resource. """,
    tags=['transport_bandwidth_operations', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_bandwidth_id_get(id: str):
    """
    Retrieves a TransportBandwidth resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-bandwidth/{id}',
    description=""" Replaces the TransportBandwidth resource. """,
    tags=['transport_bandwidth_operations', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_bandwidth_id_put(id: str, body: TransportBandwidthPut = ...):
    """
    Replaces the TransportBandwidth resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-chatwork',
    description=""" Retrieves the collection of TransportChatwork resources. """,
    tags=['transport_chatwork_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_chatwork_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportChatwork resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-chatwork',
    description=""" Creates a TransportChatwork resource. """,
    tags=['transport_chatwork_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_chatwork_post(body: TransportChatworkPost):
    """
    Creates a TransportChatwork resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-chatwork/{id}',
    description=""" Removes the TransportChatwork resource. """,
    tags=['transport_chatwork_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_chatwork_id_delete(id: str):
    """
    Removes the TransportChatwork resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-chatwork/{id}',
    description=""" Retrieves a TransportChatwork resource. """,
    tags=['transport_chatwork_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_chatwork_id_get(id: str):
    """
    Retrieves a TransportChatwork resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-chatwork/{id}',
    description=""" Replaces the TransportChatwork resource. """,
    tags=['transport_chatwork_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_chatwork_id_put(id: str, body: TransportChatworkPut = ...):
    """
    Replaces the TransportChatwork resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-click-send',
    description=""" Retrieves the collection of TransportClickSend resources. """,
    tags=['transport_click_send_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_click_send_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportClickSend resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-click-send',
    description=""" Creates a TransportClickSend resource. """,
    tags=['transport_click_send_operations', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_click_send_post(body: TransportClickSendPost):
    """
    Creates a TransportClickSend resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-click-send/{id}',
    description=""" Removes the TransportClickSend resource. """,
    tags=['transport_click_send_operations', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_click_send_id_delete(id: str):
    """
    Removes the TransportClickSend resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-click-send/{id}',
    description=""" Retrieves a TransportClickSend resource. """,
    tags=['transport_click_send_operations', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_click_send_id_get(id: str):
    """
    Retrieves a TransportClickSend resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-click-send/{id}',
    description=""" Replaces the TransportClickSend resource. """,
    tags=['transport_click_send_operations', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_click_send_id_put(id: str, body: TransportClickSendPut = ...):
    """
    Replaces the TransportClickSend resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-clickatell',
    description=""" Retrieves the collection of TransportClickatell resources. """,
    tags=['transport_clickatell_operations', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_clickatell_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportClickatell resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-clickatell',
    description=""" Creates a TransportClickatell resource. """,
    tags=['transport_clickatell_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_clickatell_post(body: TransportClickatellPost):
    """
    Creates a TransportClickatell resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-clickatell/{id}',
    description=""" Removes the TransportClickatell resource. """,
    tags=['transport_clickatell_operations', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_clickatell_id_delete(id: str):
    """
    Removes the TransportClickatell resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-clickatell/{id}',
    description=""" Retrieves a TransportClickatell resource. """,
    tags=['transport_clickatell_operations', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_clickatell_id_get(id: str):
    """
    Retrieves a TransportClickatell resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-clickatell/{id}',
    description=""" Replaces the TransportClickatell resource. """,
    tags=['transport_clickatell_operations', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_clickatell_id_put(id: str, body: TransportClickatellPut = ...):
    """
    Replaces the TransportClickatell resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-contact-everyone',
    description=""" Retrieves the collection of TransportContactEveryone resources. """,
    tags=['transport_contact_everyone_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_contact_everyone_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportContactEveryone resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-contact-everyone',
    description=""" Creates a TransportContactEveryone resource. """,
    tags=['transport_contact_everyone_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_contact_everyone_post(body: TransportContactEveryonePost):
    """
    Creates a TransportContactEveryone resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-contact-everyone/{id}',
    description=""" Removes the TransportContactEveryone resource. """,
    tags=['transport_contact_everyone_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_contact_everyone_id_delete(id: str):
    """
    Removes the TransportContactEveryone resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-contact-everyone/{id}',
    description=""" Retrieves a TransportContactEveryone resource. """,
    tags=['transport_contact_everyone_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_contact_everyone_id_get(id: str):
    """
    Retrieves a TransportContactEveryone resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-contact-everyone/{id}',
    description=""" Replaces the TransportContactEveryone resource. """,
    tags=['transport_contact_everyone_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_contact_everyone_id_put(
    id: str, body: TransportContactEveryonePut = ...
):
    """
    Replaces the TransportContactEveryone resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-discord',
    description=""" Retrieves the collection of TransportDiscord resources. """,
    tags=['transport_discord_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_discord_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportDiscord resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-discord',
    description=""" Creates a TransportDiscord resource. """,
    tags=['transport_discord_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_discord_post(body: TransportDiscordPost):
    """
    Creates a TransportDiscord resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-discord/{id}',
    description=""" Removes the TransportDiscord resource. """,
    tags=['transport_discord_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_discord_id_delete(id: str):
    """
    Removes the TransportDiscord resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-discord/{id}',
    description=""" Retrieves a TransportDiscord resource. """,
    tags=['transport_discord_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_discord_id_get(id: str):
    """
    Retrieves a TransportDiscord resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-discord/{id}',
    description=""" Replaces the TransportDiscord resource. """,
    tags=['transport_discord_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_discord_id_put(id: str, body: TransportDiscordPut = ...):
    """
    Replaces the TransportDiscord resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-email',
    description=""" Retrieves the collection of TransportEmail resources. """,
    tags=['transport_email_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_email_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportEmail resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-email',
    description=""" Creates a TransportEmail resource. """,
    tags=['transport_email_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_email_post(body: TransportEmailPost):
    """
    Creates a TransportEmail resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-email/{id}',
    description=""" Removes the TransportEmail resource. """,
    tags=['transport_email_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_email_id_delete(id: str):
    """
    Removes the TransportEmail resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-email/{id}',
    description=""" Retrieves a TransportEmail resource. """,
    tags=['transport_email_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_email_id_get(id: str):
    """
    Retrieves a TransportEmail resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-email/{id}',
    description=""" Replaces the TransportEmail resource. """,
    tags=['transport_email_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_email_id_put(id: str, body: TransportEmailPut = ...):
    """
    Replaces the TransportEmail resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-engagespot',
    description=""" Retrieves the collection of TransportEngagespot resources. """,
    tags=['transport_engagespot_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_engagespot_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportEngagespot resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-engagespot',
    description=""" Creates a TransportEngagespot resource. """,
    tags=['transport_engagespot_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_engagespot_post(body: TransportEngagespotPost):
    """
    Creates a TransportEngagespot resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-engagespot/{id}',
    description=""" Removes the TransportEngagespot resource. """,
    tags=['transport_engagespot_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_engagespot_id_delete(id: str):
    """
    Removes the TransportEngagespot resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-engagespot/{id}',
    description=""" Retrieves a TransportEngagespot resource. """,
    tags=['transport_engagespot_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_engagespot_id_get(id: str):
    """
    Retrieves a TransportEngagespot resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-engagespot/{id}',
    description=""" Replaces the TransportEngagespot resource. """,
    tags=['transport_engagespot_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_engagespot_id_put(id: str, body: TransportEngagespotPut = ...):
    """
    Replaces the TransportEngagespot resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-esendex',
    description=""" Retrieves the collection of TransportEsendex resources. """,
    tags=['transport_esendex_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_esendex_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportEsendex resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-esendex',
    description=""" Creates a TransportEsendex resource. """,
    tags=['transport_esendex_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_esendex_post(body: TransportEsendexPost):
    """
    Creates a TransportEsendex resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-esendex/{id}',
    description=""" Removes the TransportEsendex resource. """,
    tags=['transport_esendex_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_esendex_id_delete(id: str):
    """
    Removes the TransportEsendex resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-esendex/{id}',
    description=""" Retrieves a TransportEsendex resource. """,
    tags=['transport_esendex_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_esendex_id_get(id: str):
    """
    Retrieves a TransportEsendex resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-esendex/{id}',
    description=""" Replaces the TransportEsendex resource. """,
    tags=['transport_esendex_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_esendex_id_put(id: str, body: TransportEsendexPut = ...):
    """
    Replaces the TransportEsendex resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-expo',
    description=""" Retrieves the collection of TransportExpo resources. """,
    tags=['transport_expo_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_expo_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportExpo resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-expo',
    description=""" Creates a TransportExpo resource. """,
    tags=[
        'transport_expo_management',
        'transport_resource_creation',
        'transport_resource_modification',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_expo_post(body: TransportExpoPost):
    """
    Creates a TransportExpo resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-expo/{id}',
    description=""" Removes the TransportExpo resource. """,
    tags=['transport_expo_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_expo_id_delete(id: str):
    """
    Removes the TransportExpo resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-expo/{id}',
    description=""" Retrieves a TransportExpo resource. """,
    tags=['transport_expo_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_expo_id_get(id: str):
    """
    Retrieves a TransportExpo resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-expo/{id}',
    description=""" Replaces the TransportExpo resource. """,
    tags=['transport_expo_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_expo_id_put(id: str, body: TransportExpoPut = ...):
    """
    Replaces the TransportExpo resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-firebase',
    description=""" Retrieves the collection of TransportFirebase resources. """,
    tags=[
        'transport_firebase_management',
        'transport_firebase_operations',
        'transport_resource_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_firebase_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportFirebase resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-firebase',
    description=""" Creates a TransportFirebase resource. """,
    tags=['transport_firebase_management', 'transport_firebase_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_firebase_post(body: TransportFirebasePost):
    """
    Creates a TransportFirebase resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-firebase/{id}',
    description=""" Removes the TransportFirebase resource. """,
    tags=['transport_firebase_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_firebase_id_delete(id: str):
    """
    Removes the TransportFirebase resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-firebase/{id}',
    description=""" Retrieves a TransportFirebase resource. """,
    tags=['transport_firebase_management', 'transport_firebase_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_firebase_id_get(id: str):
    """
    Retrieves a TransportFirebase resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-firebase/{id}',
    description=""" Replaces the TransportFirebase resource. """,
    tags=[
        'transport_firebase_management',
        'transport_firebase_operations',
        'transport_resource_modification',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_firebase_id_put(id: str, body: TransportFirebasePut = ...):
    """
    Replaces the TransportFirebase resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-forty-six-elks',
    description=""" Retrieves the collection of TransportFortySixElks resources. """,
    tags=['transport_forty_six_elks_operations', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_forty_six_elks_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportFortySixElks resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-forty-six-elks',
    description=""" Creates a TransportFortySixElks resource. """,
    tags=['transport_forty_six_elks_operations', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_forty_six_elks_post(body: TransportFortySixElksPost):
    """
    Creates a TransportFortySixElks resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-forty-six-elks/{id}',
    description=""" Removes the TransportFortySixElks resource. """,
    tags=['transport_forty_six_elks_operations', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_forty_six_elks_id_delete(id: str):
    """
    Removes the TransportFortySixElks resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-forty-six-elks/{id}',
    description=""" Retrieves a TransportFortySixElks resource. """,
    tags=['transport_forty_six_elks_operations', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_forty_six_elks_id_get(id: str):
    """
    Retrieves a TransportFortySixElks resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-forty-six-elks/{id}',
    description=""" Replaces the TransportFortySixElks resource. """,
    tags=['transport_forty_six_elks_operations', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_forty_six_elks_id_put(id: str, body: TransportFortySixElksPut = ...):
    """
    Replaces the TransportFortySixElks resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-free-mobile',
    description=""" Retrieves the collection of TransportFreeMobile resources. """,
    tags=['transport_free_mobile_operations', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_free_mobile_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportFreeMobile resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-free-mobile',
    description=""" Creates a TransportFreeMobile resource. """,
    tags=['transport_free_mobile_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_free_mobile_post(body: TransportFreeMobilePost):
    """
    Creates a TransportFreeMobile resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-free-mobile/{id}',
    description=""" Removes the TransportFreeMobile resource. """,
    tags=['transport_free_mobile_operations', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_free_mobile_id_delete(id: str):
    """
    Removes the TransportFreeMobile resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-free-mobile/{id}',
    description=""" Retrieves a TransportFreeMobile resource. """,
    tags=['transport_free_mobile_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_free_mobile_id_get(id: str):
    """
    Retrieves a TransportFreeMobile resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-free-mobile/{id}',
    description=""" Replaces the TransportFreeMobile resource. """,
    tags=['transport_free_mobile_operations', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_free_mobile_id_put(id: str, body: TransportFreeMobilePut = ...):
    """
    Replaces the TransportFreeMobile resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-freshdesk',
    description=""" Retrieves the collection of TransportFreshdesk resources. """,
    tags=['transport_freshdesk_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_freshdesk_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportFreshdesk resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-freshdesk',
    description=""" Creates a TransportFreshdesk resource. """,
    tags=['transport_freshdesk_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_freshdesk_post(body: TransportFreshdeskPost):
    """
    Creates a TransportFreshdesk resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-freshdesk/{id}',
    description=""" Removes the TransportFreshdesk resource. """,
    tags=['transport_freshdesk_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_freshdesk_id_delete(id: str):
    """
    Removes the TransportFreshdesk resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-freshdesk/{id}',
    description=""" Retrieves a TransportFreshdesk resource. """,
    tags=['transport_freshdesk_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_freshdesk_id_get(id: str):
    """
    Retrieves a TransportFreshdesk resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-freshdesk/{id}',
    description=""" Replaces the TransportFreshdesk resource. """,
    tags=['transport_freshdesk_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_freshdesk_id_put(id: str, body: TransportFreshdeskPut = ...):
    """
    Replaces the TransportFreshdesk resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-gateway-api',
    description=""" Retrieves the collection of TransportGatewayApi resources. """,
    tags=['transport_gateway_api_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gateway_api_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportGatewayApi resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-gateway-api',
    description=""" Creates a TransportGatewayApi resource. """,
    tags=['transport_gateway_api_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gateway_api_post(body: TransportGatewayApiPost):
    """
    Creates a TransportGatewayApi resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-gateway-api/{id}',
    description=""" Removes the TransportGatewayApi resource. """,
    tags=['transport_gateway_api_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gateway_api_id_delete(id: str):
    """
    Removes the TransportGatewayApi resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-gateway-api/{id}',
    description=""" Retrieves a TransportGatewayApi resource. """,
    tags=['transport_gateway_api_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gateway_api_id_get(id: str):
    """
    Retrieves a TransportGatewayApi resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-gateway-api/{id}',
    description=""" Replaces the TransportGatewayApi resource. """,
    tags=['transport_gateway_api_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gateway_api_id_put(id: str, body: TransportGatewayApiPut = ...):
    """
    Replaces the TransportGatewayApi resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-gitter',
    description=""" Retrieves the collection of TransportGitter resources. """,
    tags=['transport_gitter_operations', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gitter_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportGitter resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-gitter',
    description=""" Creates a TransportGitter resource. """,
    tags=['transport_gitter_operations', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gitter_post(body: TransportGitterPost):
    """
    Creates a TransportGitter resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-gitter/{id}',
    description=""" Removes the TransportGitter resource. """,
    tags=['transport_gitter_operations', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gitter_id_delete(id: str):
    """
    Removes the TransportGitter resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-gitter/{id}',
    description=""" Retrieves a TransportGitter resource. """,
    tags=['transport_gitter_operations', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gitter_id_get(id: str):
    """
    Retrieves a TransportGitter resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-gitter/{id}',
    description=""" Replaces the TransportGitter resource. """,
    tags=['transport_gitter_operations', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gitter_id_put(id: str, body: TransportGitterPut = ...):
    """
    Replaces the TransportGitter resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-google-chat',
    description=""" Retrieves the collection of TransportGoogleChat resources. """,
    tags=['transport_google_chat_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_google_chat_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportGoogleChat resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-google-chat',
    description=""" Creates a TransportGoogleChat resource. """,
    tags=['transport_google_chat_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_google_chat_post(body: TransportGoogleChatPost):
    """
    Creates a TransportGoogleChat resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-google-chat/{id}',
    description=""" Removes the TransportGoogleChat resource. """,
    tags=['transport_google_chat_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_google_chat_id_delete(id: str):
    """
    Removes the TransportGoogleChat resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-google-chat/{id}',
    description=""" Retrieves a TransportGoogleChat resource. """,
    tags=['transport_google_chat_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_google_chat_id_get(id: str):
    """
    Retrieves a TransportGoogleChat resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-google-chat/{id}',
    description=""" Replaces the TransportGoogleChat resource. """,
    tags=['transport_google_chat_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_google_chat_id_put(id: str, body: TransportGoogleChatPut = ...):
    """
    Replaces the TransportGoogleChat resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-gotify',
    description=""" Retrieves the collection of TransportGotify resources. """,
    tags=['transport_gotify_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gotify_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportGotify resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-gotify',
    description=""" Creates a TransportGotify resource. """,
    tags=['transport_gotify_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gotify_post(body: TransportGotifyPost):
    """
    Creates a TransportGotify resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-gotify/{id}',
    description=""" Removes the TransportGotify resource. """,
    tags=['transport_gotify_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gotify_id_delete(id: str):
    """
    Removes the TransportGotify resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-gotify/{id}',
    description=""" Retrieves a TransportGotify resource. """,
    tags=['transport_gotify_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gotify_id_get(id: str):
    """
    Retrieves a TransportGotify resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-gotify/{id}',
    description=""" Replaces the TransportGotify resource. """,
    tags=['transport_gotify_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_gotify_id_put(id: str, body: TransportGotifyPut = ...):
    """
    Replaces the TransportGotify resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-help-scout',
    description=""" Retrieves the collection of TransportHelpScout resources. """,
    tags=['transport_help_scout_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_help_scout_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportHelpScout resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-help-scout',
    description=""" Creates a TransportHelpScout resource. """,
    tags=['transport_help_scout_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_help_scout_post(body: TransportHelpScoutPost):
    """
    Creates a TransportHelpScout resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-help-scout/{id}',
    description=""" Removes the TransportHelpScout resource. """,
    tags=['transport_help_scout_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_help_scout_id_delete(id: str):
    """
    Removes the TransportHelpScout resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-help-scout/{id}',
    description=""" Retrieves a TransportHelpScout resource. """,
    tags=['transport_help_scout_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_help_scout_id_get(id: str):
    """
    Retrieves a TransportHelpScout resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-help-scout/{id}',
    description=""" Replaces the TransportHelpScout resource. """,
    tags=['transport_help_scout_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_help_scout_id_put(id: str, body: TransportHelpScoutPut = ...):
    """
    Replaces the TransportHelpScout resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-infobip',
    description=""" Retrieves the collection of TransportInfobip resources. """,
    tags=['transport_infobip_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_infobip_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportInfobip resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-infobip',
    description=""" Creates a TransportInfobip resource. """,
    tags=['transport_infobip_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_infobip_post(body: TransportInfobipPost):
    """
    Creates a TransportInfobip resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-infobip/{id}',
    description=""" Removes the TransportInfobip resource. """,
    tags=['transport_infobip_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_infobip_id_delete(id: str):
    """
    Removes the TransportInfobip resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-infobip/{id}',
    description=""" Retrieves a TransportInfobip resource. """,
    tags=['transport_infobip_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_infobip_id_get(id: str):
    """
    Retrieves a TransportInfobip resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-infobip/{id}',
    description=""" Replaces the TransportInfobip resource. """,
    tags=['transport_infobip_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_infobip_id_put(id: str, body: TransportInfobipPut = ...):
    """
    Replaces the TransportInfobip resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-iqsms',
    description=""" Retrieves the collection of TransportIqsms resources. """,
    tags=['transport_iqsms_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_iqsms_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportIqsms resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-iqsms',
    description=""" Creates a TransportIqsms resource. """,
    tags=['transport_iqsms_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_iqsms_post(body: TransportIqsmsPost):
    """
    Creates a TransportIqsms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-iqsms/{id}',
    description=""" Removes the TransportIqsms resource. """,
    tags=['transport_iqsms_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_iqsms_id_delete(id: str):
    """
    Removes the TransportIqsms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-iqsms/{id}',
    description=""" Retrieves a TransportIqsms resource. """,
    tags=['transport_iqsms_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_iqsms_id_get(id: str):
    """
    Retrieves a TransportIqsms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-iqsms/{id}',
    description=""" Replaces the TransportIqsms resource. """,
    tags=['transport_iqsms_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_iqsms_id_put(id: str, body: TransportIqsmsPut = ...):
    """
    Replaces the TransportIqsms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-kaz-info-teh',
    description=""" Retrieves the collection of TransportKazInfoTeh resources. """,
    tags=['transport_kaz_info_teh_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_kaz_info_teh_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportKazInfoTeh resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-kaz-info-teh',
    description=""" Creates a TransportKazInfoTeh resource. """,
    tags=['transport_kaz_info_teh_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_kaz_info_teh_post(body: TransportKazInfoTehPost):
    """
    Creates a TransportKazInfoTeh resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-kaz-info-teh/{id}',
    description=""" Removes the TransportKazInfoTeh resource. """,
    tags=['transport_kaz_info_teh_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_kaz_info_teh_id_delete(id: str):
    """
    Removes the TransportKazInfoTeh resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-kaz-info-teh/{id}',
    description=""" Retrieves a TransportKazInfoTeh resource. """,
    tags=['transport_kaz_info_teh_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_kaz_info_teh_id_get(id: str):
    """
    Retrieves a TransportKazInfoTeh resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-kaz-info-teh/{id}',
    description=""" Replaces the TransportKazInfoTeh resource. """,
    tags=['transport_kaz_info_teh_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_kaz_info_teh_id_put(id: str, body: TransportKazInfoTehPut = ...):
    """
    Replaces the TransportKazInfoTeh resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-light-sms',
    description=""" Retrieves the collection of TransportLightSms resources. """,
    tags=[
        'transport_light_sms_management',
        'transport_sms_management',
        'transport_resource_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_light_sms_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportLightSms resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-light-sms',
    description=""" Creates a TransportLightSms resource. """,
    tags=[
        'transport_light_sms_management',
        'transport_sms_management',
        'transport_resource_creation',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_light_sms_post(body: TransportLightSmsPost):
    """
    Creates a TransportLightSms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-light-sms/{id}',
    description=""" Removes the TransportLightSms resource. """,
    tags=[
        'transport_light_sms_management',
        'transport_sms_management',
        'transport_resource_deletion',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_light_sms_id_delete(id: str):
    """
    Removes the TransportLightSms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-light-sms/{id}',
    description=""" Retrieves a TransportLightSms resource. """,
    tags=[
        'transport_light_sms_management',
        'transport_sms_management',
        'transport_resource_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_light_sms_id_get(id: str):
    """
    Retrieves a TransportLightSms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-light-sms/{id}',
    description=""" Replaces the TransportLightSms resource. """,
    tags=[
        'transport_light_sms_management',
        'transport_sms_management',
        'transport_resource_modification',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_light_sms_id_put(id: str, body: TransportLightSmsPut = ...):
    """
    Replaces the TransportLightSms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-line-notify',
    description=""" Retrieves the collection of TransportLineNotify resources. """,
    tags=['transport_line_notify_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_line_notify_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportLineNotify resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-line-notify',
    description=""" Creates a TransportLineNotify resource. """,
    tags=[
        'transport_line_notify_management',
        'transport_resource_creation',
        'transport_resource_modification',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_line_notify_post(body: TransportLineNotifyPost):
    """
    Creates a TransportLineNotify resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-line-notify/{id}',
    description=""" Removes the TransportLineNotify resource. """,
    tags=['transport_line_notify_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_line_notify_id_delete(id: str):
    """
    Removes the TransportLineNotify resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-line-notify/{id}',
    description=""" Retrieves a TransportLineNotify resource. """,
    tags=['transport_line_notify_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_line_notify_id_get(id: str):
    """
    Retrieves a TransportLineNotify resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-line-notify/{id}',
    description=""" Replaces the TransportLineNotify resource. """,
    tags=['transport_line_notify_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_line_notify_id_put(id: str, body: TransportLineNotifyPut = ...):
    """
    Replaces the TransportLineNotify resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-linked-in',
    description=""" Retrieves the collection of TransportLinkedIn resources. """,
    tags=['transport_linked_in_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_linked_in_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportLinkedIn resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-linked-in',
    description=""" Creates a TransportLinkedIn resource. """,
    tags=['transport_linked_in_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_linked_in_post(body: TransportLinkedInPost):
    """
    Creates a TransportLinkedIn resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-linked-in/{id}',
    description=""" Removes the TransportLinkedIn resource. """,
    tags=['transport_linked_in_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_linked_in_id_delete(id: str):
    """
    Removes the TransportLinkedIn resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-linked-in/{id}',
    description=""" Retrieves a TransportLinkedIn resource. """,
    tags=['transport_linked_in_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_linked_in_id_get(id: str):
    """
    Retrieves a TransportLinkedIn resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-linked-in/{id}',
    description=""" Replaces the TransportLinkedIn resource. """,
    tags=['transport_linked_in_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_linked_in_id_put(id: str, body: TransportLinkedInPut = ...):
    """
    Replaces the TransportLinkedIn resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-mailjet',
    description=""" Retrieves the collection of TransportMailjet resources. """,
    tags=['transport_mailjet_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mailjet_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportMailjet resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-mailjet',
    description=""" Creates a TransportMailjet resource. """,
    tags=['transport_mailjet_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mailjet_post(body: TransportMailjetPost):
    """
    Creates a TransportMailjet resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-mailjet/{id}',
    description=""" Removes the TransportMailjet resource. """,
    tags=['transport_mailjet_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mailjet_id_delete(id: str):
    """
    Removes the TransportMailjet resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-mailjet/{id}',
    description=""" Retrieves a TransportMailjet resource. """,
    tags=['transport_mailjet_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mailjet_id_get(id: str):
    """
    Retrieves a TransportMailjet resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-mailjet/{id}',
    description=""" Replaces the TransportMailjet resource. """,
    tags=['transport_mailjet_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mailjet_id_put(id: str, body: TransportMailjetPut = ...):
    """
    Replaces the TransportMailjet resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-mastodon',
    description=""" Retrieves the collection of TransportMastodon resources. """,
    tags=['transport_mastodon_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mastodon_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportMastodon resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-mastodon',
    description=""" Creates a TransportMastodon resource. """,
    tags=['transport_mastodon_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mastodon_post(body: TransportMastodonPost):
    """
    Creates a TransportMastodon resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-mastodon/{id}',
    description=""" Removes the TransportMastodon resource. """,
    tags=['transport_mastodon_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mastodon_id_delete(id: str):
    """
    Removes the TransportMastodon resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-mastodon/{id}',
    description=""" Retrieves a TransportMastodon resource. """,
    tags=['transport_mastodon_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mastodon_id_get(id: str):
    """
    Retrieves a TransportMastodon resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-mastodon/{id}',
    description=""" Replaces the TransportMastodon resource. """,
    tags=['transport_mastodon_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mastodon_id_put(id: str, body: TransportMastodonPut = ...):
    """
    Replaces the TransportMastodon resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-mattermost',
    description=""" Retrieves the collection of TransportMattermost resources. """,
    tags=['transport_mattermost_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mattermost_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportMattermost resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-mattermost',
    description=""" Creates a TransportMattermost resource. """,
    tags=['transport_mattermost_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mattermost_post(body: TransportMattermostPost):
    """
    Creates a TransportMattermost resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-mattermost/{id}',
    description=""" Removes the TransportMattermost resource. """,
    tags=['transport_mattermost_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mattermost_id_delete(id: str):
    """
    Removes the TransportMattermost resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-mattermost/{id}',
    description=""" Retrieves a TransportMattermost resource. """,
    tags=['transport_mattermost_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mattermost_id_get(id: str):
    """
    Retrieves a TransportMattermost resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-mattermost/{id}',
    description=""" Replaces the TransportMattermost resource. """,
    tags=['transport_mattermost_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mattermost_id_put(id: str, body: TransportMattermostPut = ...):
    """
    Replaces the TransportMattermost resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-mercure',
    description=""" Retrieves the collection of TransportMercure resources. """,
    tags=['transport_mercure_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mercure_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportMercure resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-mercure',
    description=""" Creates a TransportMercure resource. """,
    tags=['transport_mercure_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mercure_post(body: TransportMercurePost):
    """
    Creates a TransportMercure resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-mercure/{id}',
    description=""" Removes the TransportMercure resource. """,
    tags=['transport_mercure_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mercure_id_delete(id: str):
    """
    Removes the TransportMercure resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-mercure/{id}',
    description=""" Retrieves a TransportMercure resource. """,
    tags=['transport_mercure_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mercure_id_get(id: str):
    """
    Retrieves a TransportMercure resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-mercure/{id}',
    description=""" Replaces the TransportMercure resource. """,
    tags=['transport_mercure_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mercure_id_put(id: str, body: TransportMercurePut = ...):
    """
    Replaces the TransportMercure resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-message-bird',
    description=""" Retrieves the collection of TransportMessageBird resources. """,
    tags=['transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_message_bird_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportMessageBird resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-message-bird',
    description=""" Creates a TransportMessageBird resource. """,
    tags=['transport_sms_operations', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_message_bird_post(body: TransportMessageBirdPost):
    """
    Creates a TransportMessageBird resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-message-bird/{id}',
    description=""" Removes the TransportMessageBird resource. """,
    tags=['transport_resource_deletion', 'transport_message_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_message_bird_id_delete(id: str):
    """
    Removes the TransportMessageBird resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-message-bird/{id}',
    description=""" Retrieves a TransportMessageBird resource. """,
    tags=['transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_message_bird_id_get(id: str):
    """
    Retrieves a TransportMessageBird resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-message-bird/{id}',
    description=""" Replaces the TransportMessageBird resource. """,
    tags=['transport_sms_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_message_bird_id_put(id: str, body: TransportMessageBirdPut = ...):
    """
    Replaces the TransportMessageBird resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-message-media',
    description=""" Retrieves the collection of TransportMessageMedia resources. """,
    tags=['transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_message_media_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportMessageMedia resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-message-media',
    description=""" Creates a TransportMessageMedia resource. """,
    tags=['transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_message_media_post(body: TransportMessageMediaPost):
    """
    Creates a TransportMessageMedia resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-message-media/{id}',
    description=""" Removes the TransportMessageMedia resource. """,
    tags=['transport_resource_deletion', 'media_object_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_message_media_id_delete(id: str):
    """
    Removes the TransportMessageMedia resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-message-media/{id}',
    description=""" Retrieves a TransportMessageMedia resource. """,
    tags=['transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_message_media_id_get(id: str):
    """
    Retrieves a TransportMessageMedia resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-message-media/{id}',
    description=""" Replaces the TransportMessageMedia resource. """,
    tags=['transport_resource_modification', 'transport_sms_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_message_media_id_put(id: str, body: TransportMessageMediaPut = ...):
    """
    Replaces the TransportMessageMedia resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-microsoft-teams',
    description=""" Retrieves the collection of TransportMicrosoftTeams resources. """,
    tags=['transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_microsoft_teams_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportMicrosoftTeams resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-microsoft-teams',
    description=""" Creates a TransportMicrosoftTeams resource. """,
    tags=['transport_microsoft_teams_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_microsoft_teams_post(body: TransportMicrosoftTeamsPost):
    """
    Creates a TransportMicrosoftTeams resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-microsoft-teams/{id}',
    description=""" Removes the TransportMicrosoftTeams resource. """,
    tags=['transport_resource_deletion', 'transport_microsoft_teams_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_microsoft_teams_id_delete(id: str):
    """
    Removes the TransportMicrosoftTeams resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-microsoft-teams/{id}',
    description=""" Retrieves a TransportMicrosoftTeams resource. """,
    tags=['transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_microsoft_teams_id_get(id: str):
    """
    Retrieves a TransportMicrosoftTeams resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-microsoft-teams/{id}',
    description=""" Replaces the TransportMicrosoftTeams resource. """,
    tags=['transport_microsoft_teams_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_microsoft_teams_id_put(
    id: str, body: TransportMicrosoftTeamsPut = ...
):
    """
    Replaces the TransportMicrosoftTeams resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-mobyt',
    description=""" Retrieves the collection of TransportMobyt resources. """,
    tags=['transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mobyt_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportMobyt resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-mobyt',
    description=""" Creates a TransportMobyt resource. """,
    tags=['transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mobyt_post(body: TransportMobytPost):
    """
    Creates a TransportMobyt resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-mobyt/{id}',
    description=""" Removes the TransportMobyt resource. """,
    tags=['transport_resource_deletion', 'transport_mobyt_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mobyt_id_delete(id: str):
    """
    Removes the TransportMobyt resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-mobyt/{id}',
    description=""" Retrieves a TransportMobyt resource. """,
    tags=['transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mobyt_id_get(id: str):
    """
    Retrieves a TransportMobyt resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-mobyt/{id}',
    description=""" Replaces the TransportMobyt resource. """,
    tags=['transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_mobyt_id_put(id: str, body: TransportMobytPut = ...):
    """
    Replaces the TransportMobyt resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-octopush',
    description=""" Retrieves the collection of TransportOctopush resources. """,
    tags=['transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_octopush_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportOctopush resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-octopush',
    description=""" Creates a TransportOctopush resource. """,
    tags=['transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_octopush_post(body: TransportOctopushPost):
    """
    Creates a TransportOctopush resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-octopush/{id}',
    description=""" Removes the TransportOctopush resource. """,
    tags=['transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_octopush_id_delete(id: str):
    """
    Removes the TransportOctopush resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-octopush/{id}',
    description=""" Retrieves a TransportOctopush resource. """,
    tags=['transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_octopush_id_get(id: str):
    """
    Retrieves a TransportOctopush resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-octopush/{id}',
    description=""" Replaces the TransportOctopush resource. """,
    tags=['transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_octopush_id_put(id: str, body: TransportOctopushPut = ...):
    """
    Replaces the TransportOctopush resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-one-signal',
    description=""" Retrieves the collection of TransportOneSignal resources. """,
    tags=['transport_one_signal_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_one_signal_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportOneSignal resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-one-signal',
    description=""" Creates a TransportOneSignal resource. """,
    tags=['transport_one_signal_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_one_signal_post(body: TransportOneSignalPost):
    """
    Creates a TransportOneSignal resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-one-signal/{id}',
    description=""" Removes the TransportOneSignal resource. """,
    tags=['transport_resource_deletion', 'transport_one_signal_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_one_signal_id_delete(id: str):
    """
    Removes the TransportOneSignal resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-one-signal/{id}',
    description=""" Retrieves a TransportOneSignal resource. """,
    tags=['transport_one_signal_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_one_signal_id_get(id: str):
    """
    Retrieves a TransportOneSignal resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-one-signal/{id}',
    description=""" Replaces the TransportOneSignal resource. """,
    tags=['transport_one_signal_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_one_signal_id_put(id: str, body: TransportOneSignalPut = ...):
    """
    Replaces the TransportOneSignal resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-opsgenie',
    description=""" Retrieves the collection of TransportOpsgenie resources. """,
    tags=['transport_opsgenie_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_opsgenie_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportOpsgenie resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-opsgenie',
    description=""" Creates a TransportOpsgenie resource. """,
    tags=['transport_opsgenie_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_opsgenie_post(body: TransportOpsgeniePost):
    """
    Creates a TransportOpsgenie resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-opsgenie/{id}',
    description=""" Removes the TransportOpsgenie resource. """,
    tags=['transport_opsgenie_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_opsgenie_id_delete(id: str):
    """
    Removes the TransportOpsgenie resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-opsgenie/{id}',
    description=""" Retrieves a TransportOpsgenie resource. """,
    tags=['transport_opsgenie_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_opsgenie_id_get(id: str):
    """
    Retrieves a TransportOpsgenie resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-opsgenie/{id}',
    description=""" Replaces the TransportOpsgenie resource. """,
    tags=['transport_opsgenie_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_opsgenie_id_put(id: str, body: TransportOpsgeniePut = ...):
    """
    Replaces the TransportOpsgenie resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-orange-sms',
    description=""" Retrieves the collection of TransportOrangeSms resources. """,
    tags=['transport_orange_sms_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_orange_sms_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportOrangeSms resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-orange-sms',
    description=""" Creates a TransportOrangeSms resource. """,
    tags=[
        'transport_orange_sms_management',
        'transport_sms_operations',
        'transport_resource_creation',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_orange_sms_post(body: TransportOrangeSmsPost):
    """
    Creates a TransportOrangeSms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-orange-sms/{id}',
    description=""" Removes the TransportOrangeSms resource. """,
    tags=['transport_orange_sms_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_orange_sms_id_delete(id: str):
    """
    Removes the TransportOrangeSms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-orange-sms/{id}',
    description=""" Retrieves a TransportOrangeSms resource. """,
    tags=['transport_orange_sms_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_orange_sms_id_get(id: str):
    """
    Retrieves a TransportOrangeSms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-orange-sms/{id}',
    description=""" Replaces the TransportOrangeSms resource. """,
    tags=[
        'transport_orange_sms_management',
        'transport_sms_operations',
        'transport_resource_modification',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_orange_sms_id_put(id: str, body: TransportOrangeSmsPut = ...):
    """
    Replaces the TransportOrangeSms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-ovh-cloud',
    description=""" Retrieves the collection of TransportOvhCloud resources. """,
    tags=['transport_ovh_cloud_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_ovh_cloud_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportOvhCloud resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-ovh-cloud',
    description=""" Creates a TransportOvhCloud resource. """,
    tags=[
        'transport_ovh_cloud_management',
        'transport_resource_creation',
        'transport_resource_modification',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_ovh_cloud_post(body: TransportOvhCloudPost):
    """
    Creates a TransportOvhCloud resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-ovh-cloud/{id}',
    description=""" Removes the TransportOvhCloud resource. """,
    tags=['transport_ovh_cloud_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_ovh_cloud_id_delete(id: str):
    """
    Removes the TransportOvhCloud resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-ovh-cloud/{id}',
    description=""" Retrieves a TransportOvhCloud resource. """,
    tags=['transport_ovh_cloud_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_ovh_cloud_id_get(id: str):
    """
    Retrieves a TransportOvhCloud resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-ovh-cloud/{id}',
    description=""" Replaces the TransportOvhCloud resource. """,
    tags=['transport_ovh_cloud_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_ovh_cloud_id_put(id: str, body: TransportOvhCloudPut = ...):
    """
    Replaces the TransportOvhCloud resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-pager-duty',
    description=""" Retrieves the collection of TransportPagerDuty resources. """,
    tags=['transport_pager_duty_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pager_duty_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportPagerDuty resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-pager-duty',
    description=""" Creates a TransportPagerDuty resource. """,
    tags=['transport_pager_duty_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pager_duty_post(body: TransportPagerDutyPost):
    """
    Creates a TransportPagerDuty resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-pager-duty/{id}',
    description=""" Removes the TransportPagerDuty resource. """,
    tags=['transport_pager_duty_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pager_duty_id_delete(id: str):
    """
    Removes the TransportPagerDuty resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-pager-duty/{id}',
    description=""" Retrieves a TransportPagerDuty resource. """,
    tags=['transport_pager_duty_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pager_duty_id_get(id: str):
    """
    Retrieves a TransportPagerDuty resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-pager-duty/{id}',
    description=""" Replaces the TransportPagerDuty resource. """,
    tags=['transport_pager_duty_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pager_duty_id_put(id: str, body: TransportPagerDutyPut = ...):
    """
    Replaces the TransportPagerDuty resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-pager-tree',
    description=""" Retrieves the collection of TransportPagerTree resources. """,
    tags=['transport_pager_tree_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pager_tree_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportPagerTree resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-pager-tree',
    description=""" Creates a TransportPagerTree resource. """,
    tags=['transport_pager_tree_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pager_tree_post(body: TransportPagerTreePost):
    """
    Creates a TransportPagerTree resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-pager-tree/{id}',
    description=""" Removes the TransportPagerTree resource. """,
    tags=['transport_pager_tree_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pager_tree_id_delete(id: str):
    """
    Removes the TransportPagerTree resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-pager-tree/{id}',
    description=""" Retrieves a TransportPagerTree resource. """,
    tags=['transport_pager_tree_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pager_tree_id_get(id: str):
    """
    Retrieves a TransportPagerTree resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-pager-tree/{id}',
    description=""" Replaces the TransportPagerTree resource. """,
    tags=['transport_pager_tree_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pager_tree_id_put(id: str, body: TransportPagerTreePut = ...):
    """
    Replaces the TransportPagerTree resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-plivo',
    description=""" Retrieves the collection of TransportPlivo resources. """,
    tags=['transport_plivo_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_plivo_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportPlivo resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-plivo',
    description=""" Creates a TransportPlivo resource. """,
    tags=['transport_plivo_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_plivo_post(body: TransportPlivoPost):
    """
    Creates a TransportPlivo resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-plivo/{id}',
    description=""" Removes the TransportPlivo resource. """,
    tags=['transport_plivo_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_plivo_id_delete(id: str):
    """
    Removes the TransportPlivo resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-plivo/{id}',
    description=""" Retrieves a TransportPlivo resource. """,
    tags=['transport_plivo_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_plivo_id_get(id: str):
    """
    Retrieves a TransportPlivo resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-plivo/{id}',
    description=""" Replaces the TransportPlivo resource. """,
    tags=['transport_plivo_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_plivo_id_put(id: str, body: TransportPlivoPut = ...):
    """
    Replaces the TransportPlivo resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-pushbullet',
    description=""" Retrieves the collection of TransportPushbullet resources. """,
    tags=['transport_pushbullet_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushbullet_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportPushbullet resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-pushbullet',
    description=""" Creates a TransportPushbullet resource. """,
    tags=['transport_pushbullet_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushbullet_post(body: TransportPushbulletPost):
    """
    Creates a TransportPushbullet resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-pushbullet/{id}',
    description=""" Removes the TransportPushbullet resource. """,
    tags=['transport_pushbullet_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushbullet_id_delete(id: str):
    """
    Removes the TransportPushbullet resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-pushbullet/{id}',
    description=""" Retrieves a TransportPushbullet resource. """,
    tags=['transport_pushbullet_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushbullet_id_get(id: str):
    """
    Retrieves a TransportPushbullet resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-pushbullet/{id}',
    description=""" Replaces the TransportPushbullet resource. """,
    tags=['transport_pushbullet_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushbullet_id_put(id: str, body: TransportPushbulletPut = ...):
    """
    Replaces the TransportPushbullet resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-pushover',
    description=""" Retrieves the collection of TransportPushover resources. """,
    tags=['transport_pushover_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushover_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportPushover resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-pushover',
    description=""" Creates a TransportPushover resource. """,
    tags=['transport_pushover_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushover_post(body: TransportPushoverPost):
    """
    Creates a TransportPushover resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-pushover/{id}',
    description=""" Removes the TransportPushover resource. """,
    tags=['transport_pushover_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushover_id_delete(id: str):
    """
    Removes the TransportPushover resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-pushover/{id}',
    description=""" Retrieves a TransportPushover resource. """,
    tags=['transport_pushover_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushover_id_get(id: str):
    """
    Retrieves a TransportPushover resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-pushover/{id}',
    description=""" Replaces the TransportPushover resource. """,
    tags=['transport_pushover_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushover_id_put(id: str, body: TransportPushoverPut = ...):
    """
    Replaces the TransportPushover resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-pushy',
    description=""" Retrieves the collection of TransportPushy resources. """,
    tags=['transport_pushy_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushy_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportPushy resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-pushy',
    description=""" Creates a TransportPushy resource. """,
    tags=['transport_pushy_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushy_post(body: TransportPushyPost):
    """
    Creates a TransportPushy resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-pushy/{id}',
    description=""" Removes the TransportPushy resource. """,
    tags=['transport_pushy_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushy_id_delete(id: str):
    """
    Removes the TransportPushy resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-pushy/{id}',
    description=""" Retrieves a TransportPushy resource. """,
    tags=['transport_pushy_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushy_id_get(id: str):
    """
    Retrieves a TransportPushy resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-pushy/{id}',
    description=""" Replaces the TransportPushy resource. """,
    tags=['transport_pushy_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_pushy_id_put(id: str, body: TransportPushyPut = ...):
    """
    Replaces the TransportPushy resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-ring-central',
    description=""" Retrieves the collection of TransportRingCentral resources. """,
    tags=['transport_ring_central_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_ring_central_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportRingCentral resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-ring-central',
    description=""" Creates a TransportRingCentral resource. """,
    tags=['transport_ring_central_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_ring_central_post(body: TransportRingCentralPost):
    """
    Creates a TransportRingCentral resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-ring-central/{id}',
    description=""" Removes the TransportRingCentral resource. """,
    tags=['transport_ring_central_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_ring_central_id_delete(id: str):
    """
    Removes the TransportRingCentral resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-ring-central/{id}',
    description=""" Retrieves a TransportRingCentral resource. """,
    tags=['transport_ring_central_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_ring_central_id_get(id: str):
    """
    Retrieves a TransportRingCentral resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-ring-central/{id}',
    description=""" Replaces the TransportRingCentral resource. """,
    tags=['transport_ring_central_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_ring_central_id_put(id: str, body: TransportRingCentralPut = ...):
    """
    Replaces the TransportRingCentral resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-rocket-chat',
    description=""" Retrieves the collection of TransportRocketChat resources. """,
    tags=['transport_rocket_chat_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_rocket_chat_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportRocketChat resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-rocket-chat',
    description=""" Creates a TransportRocketChat resource. """,
    tags=['transport_rocket_chat_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_rocket_chat_post(body: TransportRocketChatPost):
    """
    Creates a TransportRocketChat resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-rocket-chat/{id}',
    description=""" Removes the TransportRocketChat resource. """,
    tags=['transport_rocket_chat_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_rocket_chat_id_delete(id: str):
    """
    Removes the TransportRocketChat resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-rocket-chat/{id}',
    description=""" Retrieves a TransportRocketChat resource. """,
    tags=['transport_rocket_chat_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_rocket_chat_id_get(id: str):
    """
    Retrieves a TransportRocketChat resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-rocket-chat/{id}',
    description=""" Replaces the TransportRocketChat resource. """,
    tags=['transport_rocket_chat_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_rocket_chat_id_put(id: str, body: TransportRocketChatPut = ...):
    """
    Replaces the TransportRocketChat resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-sendberry',
    description=""" Retrieves the collection of TransportSendberry resources. """,
    tags=['transport_sendberry_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sendberry_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportSendberry resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-sendberry',
    description=""" Creates a TransportSendberry resource. """,
    tags=['transport_sendberry_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sendberry_post(body: TransportSendberryPost):
    """
    Creates a TransportSendberry resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-sendberry/{id}',
    description=""" Removes the TransportSendberry resource. """,
    tags=['transport_sendberry_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sendberry_id_delete(id: str):
    """
    Removes the TransportSendberry resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-sendberry/{id}',
    description=""" Retrieves a TransportSendberry resource. """,
    tags=['transport_sendberry_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sendberry_id_get(id: str):
    """
    Retrieves a TransportSendberry resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-sendberry/{id}',
    description=""" Replaces the TransportSendberry resource. """,
    tags=['transport_sendberry_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sendberry_id_put(id: str, body: TransportSendberryPut = ...):
    """
    Replaces the TransportSendberry resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-sendinblue',
    description=""" Retrieves the collection of TransportSendinblue resources. """,
    tags=['transport_sendinblue_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sendinblue_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportSendinblue resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-sendinblue',
    description=""" Creates a TransportSendinblue resource. """,
    tags=['transport_sendinblue_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sendinblue_post(body: TransportSendinbluePost):
    """
    Creates a TransportSendinblue resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-sendinblue/{id}',
    description=""" Removes the TransportSendinblue resource. """,
    tags=['transport_sendinblue_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sendinblue_id_delete(id: str):
    """
    Removes the TransportSendinblue resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-sendinblue/{id}',
    description=""" Retrieves a TransportSendinblue resource. """,
    tags=['transport_sendinblue_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sendinblue_id_get(id: str):
    """
    Retrieves a TransportSendinblue resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-sendinblue/{id}',
    description=""" Replaces the TransportSendinblue resource. """,
    tags=['transport_sendinblue_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sendinblue_id_put(id: str, body: TransportSendinbluePut = ...):
    """
    Replaces the TransportSendinblue resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-simple-textin',
    description=""" Retrieves the collection of TransportSimpleTextin resources. """,
    tags=['transport_simple_textin_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_simple_textin_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportSimpleTextin resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-simple-textin',
    description=""" Creates a TransportSimpleTextin resource. """,
    tags=['transport_simple_textin_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_simple_textin_post(body: TransportSimpleTextinPost):
    """
    Creates a TransportSimpleTextin resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-simple-textin/{id}',
    description=""" Removes the TransportSimpleTextin resource. """,
    tags=['transport_simple_textin_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_simple_textin_id_delete(id: str):
    """
    Removes the TransportSimpleTextin resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-simple-textin/{id}',
    description=""" Retrieves a TransportSimpleTextin resource. """,
    tags=['transport_simple_textin_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_simple_textin_id_get(id: str):
    """
    Retrieves a TransportSimpleTextin resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-simple-textin/{id}',
    description=""" Replaces the TransportSimpleTextin resource. """,
    tags=['transport_simple_textin_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_simple_textin_id_put(id: str, body: TransportSimpleTextinPut = ...):
    """
    Replaces the TransportSimpleTextin resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-sinch',
    description=""" Retrieves the collection of TransportSinch resources. """,
    tags=['transport_sinch_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sinch_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportSinch resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-sinch',
    description=""" Creates a TransportSinch resource. """,
    tags=['transport_sinch_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sinch_post(body: TransportSinchPost):
    """
    Creates a TransportSinch resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-sinch/{id}',
    description=""" Removes the TransportSinch resource. """,
    tags=['transport_sinch_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sinch_id_delete(id: str):
    """
    Removes the TransportSinch resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-sinch/{id}',
    description=""" Retrieves a TransportSinch resource. """,
    tags=['transport_sinch_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sinch_id_get(id: str):
    """
    Retrieves a TransportSinch resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-sinch/{id}',
    description=""" Replaces the TransportSinch resource. """,
    tags=['transport_sinch_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sinch_id_put(id: str, body: TransportSinchPut = ...):
    """
    Replaces the TransportSinch resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-slack',
    description=""" Retrieves the collection of TransportSlack resources. """,
    tags=['transport_slack_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_slack_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportSlack resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-slack',
    description=""" Creates a TransportSlack resource. """,
    tags=['transport_slack_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_slack_post(body: TransportSlackPost):
    """
    Creates a TransportSlack resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-slack/{id}',
    description=""" Removes the TransportSlack resource. """,
    tags=['transport_slack_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_slack_id_delete(id: str):
    """
    Removes the TransportSlack resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-slack/{id}',
    description=""" Retrieves a TransportSlack resource. """,
    tags=['transport_slack_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_slack_id_get(id: str):
    """
    Retrieves a TransportSlack resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-slack/{id}',
    description=""" Replaces the TransportSlack resource. """,
    tags=['transport_slack_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_slack_id_put(id: str, body: TransportSlackPut = ...):
    """
    Replaces the TransportSlack resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-sms-biuras',
    description=""" Retrieves the collection of TransportSmsBiuras resources. """,
    tags=['transport_sms_biuras_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms_biuras_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportSmsBiuras resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-sms-biuras',
    description=""" Creates a TransportSmsBiuras resource. """,
    tags=[
        'transport_sms_biuras_management',
        'transport_sms_operations',
        'transport_resource_creation',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms_biuras_post(body: TransportSmsBiurasPost):
    """
    Creates a TransportSmsBiuras resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-sms-biuras/{id}',
    description=""" Removes the TransportSmsBiuras resource. """,
    tags=['transport_sms_biuras_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms_biuras_id_delete(id: str):
    """
    Removes the TransportSmsBiuras resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-sms-biuras/{id}',
    description=""" Retrieves a TransportSmsBiuras resource. """,
    tags=['transport_sms_biuras_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms_biuras_id_get(id: str):
    """
    Retrieves a TransportSmsBiuras resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-sms-biuras/{id}',
    description=""" Replaces the TransportSmsBiuras resource. """,
    tags=['transport_sms_biuras_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms_biuras_id_put(id: str, body: TransportSmsBiurasPut = ...):
    """
    Replaces the TransportSmsBiuras resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-sms-factor',
    description=""" Retrieves the collection of TransportSmsFactor resources. """,
    tags=[
        'transport_sms_factor_management',
        'transport_sms_management',
        'transport_resource_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms_factor_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportSmsFactor resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-sms-factor',
    description=""" Creates a TransportSmsFactor resource. """,
    tags=['transport_sms_factor_management', 'transport_sms_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms_factor_post(body: TransportSmsFactorPost):
    """
    Creates a TransportSmsFactor resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-sms-factor/{id}',
    description=""" Removes the TransportSmsFactor resource. """,
    tags=['transport_sms_factor_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms_factor_id_delete(id: str):
    """
    Removes the TransportSmsFactor resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-sms-factor/{id}',
    description=""" Retrieves a TransportSmsFactor resource. """,
    tags=[
        'transport_sms_factor_management',
        'transport_sms_operations',
        'transport_resource_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms_factor_id_get(id: str):
    """
    Retrieves a TransportSmsFactor resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-sms-factor/{id}',
    description=""" Replaces the TransportSmsFactor resource. """,
    tags=[
        'transport_sms_factor_management',
        'transport_sms_operations',
        'transport_resource_modification',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms_factor_id_put(id: str, body: TransportSmsFactorPut = ...):
    """
    Replaces the TransportSmsFactor resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-sms77',
    description=""" Retrieves the collection of TransportSms77 resources. """,
    tags=['transport_sms_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms77_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportSms77 resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-sms77',
    description=""" Creates a TransportSms77 resource. """,
    tags=['transport_sms_management', 'transport_sms_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms77_post(body: TransportSms77Post):
    """
    Creates a TransportSms77 resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-sms77/{id}',
    description=""" Removes the TransportSms77 resource. """,
    tags=['transport_sms_operations', 'transport_sms_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms77_id_delete(id: str):
    """
    Removes the TransportSms77 resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-sms77/{id}',
    description=""" Retrieves a TransportSms77 resource. """,
    tags=['transport_sms_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms77_id_get(id: str):
    """
    Retrieves a TransportSms77 resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-sms77/{id}',
    description=""" Replaces the TransportSms77 resource. """,
    tags=[
        'transport_sms_operations',
        'transport_sms_management',
        'transport_resource_modification',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_sms77_id_put(id: str, body: TransportSms77Put = ...):
    """
    Replaces the TransportSms77 resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-smsapi',
    description=""" Retrieves the collection of TransportSmsapi resources. """,
    tags=[
        'transport_sms_operations',
        'transport_resource_retrieval',
        'transport_sms_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsapi_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportSmsapi resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-smsapi',
    description=""" Creates a TransportSmsapi resource. """,
    tags=['transport_sms_operations', 'transport_sms_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsapi_post(body: TransportSmsapiPost):
    """
    Creates a TransportSmsapi resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-smsapi/{id}',
    description=""" Removes the TransportSmsapi resource. """,
    tags=['transport_sms_operations', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsapi_id_delete(id: str):
    """
    Removes the TransportSmsapi resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-smsapi/{id}',
    description=""" Retrieves a TransportSmsapi resource. """,
    tags=[
        'transport_sms_operations',
        'transport_sms_management',
        'transport_resource_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsapi_id_get(id: str):
    """
    Retrieves a TransportSmsapi resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-smsapi/{id}',
    description=""" Replaces the TransportSmsapi resource. """,
    tags=[
        'transport_sms_operations',
        'transport_sms_management',
        'transport_resource_modification',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsapi_id_put(id: str, body: TransportSmsapiPut = ...):
    """
    Replaces the TransportSmsapi resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-smsc',
    description=""" Retrieves the collection of TransportSmsc resources. """,
    tags=['transport_sms_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsc_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportSmsc resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-smsc',
    description=""" Creates a TransportSmsc resource. """,
    tags=['transport_sms_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsc_post(body: TransportSmscPost):
    """
    Creates a TransportSmsc resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-smsc/{id}',
    description=""" Removes the TransportSmsc resource. """,
    tags=['transport_sms_operations', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsc_id_delete(id: str):
    """
    Removes the TransportSmsc resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-smsc/{id}',
    description=""" Retrieves a TransportSmsc resource. """,
    tags=['transport_sms_operations', 'transport_sms_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsc_id_get(id: str):
    """
    Retrieves a TransportSmsc resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-smsc/{id}',
    description=""" Replaces the TransportSmsc resource. """,
    tags=['transport_sms_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsc_id_put(id: str, body: TransportSmscPut = ...):
    """
    Replaces the TransportSmsc resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-smsmode',
    description=""" Retrieves the collection of TransportSmsmode resources. """,
    tags=[
        'transport_sms_management',
        'transport_sms_operations',
        'transport_resource_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsmode_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportSmsmode resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-smsmode',
    description=""" Creates a TransportSmsmode resource. """,
    tags=['transport_sms_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsmode_post(body: TransportSmsmodePost):
    """
    Creates a TransportSmsmode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-smsmode/{id}',
    description=""" Removes the TransportSmsmode resource. """,
    tags=[
        'transport_sms_operations',
        'transport_resource_deletion',
        'transport_sms_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsmode_id_delete(id: str):
    """
    Removes the TransportSmsmode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-smsmode/{id}',
    description=""" Retrieves a TransportSmsmode resource. """,
    tags=['transport_sms_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsmode_id_get(id: str):
    """
    Retrieves a TransportSmsmode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-smsmode/{id}',
    description=""" Replaces the TransportSmsmode resource. """,
    tags=['transport_sms_operations', 'transport_sms_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_smsmode_id_put(id: str, body: TransportSmsmodePut = ...):
    """
    Replaces the TransportSmsmode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-spot-hit',
    description=""" Retrieves the collection of TransportSpotHit resources. """,
    tags=['transport_spot_hit_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_spot_hit_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportSpotHit resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-spot-hit',
    description=""" Creates a TransportSpotHit resource. """,
    tags=['transport_spot_hit_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_spot_hit_post(body: TransportSpotHitPost):
    """
    Creates a TransportSpotHit resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-spot-hit/{id}',
    description=""" Removes the TransportSpotHit resource. """,
    tags=['transport_spot_hit_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_spot_hit_id_delete(id: str):
    """
    Removes the TransportSpotHit resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-spot-hit/{id}',
    description=""" Retrieves a TransportSpotHit resource. """,
    tags=['transport_spot_hit_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_spot_hit_id_get(id: str):
    """
    Retrieves a TransportSpotHit resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-spot-hit/{id}',
    description=""" Replaces the TransportSpotHit resource. """,
    tags=['transport_spot_hit_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_spot_hit_id_put(id: str, body: TransportSpotHitPut = ...):
    """
    Replaces the TransportSpotHit resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-telegram',
    description=""" Retrieves the collection of TransportTelegram resources. """,
    tags=['transport_telegram_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_telegram_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportTelegram resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-telegram',
    description=""" Creates a TransportTelegram resource. """,
    tags=['transport_telegram_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_telegram_post(body: TransportTelegramPost):
    """
    Creates a TransportTelegram resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-telegram/{id}',
    description=""" Removes the TransportTelegram resource. """,
    tags=['transport_telegram_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_telegram_id_delete(id: str):
    """
    Removes the TransportTelegram resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-telegram/{id}',
    description=""" Retrieves a TransportTelegram resource. """,
    tags=['transport_telegram_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_telegram_id_get(id: str):
    """
    Retrieves a TransportTelegram resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-telegram/{id}',
    description=""" Replaces the TransportTelegram resource. """,
    tags=['transport_telegram_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_telegram_id_put(id: str, body: TransportTelegramPut = ...):
    """
    Replaces the TransportTelegram resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-telnyx',
    description=""" Retrieves the collection of TransportTelnyx resources. """,
    tags=['transport_telnyx_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_telnyx_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportTelnyx resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-telnyx',
    description=""" Creates a TransportTelnyx resource. """,
    tags=['transport_telnyx_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_telnyx_post(body: TransportTelnyxPost):
    """
    Creates a TransportTelnyx resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-telnyx/{id}',
    description=""" Removes the TransportTelnyx resource. """,
    tags=['transport_telnyx_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_telnyx_id_delete(id: str):
    """
    Removes the TransportTelnyx resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-telnyx/{id}',
    description=""" Retrieves a TransportTelnyx resource. """,
    tags=['transport_telnyx_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_telnyx_id_get(id: str):
    """
    Retrieves a TransportTelnyx resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-telnyx/{id}',
    description=""" Replaces the TransportTelnyx resource. """,
    tags=['transport_telnyx_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_telnyx_id_put(id: str, body: TransportTelnyxPut = ...):
    """
    Replaces the TransportTelnyx resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-termii',
    description=""" Retrieves the collection of TransportTermii resources. """,
    tags=['transport_termii_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_termii_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportTermii resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-termii',
    description=""" Creates a TransportTermii resource. """,
    tags=['transport_termii_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_termii_post(body: TransportTermiiPost):
    """
    Creates a TransportTermii resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-termii/{id}',
    description=""" Removes the TransportTermii resource. """,
    tags=['transport_termii_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_termii_id_delete(id: str):
    """
    Removes the TransportTermii resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-termii/{id}',
    description=""" Retrieves a TransportTermii resource. """,
    tags=['transport_termii_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_termii_id_get(id: str):
    """
    Retrieves a TransportTermii resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-termii/{id}',
    description=""" Replaces the TransportTermii resource. """,
    tags=['transport_termii_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_termii_id_put(id: str, body: TransportTermiiPut = ...):
    """
    Replaces the TransportTermii resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-trello',
    description=""" Retrieves the collection of TransportTrello resources. """,
    tags=['transport_trello_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_trello_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportTrello resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-trello',
    description=""" Creates a TransportTrello resource. """,
    tags=['transport_trello_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_trello_post(body: TransportTrelloPost):
    """
    Creates a TransportTrello resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-trello/{id}',
    description=""" Removes the TransportTrello resource. """,
    tags=['transport_trello_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_trello_id_delete(id: str):
    """
    Removes the TransportTrello resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-trello/{id}',
    description=""" Retrieves a TransportTrello resource. """,
    tags=['transport_trello_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_trello_id_get(id: str):
    """
    Retrieves a TransportTrello resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-trello/{id}',
    description=""" Replaces the TransportTrello resource. """,
    tags=['transport_trello_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_trello_id_put(id: str, body: TransportTrelloPut = ...):
    """
    Replaces the TransportTrello resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-turbo-sms',
    description=""" Retrieves the collection of TransportTurboSms resources. """,
    tags=['transport_turbo_sms_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_turbo_sms_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportTurboSms resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-turbo-sms',
    description=""" Creates a TransportTurboSms resource. """,
    tags=[
        'transport_turbo_sms_management',
        'transport_sms_operations',
        'transport_resource_creation',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_turbo_sms_post(body: TransportTurboSmsPost):
    """
    Creates a TransportTurboSms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-turbo-sms/{id}',
    description=""" Removes the TransportTurboSms resource. """,
    tags=['transport_turbo_sms_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_turbo_sms_id_delete(id: str):
    """
    Removes the TransportTurboSms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-turbo-sms/{id}',
    description=""" Retrieves a TransportTurboSms resource. """,
    tags=['transport_turbo_sms_management', 'transport_sms_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_turbo_sms_id_get(id: str):
    """
    Retrieves a TransportTurboSms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-turbo-sms/{id}',
    description=""" Replaces the TransportTurboSms resource. """,
    tags=[
        'transport_turbo_sms_management',
        'transport_sms_operations',
        'transport_resource_modification',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_turbo_sms_id_put(id: str, body: TransportTurboSmsPut = ...):
    """
    Replaces the TransportTurboSms resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-twilio',
    description=""" Retrieves the collection of TransportTwilio resources. """,
    tags=['transport_twilio_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_twilio_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportTwilio resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-twilio',
    description=""" Creates a TransportTwilio resource. """,
    tags=['transport_twilio_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_twilio_post(body: TransportTwilioPost):
    """
    Creates a TransportTwilio resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-twilio/{id}',
    description=""" Removes the TransportTwilio resource. """,
    tags=['transport_twilio_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_twilio_id_delete(id: str):
    """
    Removes the TransportTwilio resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-twilio/{id}',
    description=""" Retrieves a TransportTwilio resource. """,
    tags=['transport_twilio_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_twilio_id_get(id: str):
    """
    Retrieves a TransportTwilio resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-twilio/{id}',
    description=""" Replaces the TransportTwilio resource. """,
    tags=['transport_twilio_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_twilio_id_put(id: str, body: TransportTwilioPut = ...):
    """
    Replaces the TransportTwilio resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-twitter',
    description=""" Retrieves the collection of TransportTwitter resources. """,
    tags=['transport_twitter_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_twitter_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportTwitter resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-twitter',
    description=""" Creates a TransportTwitter resource. """,
    tags=['transport_twitter_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_twitter_post(body: TransportTwitterPost):
    """
    Creates a TransportTwitter resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-twitter/{id}',
    description=""" Removes the TransportTwitter resource. """,
    tags=['transport_twitter_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_twitter_id_delete(id: str):
    """
    Removes the TransportTwitter resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-twitter/{id}',
    description=""" Retrieves a TransportTwitter resource. """,
    tags=['transport_twitter_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_twitter_id_get(id: str):
    """
    Retrieves a TransportTwitter resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-twitter/{id}',
    description=""" Replaces the TransportTwitter resource. """,
    tags=['transport_twitter_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_twitter_id_put(id: str, body: TransportTwitterPut = ...):
    """
    Replaces the TransportTwitter resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-vonage',
    description=""" Retrieves the collection of TransportVonage resources. """,
    tags=['transport_vonage_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_vonage_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportVonage resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-vonage',
    description=""" Creates a TransportVonage resource. """,
    tags=['transport_vonage_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_vonage_post(body: TransportVonagePost):
    """
    Creates a TransportVonage resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-vonage/{id}',
    description=""" Removes the TransportVonage resource. """,
    tags=['transport_vonage_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_vonage_id_delete(id: str):
    """
    Removes the TransportVonage resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-vonage/{id}',
    description=""" Retrieves a TransportVonage resource. """,
    tags=['transport_vonage_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_vonage_id_get(id: str):
    """
    Retrieves a TransportVonage resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-vonage/{id}',
    description=""" Replaces the TransportVonage resource. """,
    tags=['transport_vonage_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_vonage_id_put(id: str, body: TransportVonagePut = ...):
    """
    Replaces the TransportVonage resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-webhook',
    description=""" Retrieves the collection of TransportWebhook resources. """,
    tags=['transport_webhook_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_webhook_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportWebhook resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-webhook',
    description=""" Creates a TransportWebhook resource. """,
    tags=['transport_webhook_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_webhook_post(body: TransportWebhookPost):
    """
    Creates a TransportWebhook resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-webhook/{id}',
    description=""" Removes the TransportWebhook resource. """,
    tags=['transport_webhook_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_webhook_id_delete(id: str):
    """
    Removes the TransportWebhook resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-webhook/{id}',
    description=""" Retrieves a TransportWebhook resource. """,
    tags=['transport_webhook_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_webhook_id_get(id: str):
    """
    Retrieves a TransportWebhook resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-webhook/{id}',
    description=""" Replaces the TransportWebhook resource. """,
    tags=['transport_webhook_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_webhook_id_put(id: str, body: TransportWebhookPut = ...):
    """
    Replaces the TransportWebhook resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-yunpian',
    description=""" Retrieves the collection of TransportYunpian resources. """,
    tags=['transport_yunpian_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_yunpian_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportYunpian resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-yunpian',
    description=""" Creates a TransportYunpian resource. """,
    tags=['transport_yunpian_management', 'transport_resource_creation'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_yunpian_post(body: TransportYunpianPost):
    """
    Creates a TransportYunpian resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-yunpian/{id}',
    description=""" Removes the TransportYunpian resource. """,
    tags=['transport_yunpian_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_yunpian_id_delete(id: str):
    """
    Removes the TransportYunpian resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-yunpian/{id}',
    description=""" Retrieves a TransportYunpian resource. """,
    tags=['transport_yunpian_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_yunpian_id_get(id: str):
    """
    Retrieves a TransportYunpian resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-yunpian/{id}',
    description=""" Replaces the TransportYunpian resource. """,
    tags=['transport_yunpian_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_yunpian_id_put(id: str, body: TransportYunpianPut = ...):
    """
    Replaces the TransportYunpian resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-zendesk',
    description=""" Retrieves the collection of TransportZendesk resources. """,
    tags=['transport_zendesk_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_zendesk_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportZendesk resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-zendesk',
    description=""" Creates a TransportZendesk resource. """,
    tags=['transport_zendesk_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_zendesk_post(body: TransportZendeskPost):
    """
    Creates a TransportZendesk resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-zendesk/{id}',
    description=""" Removes the TransportZendesk resource. """,
    tags=['transport_zendesk_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_zendesk_id_delete(id: str):
    """
    Removes the TransportZendesk resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-zendesk/{id}',
    description=""" Retrieves a TransportZendesk resource. """,
    tags=['transport_zendesk_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_zendesk_id_get(id: str):
    """
    Retrieves a TransportZendesk resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-zendesk/{id}',
    description=""" Replaces the TransportZendesk resource. """,
    tags=['transport_zendesk_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_zendesk_id_put(id: str, body: TransportZendeskPut = ...):
    """
    Replaces the TransportZendesk resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-zulip',
    description=""" Retrieves the collection of TransportZulip resources. """,
    tags=['transport_zulip_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_zulip_get_collection(
    page: Optional[int] = 1,
    data_segment_code: Optional[str] = Query(None, alias='dataSegmentCode'),
    data_segment_code__: Optional[DataSegmentCode] = Query(
        None, alias='dataSegmentCode[]'
    ),
    partition: Optional[str] = None,
    partition__: Optional[Partition] = Query(None, alias='partition[]'),
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of TransportZulip resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/transport-zulip',
    description=""" Creates a TransportZulip resource. """,
    tags=['transport_zulip_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_zulip_post(body: TransportZulipPost):
    """
    Creates a TransportZulip resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/transport-zulip/{id}',
    description=""" Removes the TransportZulip resource. """,
    tags=['transport_zulip_management', 'transport_resource_deletion'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_zulip_id_delete(id: str):
    """
    Removes the TransportZulip resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/transport-zulip/{id}',
    description=""" Retrieves a TransportZulip resource. """,
    tags=['transport_zulip_management', 'transport_resource_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_zulip_id_get(id: str):
    """
    Retrieves a TransportZulip resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/transport-zulip/{id}',
    description=""" Replaces the TransportZulip resource. """,
    tags=['transport_zulip_management', 'transport_resource_modification'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_transport_zulip_id_put(id: str, body: TransportZulipPut = ...):
    """
    Replaces the TransportZulip resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user-account',
    description=""" Retrieves the collection of UserAccount resources. """,
    tags=['user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_user_account_get_collection(
    page: Optional[int] = 1,
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of UserAccount resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user-account-level-code',
    description=""" Retrieves the collection of UserAccountLevelCode resources. """,
    tags=['user_account_level_management', 'user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_user_account_level_code_get_collection(
    page: Optional[int] = 1,
    properties__: Optional[Properties] = Query(None, alias='properties[]'),
):
    """
    Retrieves the collection of UserAccountLevelCode resources.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user-account-level-code/{id}',
    description=""" Retrieves a UserAccountLevelCode resource. """,
    tags=['user_account_level_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_user_account_level_code_id_get(id: str):
    """
    Retrieves a UserAccountLevelCode resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/user-account/{id}',
    description=""" Retrieves a UserAccount resource. """,
    tags=['user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_user_account_id_get(id: str):
    """
    Retrieves a UserAccount resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/user-account/{id}',
    description=""" Replaces the UserAccount resource. """,
    tags=['user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def api_user_account_id_put(id: str, body: UserAccountPut = ...):
    """
    Replaces the UserAccount resource.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
